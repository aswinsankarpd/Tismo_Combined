/*
 * Command_Parser.c
 *
 *  Created on: Aug 25, 2023
 *      Author: Aswin Sankar
 */

#include "Command_Parser.h"

typedef struct {
    const char *command;
    const char *sub_command;
    void (*function)(int);
} CommandMap;


CommandMap commandTable[] = {
    { "LED","ON",LED_ON },
    { "LED","OFF",LED_OFF },
    { "CBUFF",NULL,cbuff_main }
};

char message[100];
char *command;
char *sub_command;
char *value;
static int cbuff_flag = 0;
void command_parser(char *Command_String){
    command = strtok(Command_String, "_");
    sub_command = strtok(NULL, "_");
    value = strtok(NULL,"_");
    int value_param = 0;
    int numCommands = sizeof(commandTable) / sizeof(commandTable[0]);


    for (int i = 0; i < numCommands; i++) {
           if ((strcmp(command, commandTable[i].command) == 0) && (strcmp(sub_command,commandTable[i].sub_command) == 0)) {
               if (value != NULL) {
				   value_param = atoi(value);
				   commandTable[i].function(value_param);
				   sprintf(message,"COMMAND IS : %s",command);
				   Tx_UART(message);
               	   }
               else{
					value_param = atoi(value);
					commandTable[i].function(value_param);
					sprintf(message,"COMMAND IS : %s",command);
					Tx_UART(message);
               }
               break;
           }
       }

}

