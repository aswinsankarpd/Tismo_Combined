
CLI_INT_ABS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b6c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000010c  08003d0c  08003d0c  00013d0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003e18  08003e18  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  08003e18  08003e18  00013e18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003e20  08003e20  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003e20  08003e20  00013e20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003e24  08003e24  00013e24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08003e28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000218  20000080  08003ea8  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000298  08003ea8  00020298  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
 13 .debug_info   000093b2  00000000  00000000  000200f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001f77  00000000  00000000  000294a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000830  00000000  00000000  0002b420  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000617  00000000  00000000  0002bc50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016d11  00000000  00000000  0002c267  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c36a  00000000  00000000  00042f78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00086a70  00000000  00000000  0004f2e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002804  00000000  00000000  000d5d54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000079  00000000  00000000  000d8558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000080 	.word	0x20000080
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003cf4 	.word	0x08003cf4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000084 	.word	0x20000084
 80001dc:	08003cf4 	.word	0x08003cf4

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b970 	b.w	80005a8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	460d      	mov	r5, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	460f      	mov	r7, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4694      	mov	ip, r2
 80002f4:	d965      	bls.n	80003c2 <__udivmoddi4+0xe2>
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	b143      	cbz	r3, 800030e <__udivmoddi4+0x2e>
 80002fc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000300:	f1c3 0220 	rsb	r2, r3, #32
 8000304:	409f      	lsls	r7, r3
 8000306:	fa20 f202 	lsr.w	r2, r0, r2
 800030a:	4317      	orrs	r7, r2
 800030c:	409c      	lsls	r4, r3
 800030e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000312:	fa1f f58c 	uxth.w	r5, ip
 8000316:	fbb7 f1fe 	udiv	r1, r7, lr
 800031a:	0c22      	lsrs	r2, r4, #16
 800031c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000320:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000324:	fb01 f005 	mul.w	r0, r1, r5
 8000328:	4290      	cmp	r0, r2
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x62>
 800032c:	eb1c 0202 	adds.w	r2, ip, r2
 8000330:	f101 37ff 	add.w	r7, r1, #4294967295
 8000334:	f080 811c 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000338:	4290      	cmp	r0, r2
 800033a:	f240 8119 	bls.w	8000570 <__udivmoddi4+0x290>
 800033e:	3902      	subs	r1, #2
 8000340:	4462      	add	r2, ip
 8000342:	1a12      	subs	r2, r2, r0
 8000344:	b2a4      	uxth	r4, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000352:	fb00 f505 	mul.w	r5, r0, r5
 8000356:	42a5      	cmp	r5, r4
 8000358:	d90a      	bls.n	8000370 <__udivmoddi4+0x90>
 800035a:	eb1c 0404 	adds.w	r4, ip, r4
 800035e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000362:	f080 8107 	bcs.w	8000574 <__udivmoddi4+0x294>
 8000366:	42a5      	cmp	r5, r4
 8000368:	f240 8104 	bls.w	8000574 <__udivmoddi4+0x294>
 800036c:	4464      	add	r4, ip
 800036e:	3802      	subs	r0, #2
 8000370:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000374:	1b64      	subs	r4, r4, r5
 8000376:	2100      	movs	r1, #0
 8000378:	b11e      	cbz	r6, 8000382 <__udivmoddi4+0xa2>
 800037a:	40dc      	lsrs	r4, r3
 800037c:	2300      	movs	r3, #0
 800037e:	e9c6 4300 	strd	r4, r3, [r6]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0xbc>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80ed 	beq.w	800056a <__udivmoddi4+0x28a>
 8000390:	2100      	movs	r1, #0
 8000392:	e9c6 0500 	strd	r0, r5, [r6]
 8000396:	4608      	mov	r0, r1
 8000398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039c:	fab3 f183 	clz	r1, r3
 80003a0:	2900      	cmp	r1, #0
 80003a2:	d149      	bne.n	8000438 <__udivmoddi4+0x158>
 80003a4:	42ab      	cmp	r3, r5
 80003a6:	d302      	bcc.n	80003ae <__udivmoddi4+0xce>
 80003a8:	4282      	cmp	r2, r0
 80003aa:	f200 80f8 	bhi.w	800059e <__udivmoddi4+0x2be>
 80003ae:	1a84      	subs	r4, r0, r2
 80003b0:	eb65 0203 	sbc.w	r2, r5, r3
 80003b4:	2001      	movs	r0, #1
 80003b6:	4617      	mov	r7, r2
 80003b8:	2e00      	cmp	r6, #0
 80003ba:	d0e2      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	e9c6 4700 	strd	r4, r7, [r6]
 80003c0:	e7df      	b.n	8000382 <__udivmoddi4+0xa2>
 80003c2:	b902      	cbnz	r2, 80003c6 <__udivmoddi4+0xe6>
 80003c4:	deff      	udf	#255	; 0xff
 80003c6:	fab2 f382 	clz	r3, r2
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8090 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d0:	1a8a      	subs	r2, r1, r2
 80003d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d6:	fa1f fe8c 	uxth.w	lr, ip
 80003da:	2101      	movs	r1, #1
 80003dc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003e0:	fb07 2015 	mls	r0, r7, r5, r2
 80003e4:	0c22      	lsrs	r2, r4, #16
 80003e6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ea:	fb0e f005 	mul.w	r0, lr, r5
 80003ee:	4290      	cmp	r0, r2
 80003f0:	d908      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f2:	eb1c 0202 	adds.w	r2, ip, r2
 80003f6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4290      	cmp	r0, r2
 80003fe:	f200 80cb 	bhi.w	8000598 <__udivmoddi4+0x2b8>
 8000402:	4645      	mov	r5, r8
 8000404:	1a12      	subs	r2, r2, r0
 8000406:	b2a4      	uxth	r4, r4
 8000408:	fbb2 f0f7 	udiv	r0, r2, r7
 800040c:	fb07 2210 	mls	r2, r7, r0, r2
 8000410:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000414:	fb0e fe00 	mul.w	lr, lr, r0
 8000418:	45a6      	cmp	lr, r4
 800041a:	d908      	bls.n	800042e <__udivmoddi4+0x14e>
 800041c:	eb1c 0404 	adds.w	r4, ip, r4
 8000420:	f100 32ff 	add.w	r2, r0, #4294967295
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x14c>
 8000426:	45a6      	cmp	lr, r4
 8000428:	f200 80bb 	bhi.w	80005a2 <__udivmoddi4+0x2c2>
 800042c:	4610      	mov	r0, r2
 800042e:	eba4 040e 	sub.w	r4, r4, lr
 8000432:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000436:	e79f      	b.n	8000378 <__udivmoddi4+0x98>
 8000438:	f1c1 0720 	rsb	r7, r1, #32
 800043c:	408b      	lsls	r3, r1
 800043e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000442:	ea4c 0c03 	orr.w	ip, ip, r3
 8000446:	fa05 f401 	lsl.w	r4, r5, r1
 800044a:	fa20 f307 	lsr.w	r3, r0, r7
 800044e:	40fd      	lsrs	r5, r7
 8000450:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000454:	4323      	orrs	r3, r4
 8000456:	fbb5 f8f9 	udiv	r8, r5, r9
 800045a:	fa1f fe8c 	uxth.w	lr, ip
 800045e:	fb09 5518 	mls	r5, r9, r8, r5
 8000462:	0c1c      	lsrs	r4, r3, #16
 8000464:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000468:	fb08 f50e 	mul.w	r5, r8, lr
 800046c:	42a5      	cmp	r5, r4
 800046e:	fa02 f201 	lsl.w	r2, r2, r1
 8000472:	fa00 f001 	lsl.w	r0, r0, r1
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000480:	f080 8088 	bcs.w	8000594 <__udivmoddi4+0x2b4>
 8000484:	42a5      	cmp	r5, r4
 8000486:	f240 8085 	bls.w	8000594 <__udivmoddi4+0x2b4>
 800048a:	f1a8 0802 	sub.w	r8, r8, #2
 800048e:	4464      	add	r4, ip
 8000490:	1b64      	subs	r4, r4, r5
 8000492:	b29d      	uxth	r5, r3
 8000494:	fbb4 f3f9 	udiv	r3, r4, r9
 8000498:	fb09 4413 	mls	r4, r9, r3, r4
 800049c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004a0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004a4:	45a6      	cmp	lr, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f103 35ff 	add.w	r5, r3, #4294967295
 80004b0:	d26c      	bcs.n	800058c <__udivmoddi4+0x2ac>
 80004b2:	45a6      	cmp	lr, r4
 80004b4:	d96a      	bls.n	800058c <__udivmoddi4+0x2ac>
 80004b6:	3b02      	subs	r3, #2
 80004b8:	4464      	add	r4, ip
 80004ba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004be:	fba3 9502 	umull	r9, r5, r3, r2
 80004c2:	eba4 040e 	sub.w	r4, r4, lr
 80004c6:	42ac      	cmp	r4, r5
 80004c8:	46c8      	mov	r8, r9
 80004ca:	46ae      	mov	lr, r5
 80004cc:	d356      	bcc.n	800057c <__udivmoddi4+0x29c>
 80004ce:	d053      	beq.n	8000578 <__udivmoddi4+0x298>
 80004d0:	b156      	cbz	r6, 80004e8 <__udivmoddi4+0x208>
 80004d2:	ebb0 0208 	subs.w	r2, r0, r8
 80004d6:	eb64 040e 	sbc.w	r4, r4, lr
 80004da:	fa04 f707 	lsl.w	r7, r4, r7
 80004de:	40ca      	lsrs	r2, r1
 80004e0:	40cc      	lsrs	r4, r1
 80004e2:	4317      	orrs	r7, r2
 80004e4:	e9c6 7400 	strd	r7, r4, [r6]
 80004e8:	4618      	mov	r0, r3
 80004ea:	2100      	movs	r1, #0
 80004ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004f0:	f1c3 0120 	rsb	r1, r3, #32
 80004f4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004f8:	fa20 f201 	lsr.w	r2, r0, r1
 80004fc:	fa25 f101 	lsr.w	r1, r5, r1
 8000500:	409d      	lsls	r5, r3
 8000502:	432a      	orrs	r2, r5
 8000504:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000508:	fa1f fe8c 	uxth.w	lr, ip
 800050c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000510:	fb07 1510 	mls	r5, r7, r0, r1
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800051a:	fb00 f50e 	mul.w	r5, r0, lr
 800051e:	428d      	cmp	r5, r1
 8000520:	fa04 f403 	lsl.w	r4, r4, r3
 8000524:	d908      	bls.n	8000538 <__udivmoddi4+0x258>
 8000526:	eb1c 0101 	adds.w	r1, ip, r1
 800052a:	f100 38ff 	add.w	r8, r0, #4294967295
 800052e:	d22f      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000530:	428d      	cmp	r5, r1
 8000532:	d92d      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000534:	3802      	subs	r0, #2
 8000536:	4461      	add	r1, ip
 8000538:	1b49      	subs	r1, r1, r5
 800053a:	b292      	uxth	r2, r2
 800053c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000540:	fb07 1115 	mls	r1, r7, r5, r1
 8000544:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000548:	fb05 f10e 	mul.w	r1, r5, lr
 800054c:	4291      	cmp	r1, r2
 800054e:	d908      	bls.n	8000562 <__udivmoddi4+0x282>
 8000550:	eb1c 0202 	adds.w	r2, ip, r2
 8000554:	f105 38ff 	add.w	r8, r5, #4294967295
 8000558:	d216      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 800055a:	4291      	cmp	r1, r2
 800055c:	d914      	bls.n	8000588 <__udivmoddi4+0x2a8>
 800055e:	3d02      	subs	r5, #2
 8000560:	4462      	add	r2, ip
 8000562:	1a52      	subs	r2, r2, r1
 8000564:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000568:	e738      	b.n	80003dc <__udivmoddi4+0xfc>
 800056a:	4631      	mov	r1, r6
 800056c:	4630      	mov	r0, r6
 800056e:	e708      	b.n	8000382 <__udivmoddi4+0xa2>
 8000570:	4639      	mov	r1, r7
 8000572:	e6e6      	b.n	8000342 <__udivmoddi4+0x62>
 8000574:	4610      	mov	r0, r2
 8000576:	e6fb      	b.n	8000370 <__udivmoddi4+0x90>
 8000578:	4548      	cmp	r0, r9
 800057a:	d2a9      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 800057c:	ebb9 0802 	subs.w	r8, r9, r2
 8000580:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000584:	3b01      	subs	r3, #1
 8000586:	e7a3      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000588:	4645      	mov	r5, r8
 800058a:	e7ea      	b.n	8000562 <__udivmoddi4+0x282>
 800058c:	462b      	mov	r3, r5
 800058e:	e794      	b.n	80004ba <__udivmoddi4+0x1da>
 8000590:	4640      	mov	r0, r8
 8000592:	e7d1      	b.n	8000538 <__udivmoddi4+0x258>
 8000594:	46d0      	mov	r8, sl
 8000596:	e77b      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000598:	3d02      	subs	r5, #2
 800059a:	4462      	add	r2, ip
 800059c:	e732      	b.n	8000404 <__udivmoddi4+0x124>
 800059e:	4608      	mov	r0, r1
 80005a0:	e70a      	b.n	80003b8 <__udivmoddi4+0xd8>
 80005a2:	4464      	add	r4, ip
 80005a4:	3802      	subs	r0, #2
 80005a6:	e742      	b.n	800042e <__udivmoddi4+0x14e>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <check_command>:
CommandMap commandMap[] = {
    {"LED1", "ON", &LED1_ON},
	{"LED1", "OFF", &LED1_OFF}
};

void check_command(char *str){
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b086      	sub	sp, #24
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]

    char *command = strtok(str, "_");
 80005b4:	4920      	ldr	r1, [pc, #128]	; (8000638 <check_command+0x8c>)
 80005b6:	6878      	ldr	r0, [r7, #4]
 80005b8:	f002 fc9a 	bl	8002ef0 <strtok>
 80005bc:	6138      	str	r0, [r7, #16]
    char *cond = strtok(NULL, "_");
 80005be:	491e      	ldr	r1, [pc, #120]	; (8000638 <check_command+0x8c>)
 80005c0:	2000      	movs	r0, #0
 80005c2:	f002 fc95 	bl	8002ef0 <strtok>
 80005c6:	60f8      	str	r0, [r7, #12]

    for ( int Commandidx = 0; Commandidx < (sizeof(commandMap)/sizeof(commandMap[0])); Commandidx++){
 80005c8:	2300      	movs	r3, #0
 80005ca:	617b      	str	r3, [r7, #20]
 80005cc:	e02c      	b.n	8000628 <check_command+0x7c>
    		if(strcmp(command,commandMap[Commandidx].command) == 0 && strcmp(cond,commandMap[Commandidx].cond) == 0){
 80005ce:	491b      	ldr	r1, [pc, #108]	; (800063c <check_command+0x90>)
 80005d0:	697a      	ldr	r2, [r7, #20]
 80005d2:	4613      	mov	r3, r2
 80005d4:	005b      	lsls	r3, r3, #1
 80005d6:	4413      	add	r3, r2
 80005d8:	009b      	lsls	r3, r3, #2
 80005da:	440b      	add	r3, r1
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	4619      	mov	r1, r3
 80005e0:	6938      	ldr	r0, [r7, #16]
 80005e2:	f7ff fdfd 	bl	80001e0 <strcmp>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d11a      	bne.n	8000622 <check_command+0x76>
 80005ec:	4913      	ldr	r1, [pc, #76]	; (800063c <check_command+0x90>)
 80005ee:	697a      	ldr	r2, [r7, #20]
 80005f0:	4613      	mov	r3, r2
 80005f2:	005b      	lsls	r3, r3, #1
 80005f4:	4413      	add	r3, r2
 80005f6:	009b      	lsls	r3, r3, #2
 80005f8:	440b      	add	r3, r1
 80005fa:	3304      	adds	r3, #4
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	4619      	mov	r1, r3
 8000600:	68f8      	ldr	r0, [r7, #12]
 8000602:	f7ff fded 	bl	80001e0 <strcmp>
 8000606:	4603      	mov	r3, r0
 8000608:	2b00      	cmp	r3, #0
 800060a:	d10a      	bne.n	8000622 <check_command+0x76>
    			commandMap[Commandidx].function();
 800060c:	490b      	ldr	r1, [pc, #44]	; (800063c <check_command+0x90>)
 800060e:	697a      	ldr	r2, [r7, #20]
 8000610:	4613      	mov	r3, r2
 8000612:	005b      	lsls	r3, r3, #1
 8000614:	4413      	add	r3, r2
 8000616:	009b      	lsls	r3, r3, #2
 8000618:	440b      	add	r3, r1
 800061a:	3308      	adds	r3, #8
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	4798      	blx	r3
    			            break;
 8000620:	e006      	b.n	8000630 <check_command+0x84>
    for ( int Commandidx = 0; Commandidx < (sizeof(commandMap)/sizeof(commandMap[0])); Commandidx++){
 8000622:	697b      	ldr	r3, [r7, #20]
 8000624:	3301      	adds	r3, #1
 8000626:	617b      	str	r3, [r7, #20]
 8000628:	697b      	ldr	r3, [r7, #20]
 800062a:	2b01      	cmp	r3, #1
 800062c:	d9cf      	bls.n	80005ce <check_command+0x22>
    		}
    }
}
 800062e:	bf00      	nop
 8000630:	bf00      	nop
 8000632:	3718      	adds	r7, #24
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}
 8000638:	08003d1c 	.word	0x08003d1c
 800063c:	20000000 	.word	0x20000000

08000640 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b08a      	sub	sp, #40	; 0x28
 8000644:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000646:	f107 0314 	add.w	r3, r7, #20
 800064a:	2200      	movs	r2, #0
 800064c:	601a      	str	r2, [r3, #0]
 800064e:	605a      	str	r2, [r3, #4]
 8000650:	609a      	str	r2, [r3, #8]
 8000652:	60da      	str	r2, [r3, #12]
 8000654:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000656:	2300      	movs	r3, #0
 8000658:	613b      	str	r3, [r7, #16]
 800065a:	4b2d      	ldr	r3, [pc, #180]	; (8000710 <MX_GPIO_Init+0xd0>)
 800065c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065e:	4a2c      	ldr	r2, [pc, #176]	; (8000710 <MX_GPIO_Init+0xd0>)
 8000660:	f043 0304 	orr.w	r3, r3, #4
 8000664:	6313      	str	r3, [r2, #48]	; 0x30
 8000666:	4b2a      	ldr	r3, [pc, #168]	; (8000710 <MX_GPIO_Init+0xd0>)
 8000668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066a:	f003 0304 	and.w	r3, r3, #4
 800066e:	613b      	str	r3, [r7, #16]
 8000670:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000672:	2300      	movs	r3, #0
 8000674:	60fb      	str	r3, [r7, #12]
 8000676:	4b26      	ldr	r3, [pc, #152]	; (8000710 <MX_GPIO_Init+0xd0>)
 8000678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067a:	4a25      	ldr	r2, [pc, #148]	; (8000710 <MX_GPIO_Init+0xd0>)
 800067c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000680:	6313      	str	r3, [r2, #48]	; 0x30
 8000682:	4b23      	ldr	r3, [pc, #140]	; (8000710 <MX_GPIO_Init+0xd0>)
 8000684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000686:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800068a:	60fb      	str	r3, [r7, #12]
 800068c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800068e:	2300      	movs	r3, #0
 8000690:	60bb      	str	r3, [r7, #8]
 8000692:	4b1f      	ldr	r3, [pc, #124]	; (8000710 <MX_GPIO_Init+0xd0>)
 8000694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000696:	4a1e      	ldr	r2, [pc, #120]	; (8000710 <MX_GPIO_Init+0xd0>)
 8000698:	f043 0301 	orr.w	r3, r3, #1
 800069c:	6313      	str	r3, [r2, #48]	; 0x30
 800069e:	4b1c      	ldr	r3, [pc, #112]	; (8000710 <MX_GPIO_Init+0xd0>)
 80006a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a2:	f003 0301 	and.w	r3, r3, #1
 80006a6:	60bb      	str	r3, [r7, #8]
 80006a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006aa:	2300      	movs	r3, #0
 80006ac:	607b      	str	r3, [r7, #4]
 80006ae:	4b18      	ldr	r3, [pc, #96]	; (8000710 <MX_GPIO_Init+0xd0>)
 80006b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b2:	4a17      	ldr	r2, [pc, #92]	; (8000710 <MX_GPIO_Init+0xd0>)
 80006b4:	f043 0302 	orr.w	r3, r3, #2
 80006b8:	6313      	str	r3, [r2, #48]	; 0x30
 80006ba:	4b15      	ldr	r3, [pc, #84]	; (8000710 <MX_GPIO_Init+0xd0>)
 80006bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006be:	f003 0302 	and.w	r3, r3, #2
 80006c2:	607b      	str	r3, [r7, #4]
 80006c4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80006c6:	2200      	movs	r2, #0
 80006c8:	2120      	movs	r1, #32
 80006ca:	4812      	ldr	r0, [pc, #72]	; (8000714 <MX_GPIO_Init+0xd4>)
 80006cc:	f000 fe78 	bl	80013c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80006d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80006d6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80006da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006dc:	2300      	movs	r3, #0
 80006de:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80006e0:	f107 0314 	add.w	r3, r7, #20
 80006e4:	4619      	mov	r1, r3
 80006e6:	480c      	ldr	r0, [pc, #48]	; (8000718 <MX_GPIO_Init+0xd8>)
 80006e8:	f000 fce6 	bl	80010b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80006ec:	2320      	movs	r3, #32
 80006ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006f0:	2301      	movs	r3, #1
 80006f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f4:	2300      	movs	r3, #0
 80006f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006f8:	2300      	movs	r3, #0
 80006fa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80006fc:	f107 0314 	add.w	r3, r7, #20
 8000700:	4619      	mov	r1, r3
 8000702:	4804      	ldr	r0, [pc, #16]	; (8000714 <MX_GPIO_Init+0xd4>)
 8000704:	f000 fcd8 	bl	80010b8 <HAL_GPIO_Init>

}
 8000708:	bf00      	nop
 800070a:	3728      	adds	r7, #40	; 0x28
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}
 8000710:	40023800 	.word	0x40023800
 8000714:	40020000 	.word	0x40020000
 8000718:	40020800 	.word	0x40020800

0800071c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000720:	f000 fab4 	bl	8000c8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000724:	f000 f80a 	bl	800073c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000728:	f7ff ff8a 	bl	8000640 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800072c:	f000 f9d6 	bl	8000adc <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8000730:	f000 f9aa 	bl	8000a88 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  Receive_Interrupt();
 8000734:	f002 fac4 	bl	8002cc0 <Receive_Interrupt>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000738:	e7fe      	b.n	8000738 <main+0x1c>
	...

0800073c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b094      	sub	sp, #80	; 0x50
 8000740:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000742:	f107 0320 	add.w	r3, r7, #32
 8000746:	2230      	movs	r2, #48	; 0x30
 8000748:	2100      	movs	r1, #0
 800074a:	4618      	mov	r0, r3
 800074c:	f002 fbc7 	bl	8002ede <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000750:	f107 030c 	add.w	r3, r7, #12
 8000754:	2200      	movs	r2, #0
 8000756:	601a      	str	r2, [r3, #0]
 8000758:	605a      	str	r2, [r3, #4]
 800075a:	609a      	str	r2, [r3, #8]
 800075c:	60da      	str	r2, [r3, #12]
 800075e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000760:	2300      	movs	r3, #0
 8000762:	60bb      	str	r3, [r7, #8]
 8000764:	4b29      	ldr	r3, [pc, #164]	; (800080c <SystemClock_Config+0xd0>)
 8000766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000768:	4a28      	ldr	r2, [pc, #160]	; (800080c <SystemClock_Config+0xd0>)
 800076a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800076e:	6413      	str	r3, [r2, #64]	; 0x40
 8000770:	4b26      	ldr	r3, [pc, #152]	; (800080c <SystemClock_Config+0xd0>)
 8000772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000774:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000778:	60bb      	str	r3, [r7, #8]
 800077a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800077c:	2300      	movs	r3, #0
 800077e:	607b      	str	r3, [r7, #4]
 8000780:	4b23      	ldr	r3, [pc, #140]	; (8000810 <SystemClock_Config+0xd4>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000788:	4a21      	ldr	r2, [pc, #132]	; (8000810 <SystemClock_Config+0xd4>)
 800078a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800078e:	6013      	str	r3, [r2, #0]
 8000790:	4b1f      	ldr	r3, [pc, #124]	; (8000810 <SystemClock_Config+0xd4>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000798:	607b      	str	r3, [r7, #4]
 800079a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800079c:	2302      	movs	r3, #2
 800079e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007a0:	2301      	movs	r3, #1
 80007a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007a4:	2310      	movs	r3, #16
 80007a6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007a8:	2302      	movs	r3, #2
 80007aa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007ac:	2300      	movs	r3, #0
 80007ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80007b0:	2310      	movs	r3, #16
 80007b2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80007b4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80007b8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80007ba:	2304      	movs	r3, #4
 80007bc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80007be:	2307      	movs	r3, #7
 80007c0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007c2:	f107 0320 	add.w	r3, r7, #32
 80007c6:	4618      	mov	r0, r3
 80007c8:	f000 fe14 	bl	80013f4 <HAL_RCC_OscConfig>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d001      	beq.n	80007d6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80007d2:	f000 f81f 	bl	8000814 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007d6:	230f      	movs	r3, #15
 80007d8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007da:	2302      	movs	r3, #2
 80007dc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007de:	2300      	movs	r3, #0
 80007e0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007e6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007e8:	2300      	movs	r3, #0
 80007ea:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007ec:	f107 030c 	add.w	r3, r7, #12
 80007f0:	2102      	movs	r1, #2
 80007f2:	4618      	mov	r0, r3
 80007f4:	f001 f876 	bl	80018e4 <HAL_RCC_ClockConfig>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80007fe:	f000 f809 	bl	8000814 <Error_Handler>
  }
}
 8000802:	bf00      	nop
 8000804:	3750      	adds	r7, #80	; 0x50
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	40023800 	.word	0x40023800
 8000810:	40007000 	.word	0x40007000

08000814 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000818:	b672      	cpsid	i
}
 800081a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800081c:	e7fe      	b.n	800081c <Error_Handler+0x8>
	...

08000820 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b082      	sub	sp, #8
 8000824:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000826:	2300      	movs	r3, #0
 8000828:	607b      	str	r3, [r7, #4]
 800082a:	4b10      	ldr	r3, [pc, #64]	; (800086c <HAL_MspInit+0x4c>)
 800082c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800082e:	4a0f      	ldr	r2, [pc, #60]	; (800086c <HAL_MspInit+0x4c>)
 8000830:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000834:	6453      	str	r3, [r2, #68]	; 0x44
 8000836:	4b0d      	ldr	r3, [pc, #52]	; (800086c <HAL_MspInit+0x4c>)
 8000838:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800083a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800083e:	607b      	str	r3, [r7, #4]
 8000840:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000842:	2300      	movs	r3, #0
 8000844:	603b      	str	r3, [r7, #0]
 8000846:	4b09      	ldr	r3, [pc, #36]	; (800086c <HAL_MspInit+0x4c>)
 8000848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800084a:	4a08      	ldr	r2, [pc, #32]	; (800086c <HAL_MspInit+0x4c>)
 800084c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000850:	6413      	str	r3, [r2, #64]	; 0x40
 8000852:	4b06      	ldr	r3, [pc, #24]	; (800086c <HAL_MspInit+0x4c>)
 8000854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000856:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800085a:	603b      	str	r3, [r7, #0]
 800085c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800085e:	2007      	movs	r0, #7
 8000860:	f000 fb56 	bl	8000f10 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000864:	bf00      	nop
 8000866:	3708      	adds	r7, #8
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	40023800 	.word	0x40023800

08000870 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000874:	e7fe      	b.n	8000874 <NMI_Handler+0x4>

08000876 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000876:	b480      	push	{r7}
 8000878:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800087a:	e7fe      	b.n	800087a <HardFault_Handler+0x4>

0800087c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000880:	e7fe      	b.n	8000880 <MemManage_Handler+0x4>

08000882 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000882:	b480      	push	{r7}
 8000884:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000886:	e7fe      	b.n	8000886 <BusFault_Handler+0x4>

08000888 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800088c:	e7fe      	b.n	800088c <UsageFault_Handler+0x4>

0800088e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800088e:	b480      	push	{r7}
 8000890:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000892:	bf00      	nop
 8000894:	46bd      	mov	sp, r7
 8000896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089a:	4770      	bx	lr

0800089c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008a0:	bf00      	nop
 80008a2:	46bd      	mov	sp, r7
 80008a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a8:	4770      	bx	lr

080008aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008aa:	b480      	push	{r7}
 80008ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008ae:	bf00      	nop
 80008b0:	46bd      	mov	sp, r7
 80008b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b6:	4770      	bx	lr

080008b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008bc:	f000 fa38 	bl	8000d30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008c0:	bf00      	nop
 80008c2:	bd80      	pop	{r7, pc}

080008c4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80008c8:	4802      	ldr	r0, [pc, #8]	; (80008d4 <USART1_IRQHandler+0x10>)
 80008ca:	f001 faa9 	bl	8001e20 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80008ce:	bf00      	nop
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	200000a0 	.word	0x200000a0

080008d8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0
  return 1;
 80008dc:	2301      	movs	r3, #1
}
 80008de:	4618      	mov	r0, r3
 80008e0:	46bd      	mov	sp, r7
 80008e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e6:	4770      	bx	lr

080008e8 <_kill>:

int _kill(int pid, int sig)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b082      	sub	sp, #8
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
 80008f0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80008f2:	f002 fb9f 	bl	8003034 <__errno>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2216      	movs	r2, #22
 80008fa:	601a      	str	r2, [r3, #0]
  return -1;
 80008fc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000900:	4618      	mov	r0, r3
 8000902:	3708      	adds	r7, #8
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}

08000908 <_exit>:

void _exit (int status)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b082      	sub	sp, #8
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000910:	f04f 31ff 	mov.w	r1, #4294967295
 8000914:	6878      	ldr	r0, [r7, #4]
 8000916:	f7ff ffe7 	bl	80008e8 <_kill>
  while (1) {}    /* Make sure we hang here */
 800091a:	e7fe      	b.n	800091a <_exit+0x12>

0800091c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b086      	sub	sp, #24
 8000920:	af00      	add	r7, sp, #0
 8000922:	60f8      	str	r0, [r7, #12]
 8000924:	60b9      	str	r1, [r7, #8]
 8000926:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000928:	2300      	movs	r3, #0
 800092a:	617b      	str	r3, [r7, #20]
 800092c:	e00a      	b.n	8000944 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800092e:	f3af 8000 	nop.w
 8000932:	4601      	mov	r1, r0
 8000934:	68bb      	ldr	r3, [r7, #8]
 8000936:	1c5a      	adds	r2, r3, #1
 8000938:	60ba      	str	r2, [r7, #8]
 800093a:	b2ca      	uxtb	r2, r1
 800093c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800093e:	697b      	ldr	r3, [r7, #20]
 8000940:	3301      	adds	r3, #1
 8000942:	617b      	str	r3, [r7, #20]
 8000944:	697a      	ldr	r2, [r7, #20]
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	429a      	cmp	r2, r3
 800094a:	dbf0      	blt.n	800092e <_read+0x12>
  }

  return len;
 800094c:	687b      	ldr	r3, [r7, #4]
}
 800094e:	4618      	mov	r0, r3
 8000950:	3718      	adds	r7, #24
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}

08000956 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000956:	b580      	push	{r7, lr}
 8000958:	b086      	sub	sp, #24
 800095a:	af00      	add	r7, sp, #0
 800095c:	60f8      	str	r0, [r7, #12]
 800095e:	60b9      	str	r1, [r7, #8]
 8000960:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000962:	2300      	movs	r3, #0
 8000964:	617b      	str	r3, [r7, #20]
 8000966:	e009      	b.n	800097c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000968:	68bb      	ldr	r3, [r7, #8]
 800096a:	1c5a      	adds	r2, r3, #1
 800096c:	60ba      	str	r2, [r7, #8]
 800096e:	781b      	ldrb	r3, [r3, #0]
 8000970:	4618      	mov	r0, r3
 8000972:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000976:	697b      	ldr	r3, [r7, #20]
 8000978:	3301      	adds	r3, #1
 800097a:	617b      	str	r3, [r7, #20]
 800097c:	697a      	ldr	r2, [r7, #20]
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	429a      	cmp	r2, r3
 8000982:	dbf1      	blt.n	8000968 <_write+0x12>
  }
  return len;
 8000984:	687b      	ldr	r3, [r7, #4]
}
 8000986:	4618      	mov	r0, r3
 8000988:	3718      	adds	r7, #24
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}

0800098e <_close>:

int _close(int file)
{
 800098e:	b480      	push	{r7}
 8000990:	b083      	sub	sp, #12
 8000992:	af00      	add	r7, sp, #0
 8000994:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000996:	f04f 33ff 	mov.w	r3, #4294967295
}
 800099a:	4618      	mov	r0, r3
 800099c:	370c      	adds	r7, #12
 800099e:	46bd      	mov	sp, r7
 80009a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a4:	4770      	bx	lr

080009a6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80009a6:	b480      	push	{r7}
 80009a8:	b083      	sub	sp, #12
 80009aa:	af00      	add	r7, sp, #0
 80009ac:	6078      	str	r0, [r7, #4]
 80009ae:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80009b0:	683b      	ldr	r3, [r7, #0]
 80009b2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80009b6:	605a      	str	r2, [r3, #4]
  return 0;
 80009b8:	2300      	movs	r3, #0
}
 80009ba:	4618      	mov	r0, r3
 80009bc:	370c      	adds	r7, #12
 80009be:	46bd      	mov	sp, r7
 80009c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c4:	4770      	bx	lr

080009c6 <_isatty>:

int _isatty(int file)
{
 80009c6:	b480      	push	{r7}
 80009c8:	b083      	sub	sp, #12
 80009ca:	af00      	add	r7, sp, #0
 80009cc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80009ce:	2301      	movs	r3, #1
}
 80009d0:	4618      	mov	r0, r3
 80009d2:	370c      	adds	r7, #12
 80009d4:	46bd      	mov	sp, r7
 80009d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009da:	4770      	bx	lr

080009dc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80009dc:	b480      	push	{r7}
 80009de:	b085      	sub	sp, #20
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	60f8      	str	r0, [r7, #12]
 80009e4:	60b9      	str	r1, [r7, #8]
 80009e6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80009e8:	2300      	movs	r3, #0
}
 80009ea:	4618      	mov	r0, r3
 80009ec:	3714      	adds	r7, #20
 80009ee:	46bd      	mov	sp, r7
 80009f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f4:	4770      	bx	lr
	...

080009f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b086      	sub	sp, #24
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a00:	4a14      	ldr	r2, [pc, #80]	; (8000a54 <_sbrk+0x5c>)
 8000a02:	4b15      	ldr	r3, [pc, #84]	; (8000a58 <_sbrk+0x60>)
 8000a04:	1ad3      	subs	r3, r2, r3
 8000a06:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a08:	697b      	ldr	r3, [r7, #20]
 8000a0a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a0c:	4b13      	ldr	r3, [pc, #76]	; (8000a5c <_sbrk+0x64>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d102      	bne.n	8000a1a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a14:	4b11      	ldr	r3, [pc, #68]	; (8000a5c <_sbrk+0x64>)
 8000a16:	4a12      	ldr	r2, [pc, #72]	; (8000a60 <_sbrk+0x68>)
 8000a18:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a1a:	4b10      	ldr	r3, [pc, #64]	; (8000a5c <_sbrk+0x64>)
 8000a1c:	681a      	ldr	r2, [r3, #0]
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	4413      	add	r3, r2
 8000a22:	693a      	ldr	r2, [r7, #16]
 8000a24:	429a      	cmp	r2, r3
 8000a26:	d207      	bcs.n	8000a38 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a28:	f002 fb04 	bl	8003034 <__errno>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	220c      	movs	r2, #12
 8000a30:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a32:	f04f 33ff 	mov.w	r3, #4294967295
 8000a36:	e009      	b.n	8000a4c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a38:	4b08      	ldr	r3, [pc, #32]	; (8000a5c <_sbrk+0x64>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a3e:	4b07      	ldr	r3, [pc, #28]	; (8000a5c <_sbrk+0x64>)
 8000a40:	681a      	ldr	r2, [r3, #0]
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	4413      	add	r3, r2
 8000a46:	4a05      	ldr	r2, [pc, #20]	; (8000a5c <_sbrk+0x64>)
 8000a48:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a4a:	68fb      	ldr	r3, [r7, #12]
}
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	3718      	adds	r7, #24
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	20018000 	.word	0x20018000
 8000a58:	00000400 	.word	0x00000400
 8000a5c:	2000009c 	.word	0x2000009c
 8000a60:	20000298 	.word	0x20000298

08000a64 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a68:	4b06      	ldr	r3, [pc, #24]	; (8000a84 <SystemInit+0x20>)
 8000a6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a6e:	4a05      	ldr	r2, [pc, #20]	; (8000a84 <SystemInit+0x20>)
 8000a70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a78:	bf00      	nop
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a80:	4770      	bx	lr
 8000a82:	bf00      	nop
 8000a84:	e000ed00 	.word	0xe000ed00

08000a88 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a8c:	4b11      	ldr	r3, [pc, #68]	; (8000ad4 <MX_USART1_UART_Init+0x4c>)
 8000a8e:	4a12      	ldr	r2, [pc, #72]	; (8000ad8 <MX_USART1_UART_Init+0x50>)
 8000a90:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000a92:	4b10      	ldr	r3, [pc, #64]	; (8000ad4 <MX_USART1_UART_Init+0x4c>)
 8000a94:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a98:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a9a:	4b0e      	ldr	r3, [pc, #56]	; (8000ad4 <MX_USART1_UART_Init+0x4c>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000aa0:	4b0c      	ldr	r3, [pc, #48]	; (8000ad4 <MX_USART1_UART_Init+0x4c>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000aa6:	4b0b      	ldr	r3, [pc, #44]	; (8000ad4 <MX_USART1_UART_Init+0x4c>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000aac:	4b09      	ldr	r3, [pc, #36]	; (8000ad4 <MX_USART1_UART_Init+0x4c>)
 8000aae:	220c      	movs	r2, #12
 8000ab0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ab2:	4b08      	ldr	r3, [pc, #32]	; (8000ad4 <MX_USART1_UART_Init+0x4c>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ab8:	4b06      	ldr	r3, [pc, #24]	; (8000ad4 <MX_USART1_UART_Init+0x4c>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000abe:	4805      	ldr	r0, [pc, #20]	; (8000ad4 <MX_USART1_UART_Init+0x4c>)
 8000ac0:	f001 f930 	bl	8001d24 <HAL_UART_Init>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d001      	beq.n	8000ace <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000aca:	f7ff fea3 	bl	8000814 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000ace:	bf00      	nop
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	200000a0 	.word	0x200000a0
 8000ad8:	40011000 	.word	0x40011000

08000adc <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ae0:	4b11      	ldr	r3, [pc, #68]	; (8000b28 <MX_USART2_UART_Init+0x4c>)
 8000ae2:	4a12      	ldr	r2, [pc, #72]	; (8000b2c <MX_USART2_UART_Init+0x50>)
 8000ae4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000ae6:	4b10      	ldr	r3, [pc, #64]	; (8000b28 <MX_USART2_UART_Init+0x4c>)
 8000ae8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000aec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000aee:	4b0e      	ldr	r3, [pc, #56]	; (8000b28 <MX_USART2_UART_Init+0x4c>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000af4:	4b0c      	ldr	r3, [pc, #48]	; (8000b28 <MX_USART2_UART_Init+0x4c>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000afa:	4b0b      	ldr	r3, [pc, #44]	; (8000b28 <MX_USART2_UART_Init+0x4c>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b00:	4b09      	ldr	r3, [pc, #36]	; (8000b28 <MX_USART2_UART_Init+0x4c>)
 8000b02:	220c      	movs	r2, #12
 8000b04:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b06:	4b08      	ldr	r3, [pc, #32]	; (8000b28 <MX_USART2_UART_Init+0x4c>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b0c:	4b06      	ldr	r3, [pc, #24]	; (8000b28 <MX_USART2_UART_Init+0x4c>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b12:	4805      	ldr	r0, [pc, #20]	; (8000b28 <MX_USART2_UART_Init+0x4c>)
 8000b14:	f001 f906 	bl	8001d24 <HAL_UART_Init>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d001      	beq.n	8000b22 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000b1e:	f7ff fe79 	bl	8000814 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b22:	bf00      	nop
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	200000e4 	.word	0x200000e4
 8000b2c:	40004400 	.word	0x40004400

08000b30 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b08c      	sub	sp, #48	; 0x30
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b38:	f107 031c 	add.w	r3, r7, #28
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	601a      	str	r2, [r3, #0]
 8000b40:	605a      	str	r2, [r3, #4]
 8000b42:	609a      	str	r2, [r3, #8]
 8000b44:	60da      	str	r2, [r3, #12]
 8000b46:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	4a36      	ldr	r2, [pc, #216]	; (8000c28 <HAL_UART_MspInit+0xf8>)
 8000b4e:	4293      	cmp	r3, r2
 8000b50:	d135      	bne.n	8000bbe <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b52:	2300      	movs	r3, #0
 8000b54:	61bb      	str	r3, [r7, #24]
 8000b56:	4b35      	ldr	r3, [pc, #212]	; (8000c2c <HAL_UART_MspInit+0xfc>)
 8000b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b5a:	4a34      	ldr	r2, [pc, #208]	; (8000c2c <HAL_UART_MspInit+0xfc>)
 8000b5c:	f043 0310 	orr.w	r3, r3, #16
 8000b60:	6453      	str	r3, [r2, #68]	; 0x44
 8000b62:	4b32      	ldr	r3, [pc, #200]	; (8000c2c <HAL_UART_MspInit+0xfc>)
 8000b64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b66:	f003 0310 	and.w	r3, r3, #16
 8000b6a:	61bb      	str	r3, [r7, #24]
 8000b6c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b6e:	2300      	movs	r3, #0
 8000b70:	617b      	str	r3, [r7, #20]
 8000b72:	4b2e      	ldr	r3, [pc, #184]	; (8000c2c <HAL_UART_MspInit+0xfc>)
 8000b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b76:	4a2d      	ldr	r2, [pc, #180]	; (8000c2c <HAL_UART_MspInit+0xfc>)
 8000b78:	f043 0301 	orr.w	r3, r3, #1
 8000b7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b7e:	4b2b      	ldr	r3, [pc, #172]	; (8000c2c <HAL_UART_MspInit+0xfc>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b82:	f003 0301 	and.w	r3, r3, #1
 8000b86:	617b      	str	r3, [r7, #20]
 8000b88:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000b8a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000b8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b90:	2302      	movs	r3, #2
 8000b92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b94:	2300      	movs	r3, #0
 8000b96:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b98:	2303      	movs	r3, #3
 8000b9a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000b9c:	2307      	movs	r3, #7
 8000b9e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ba0:	f107 031c 	add.w	r3, r7, #28
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	4822      	ldr	r0, [pc, #136]	; (8000c30 <HAL_UART_MspInit+0x100>)
 8000ba8:	f000 fa86 	bl	80010b8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000bac:	2200      	movs	r2, #0
 8000bae:	2100      	movs	r1, #0
 8000bb0:	2025      	movs	r0, #37	; 0x25
 8000bb2:	f000 f9b8 	bl	8000f26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000bb6:	2025      	movs	r0, #37	; 0x25
 8000bb8:	f000 f9d1 	bl	8000f5e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000bbc:	e030      	b.n	8000c20 <HAL_UART_MspInit+0xf0>
  else if(uartHandle->Instance==USART2)
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	4a1c      	ldr	r2, [pc, #112]	; (8000c34 <HAL_UART_MspInit+0x104>)
 8000bc4:	4293      	cmp	r3, r2
 8000bc6:	d12b      	bne.n	8000c20 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000bc8:	2300      	movs	r3, #0
 8000bca:	613b      	str	r3, [r7, #16]
 8000bcc:	4b17      	ldr	r3, [pc, #92]	; (8000c2c <HAL_UART_MspInit+0xfc>)
 8000bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bd0:	4a16      	ldr	r2, [pc, #88]	; (8000c2c <HAL_UART_MspInit+0xfc>)
 8000bd2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bd6:	6413      	str	r3, [r2, #64]	; 0x40
 8000bd8:	4b14      	ldr	r3, [pc, #80]	; (8000c2c <HAL_UART_MspInit+0xfc>)
 8000bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000be0:	613b      	str	r3, [r7, #16]
 8000be2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000be4:	2300      	movs	r3, #0
 8000be6:	60fb      	str	r3, [r7, #12]
 8000be8:	4b10      	ldr	r3, [pc, #64]	; (8000c2c <HAL_UART_MspInit+0xfc>)
 8000bea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bec:	4a0f      	ldr	r2, [pc, #60]	; (8000c2c <HAL_UART_MspInit+0xfc>)
 8000bee:	f043 0301 	orr.w	r3, r3, #1
 8000bf2:	6313      	str	r3, [r2, #48]	; 0x30
 8000bf4:	4b0d      	ldr	r3, [pc, #52]	; (8000c2c <HAL_UART_MspInit+0xfc>)
 8000bf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf8:	f003 0301 	and.w	r3, r3, #1
 8000bfc:	60fb      	str	r3, [r7, #12]
 8000bfe:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000c00:	230c      	movs	r3, #12
 8000c02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c04:	2302      	movs	r3, #2
 8000c06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c10:	2307      	movs	r3, #7
 8000c12:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c14:	f107 031c 	add.w	r3, r7, #28
 8000c18:	4619      	mov	r1, r3
 8000c1a:	4805      	ldr	r0, [pc, #20]	; (8000c30 <HAL_UART_MspInit+0x100>)
 8000c1c:	f000 fa4c 	bl	80010b8 <HAL_GPIO_Init>
}
 8000c20:	bf00      	nop
 8000c22:	3730      	adds	r7, #48	; 0x30
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	40011000 	.word	0x40011000
 8000c2c:	40023800 	.word	0x40023800
 8000c30:	40020000 	.word	0x40020000
 8000c34:	40004400 	.word	0x40004400

08000c38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c38:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c70 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c3c:	480d      	ldr	r0, [pc, #52]	; (8000c74 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c3e:	490e      	ldr	r1, [pc, #56]	; (8000c78 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c40:	4a0e      	ldr	r2, [pc, #56]	; (8000c7c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c44:	e002      	b.n	8000c4c <LoopCopyDataInit>

08000c46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c4a:	3304      	adds	r3, #4

08000c4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c50:	d3f9      	bcc.n	8000c46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c52:	4a0b      	ldr	r2, [pc, #44]	; (8000c80 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c54:	4c0b      	ldr	r4, [pc, #44]	; (8000c84 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c58:	e001      	b.n	8000c5e <LoopFillZerobss>

08000c5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c5c:	3204      	adds	r2, #4

08000c5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c60:	d3fb      	bcc.n	8000c5a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c62:	f7ff feff 	bl	8000a64 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c66:	f002 f9eb 	bl	8003040 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c6a:	f7ff fd57 	bl	800071c <main>
  bx  lr    
 8000c6e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c70:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000c74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c78:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8000c7c:	08003e28 	.word	0x08003e28
  ldr r2, =_sbss
 8000c80:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8000c84:	20000298 	.word	0x20000298

08000c88 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c88:	e7fe      	b.n	8000c88 <ADC_IRQHandler>
	...

08000c8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c90:	4b0e      	ldr	r3, [pc, #56]	; (8000ccc <HAL_Init+0x40>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	4a0d      	ldr	r2, [pc, #52]	; (8000ccc <HAL_Init+0x40>)
 8000c96:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c9a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c9c:	4b0b      	ldr	r3, [pc, #44]	; (8000ccc <HAL_Init+0x40>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	4a0a      	ldr	r2, [pc, #40]	; (8000ccc <HAL_Init+0x40>)
 8000ca2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ca6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ca8:	4b08      	ldr	r3, [pc, #32]	; (8000ccc <HAL_Init+0x40>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4a07      	ldr	r2, [pc, #28]	; (8000ccc <HAL_Init+0x40>)
 8000cae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cb2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cb4:	2003      	movs	r0, #3
 8000cb6:	f000 f92b 	bl	8000f10 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cba:	2000      	movs	r0, #0
 8000cbc:	f000 f808 	bl	8000cd0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cc0:	f7ff fdae 	bl	8000820 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cc4:	2300      	movs	r3, #0
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	40023c00 	.word	0x40023c00

08000cd0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b082      	sub	sp, #8
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cd8:	4b12      	ldr	r3, [pc, #72]	; (8000d24 <HAL_InitTick+0x54>)
 8000cda:	681a      	ldr	r2, [r3, #0]
 8000cdc:	4b12      	ldr	r3, [pc, #72]	; (8000d28 <HAL_InitTick+0x58>)
 8000cde:	781b      	ldrb	r3, [r3, #0]
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ce6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cea:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f000 f943 	bl	8000f7a <HAL_SYSTICK_Config>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d001      	beq.n	8000cfe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	e00e      	b.n	8000d1c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	2b0f      	cmp	r3, #15
 8000d02:	d80a      	bhi.n	8000d1a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d04:	2200      	movs	r2, #0
 8000d06:	6879      	ldr	r1, [r7, #4]
 8000d08:	f04f 30ff 	mov.w	r0, #4294967295
 8000d0c:	f000 f90b 	bl	8000f26 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d10:	4a06      	ldr	r2, [pc, #24]	; (8000d2c <HAL_InitTick+0x5c>)
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d16:	2300      	movs	r3, #0
 8000d18:	e000      	b.n	8000d1c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d1a:	2301      	movs	r3, #1
}
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	3708      	adds	r7, #8
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	20000018 	.word	0x20000018
 8000d28:	20000020 	.word	0x20000020
 8000d2c:	2000001c 	.word	0x2000001c

08000d30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d34:	4b06      	ldr	r3, [pc, #24]	; (8000d50 <HAL_IncTick+0x20>)
 8000d36:	781b      	ldrb	r3, [r3, #0]
 8000d38:	461a      	mov	r2, r3
 8000d3a:	4b06      	ldr	r3, [pc, #24]	; (8000d54 <HAL_IncTick+0x24>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	4413      	add	r3, r2
 8000d40:	4a04      	ldr	r2, [pc, #16]	; (8000d54 <HAL_IncTick+0x24>)
 8000d42:	6013      	str	r3, [r2, #0]
}
 8000d44:	bf00      	nop
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr
 8000d4e:	bf00      	nop
 8000d50:	20000020 	.word	0x20000020
 8000d54:	20000128 	.word	0x20000128

08000d58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d5c:	4b03      	ldr	r3, [pc, #12]	; (8000d6c <HAL_GetTick+0x14>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
}
 8000d60:	4618      	mov	r0, r3
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr
 8000d6a:	bf00      	nop
 8000d6c:	20000128 	.word	0x20000128

08000d70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b085      	sub	sp, #20
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	f003 0307 	and.w	r3, r3, #7
 8000d7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d80:	4b0c      	ldr	r3, [pc, #48]	; (8000db4 <__NVIC_SetPriorityGrouping+0x44>)
 8000d82:	68db      	ldr	r3, [r3, #12]
 8000d84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d86:	68ba      	ldr	r2, [r7, #8]
 8000d88:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d8c:	4013      	ands	r3, r2
 8000d8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d94:	68bb      	ldr	r3, [r7, #8]
 8000d96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d98:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000da0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000da2:	4a04      	ldr	r2, [pc, #16]	; (8000db4 <__NVIC_SetPriorityGrouping+0x44>)
 8000da4:	68bb      	ldr	r3, [r7, #8]
 8000da6:	60d3      	str	r3, [r2, #12]
}
 8000da8:	bf00      	nop
 8000daa:	3714      	adds	r7, #20
 8000dac:	46bd      	mov	sp, r7
 8000dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db2:	4770      	bx	lr
 8000db4:	e000ed00 	.word	0xe000ed00

08000db8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dbc:	4b04      	ldr	r3, [pc, #16]	; (8000dd0 <__NVIC_GetPriorityGrouping+0x18>)
 8000dbe:	68db      	ldr	r3, [r3, #12]
 8000dc0:	0a1b      	lsrs	r3, r3, #8
 8000dc2:	f003 0307 	and.w	r3, r3, #7
}
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dce:	4770      	bx	lr
 8000dd0:	e000ed00 	.word	0xe000ed00

08000dd4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b083      	sub	sp, #12
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	4603      	mov	r3, r0
 8000ddc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	db0b      	blt.n	8000dfe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000de6:	79fb      	ldrb	r3, [r7, #7]
 8000de8:	f003 021f 	and.w	r2, r3, #31
 8000dec:	4907      	ldr	r1, [pc, #28]	; (8000e0c <__NVIC_EnableIRQ+0x38>)
 8000dee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df2:	095b      	lsrs	r3, r3, #5
 8000df4:	2001      	movs	r0, #1
 8000df6:	fa00 f202 	lsl.w	r2, r0, r2
 8000dfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000dfe:	bf00      	nop
 8000e00:	370c      	adds	r7, #12
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop
 8000e0c:	e000e100 	.word	0xe000e100

08000e10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b083      	sub	sp, #12
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	4603      	mov	r3, r0
 8000e18:	6039      	str	r1, [r7, #0]
 8000e1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	db0a      	blt.n	8000e3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	b2da      	uxtb	r2, r3
 8000e28:	490c      	ldr	r1, [pc, #48]	; (8000e5c <__NVIC_SetPriority+0x4c>)
 8000e2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e2e:	0112      	lsls	r2, r2, #4
 8000e30:	b2d2      	uxtb	r2, r2
 8000e32:	440b      	add	r3, r1
 8000e34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e38:	e00a      	b.n	8000e50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	b2da      	uxtb	r2, r3
 8000e3e:	4908      	ldr	r1, [pc, #32]	; (8000e60 <__NVIC_SetPriority+0x50>)
 8000e40:	79fb      	ldrb	r3, [r7, #7]
 8000e42:	f003 030f 	and.w	r3, r3, #15
 8000e46:	3b04      	subs	r3, #4
 8000e48:	0112      	lsls	r2, r2, #4
 8000e4a:	b2d2      	uxtb	r2, r2
 8000e4c:	440b      	add	r3, r1
 8000e4e:	761a      	strb	r2, [r3, #24]
}
 8000e50:	bf00      	nop
 8000e52:	370c      	adds	r7, #12
 8000e54:	46bd      	mov	sp, r7
 8000e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5a:	4770      	bx	lr
 8000e5c:	e000e100 	.word	0xe000e100
 8000e60:	e000ed00 	.word	0xe000ed00

08000e64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b089      	sub	sp, #36	; 0x24
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	60f8      	str	r0, [r7, #12]
 8000e6c:	60b9      	str	r1, [r7, #8]
 8000e6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	f003 0307 	and.w	r3, r3, #7
 8000e76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e78:	69fb      	ldr	r3, [r7, #28]
 8000e7a:	f1c3 0307 	rsb	r3, r3, #7
 8000e7e:	2b04      	cmp	r3, #4
 8000e80:	bf28      	it	cs
 8000e82:	2304      	movcs	r3, #4
 8000e84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e86:	69fb      	ldr	r3, [r7, #28]
 8000e88:	3304      	adds	r3, #4
 8000e8a:	2b06      	cmp	r3, #6
 8000e8c:	d902      	bls.n	8000e94 <NVIC_EncodePriority+0x30>
 8000e8e:	69fb      	ldr	r3, [r7, #28]
 8000e90:	3b03      	subs	r3, #3
 8000e92:	e000      	b.n	8000e96 <NVIC_EncodePriority+0x32>
 8000e94:	2300      	movs	r3, #0
 8000e96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e98:	f04f 32ff 	mov.w	r2, #4294967295
 8000e9c:	69bb      	ldr	r3, [r7, #24]
 8000e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea2:	43da      	mvns	r2, r3
 8000ea4:	68bb      	ldr	r3, [r7, #8]
 8000ea6:	401a      	ands	r2, r3
 8000ea8:	697b      	ldr	r3, [r7, #20]
 8000eaa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000eac:	f04f 31ff 	mov.w	r1, #4294967295
 8000eb0:	697b      	ldr	r3, [r7, #20]
 8000eb2:	fa01 f303 	lsl.w	r3, r1, r3
 8000eb6:	43d9      	mvns	r1, r3
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ebc:	4313      	orrs	r3, r2
         );
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	3724      	adds	r7, #36	; 0x24
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr
	...

08000ecc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b082      	sub	sp, #8
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	3b01      	subs	r3, #1
 8000ed8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000edc:	d301      	bcc.n	8000ee2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ede:	2301      	movs	r3, #1
 8000ee0:	e00f      	b.n	8000f02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ee2:	4a0a      	ldr	r2, [pc, #40]	; (8000f0c <SysTick_Config+0x40>)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	3b01      	subs	r3, #1
 8000ee8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000eea:	210f      	movs	r1, #15
 8000eec:	f04f 30ff 	mov.w	r0, #4294967295
 8000ef0:	f7ff ff8e 	bl	8000e10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ef4:	4b05      	ldr	r3, [pc, #20]	; (8000f0c <SysTick_Config+0x40>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000efa:	4b04      	ldr	r3, [pc, #16]	; (8000f0c <SysTick_Config+0x40>)
 8000efc:	2207      	movs	r2, #7
 8000efe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f00:	2300      	movs	r3, #0
}
 8000f02:	4618      	mov	r0, r3
 8000f04:	3708      	adds	r7, #8
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	e000e010 	.word	0xe000e010

08000f10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b082      	sub	sp, #8
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f18:	6878      	ldr	r0, [r7, #4]
 8000f1a:	f7ff ff29 	bl	8000d70 <__NVIC_SetPriorityGrouping>
}
 8000f1e:	bf00      	nop
 8000f20:	3708      	adds	r7, #8
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}

08000f26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f26:	b580      	push	{r7, lr}
 8000f28:	b086      	sub	sp, #24
 8000f2a:	af00      	add	r7, sp, #0
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	60b9      	str	r1, [r7, #8]
 8000f30:	607a      	str	r2, [r7, #4]
 8000f32:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f34:	2300      	movs	r3, #0
 8000f36:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f38:	f7ff ff3e 	bl	8000db8 <__NVIC_GetPriorityGrouping>
 8000f3c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f3e:	687a      	ldr	r2, [r7, #4]
 8000f40:	68b9      	ldr	r1, [r7, #8]
 8000f42:	6978      	ldr	r0, [r7, #20]
 8000f44:	f7ff ff8e 	bl	8000e64 <NVIC_EncodePriority>
 8000f48:	4602      	mov	r2, r0
 8000f4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f4e:	4611      	mov	r1, r2
 8000f50:	4618      	mov	r0, r3
 8000f52:	f7ff ff5d 	bl	8000e10 <__NVIC_SetPriority>
}
 8000f56:	bf00      	nop
 8000f58:	3718      	adds	r7, #24
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}

08000f5e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f5e:	b580      	push	{r7, lr}
 8000f60:	b082      	sub	sp, #8
 8000f62:	af00      	add	r7, sp, #0
 8000f64:	4603      	mov	r3, r0
 8000f66:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f7ff ff31 	bl	8000dd4 <__NVIC_EnableIRQ>
}
 8000f72:	bf00      	nop
 8000f74:	3708      	adds	r7, #8
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}

08000f7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f7a:	b580      	push	{r7, lr}
 8000f7c:	b082      	sub	sp, #8
 8000f7e:	af00      	add	r7, sp, #0
 8000f80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f82:	6878      	ldr	r0, [r7, #4]
 8000f84:	f7ff ffa2 	bl	8000ecc <SysTick_Config>
 8000f88:	4603      	mov	r3, r0
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	3708      	adds	r7, #8
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}

08000f92 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000f92:	b580      	push	{r7, lr}
 8000f94:	b084      	sub	sp, #16
 8000f96:	af00      	add	r7, sp, #0
 8000f98:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f9e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000fa0:	f7ff feda 	bl	8000d58 <HAL_GetTick>
 8000fa4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000fac:	b2db      	uxtb	r3, r3
 8000fae:	2b02      	cmp	r3, #2
 8000fb0:	d008      	beq.n	8000fc4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	2280      	movs	r2, #128	; 0x80
 8000fb6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	2200      	movs	r2, #0
 8000fbc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	e052      	b.n	800106a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	681a      	ldr	r2, [r3, #0]
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	f022 0216 	bic.w	r2, r2, #22
 8000fd2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	695a      	ldr	r2, [r3, #20]
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000fe2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d103      	bne.n	8000ff4 <HAL_DMA_Abort+0x62>
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d007      	beq.n	8001004 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	681a      	ldr	r2, [r3, #0]
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	f022 0208 	bic.w	r2, r2, #8
 8001002:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	681a      	ldr	r2, [r3, #0]
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	f022 0201 	bic.w	r2, r2, #1
 8001012:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001014:	e013      	b.n	800103e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001016:	f7ff fe9f 	bl	8000d58 <HAL_GetTick>
 800101a:	4602      	mov	r2, r0
 800101c:	68bb      	ldr	r3, [r7, #8]
 800101e:	1ad3      	subs	r3, r2, r3
 8001020:	2b05      	cmp	r3, #5
 8001022:	d90c      	bls.n	800103e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	2220      	movs	r2, #32
 8001028:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	2203      	movs	r2, #3
 800102e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	2200      	movs	r2, #0
 8001036:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800103a:	2303      	movs	r3, #3
 800103c:	e015      	b.n	800106a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	f003 0301 	and.w	r3, r3, #1
 8001048:	2b00      	cmp	r3, #0
 800104a:	d1e4      	bne.n	8001016 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001050:	223f      	movs	r2, #63	; 0x3f
 8001052:	409a      	lsls	r2, r3
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	2201      	movs	r2, #1
 800105c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	2200      	movs	r2, #0
 8001064:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001068:	2300      	movs	r3, #0
}
 800106a:	4618      	mov	r0, r3
 800106c:	3710      	adds	r7, #16
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}

08001072 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001072:	b480      	push	{r7}
 8001074:	b083      	sub	sp, #12
 8001076:	af00      	add	r7, sp, #0
 8001078:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001080:	b2db      	uxtb	r3, r3
 8001082:	2b02      	cmp	r3, #2
 8001084:	d004      	beq.n	8001090 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	2280      	movs	r2, #128	; 0x80
 800108a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800108c:	2301      	movs	r3, #1
 800108e:	e00c      	b.n	80010aa <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	2205      	movs	r2, #5
 8001094:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	681a      	ldr	r2, [r3, #0]
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	f022 0201 	bic.w	r2, r2, #1
 80010a6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80010a8:	2300      	movs	r3, #0
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	370c      	adds	r7, #12
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr
	...

080010b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b089      	sub	sp, #36	; 0x24
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
 80010c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80010c2:	2300      	movs	r3, #0
 80010c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80010c6:	2300      	movs	r3, #0
 80010c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80010ca:	2300      	movs	r3, #0
 80010cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010ce:	2300      	movs	r3, #0
 80010d0:	61fb      	str	r3, [r7, #28]
 80010d2:	e159      	b.n	8001388 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80010d4:	2201      	movs	r2, #1
 80010d6:	69fb      	ldr	r3, [r7, #28]
 80010d8:	fa02 f303 	lsl.w	r3, r2, r3
 80010dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	697a      	ldr	r2, [r7, #20]
 80010e4:	4013      	ands	r3, r2
 80010e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80010e8:	693a      	ldr	r2, [r7, #16]
 80010ea:	697b      	ldr	r3, [r7, #20]
 80010ec:	429a      	cmp	r2, r3
 80010ee:	f040 8148 	bne.w	8001382 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	f003 0303 	and.w	r3, r3, #3
 80010fa:	2b01      	cmp	r3, #1
 80010fc:	d005      	beq.n	800110a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001106:	2b02      	cmp	r3, #2
 8001108:	d130      	bne.n	800116c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	689b      	ldr	r3, [r3, #8]
 800110e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001110:	69fb      	ldr	r3, [r7, #28]
 8001112:	005b      	lsls	r3, r3, #1
 8001114:	2203      	movs	r2, #3
 8001116:	fa02 f303 	lsl.w	r3, r2, r3
 800111a:	43db      	mvns	r3, r3
 800111c:	69ba      	ldr	r2, [r7, #24]
 800111e:	4013      	ands	r3, r2
 8001120:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	68da      	ldr	r2, [r3, #12]
 8001126:	69fb      	ldr	r3, [r7, #28]
 8001128:	005b      	lsls	r3, r3, #1
 800112a:	fa02 f303 	lsl.w	r3, r2, r3
 800112e:	69ba      	ldr	r2, [r7, #24]
 8001130:	4313      	orrs	r3, r2
 8001132:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	69ba      	ldr	r2, [r7, #24]
 8001138:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001140:	2201      	movs	r2, #1
 8001142:	69fb      	ldr	r3, [r7, #28]
 8001144:	fa02 f303 	lsl.w	r3, r2, r3
 8001148:	43db      	mvns	r3, r3
 800114a:	69ba      	ldr	r2, [r7, #24]
 800114c:	4013      	ands	r3, r2
 800114e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	091b      	lsrs	r3, r3, #4
 8001156:	f003 0201 	and.w	r2, r3, #1
 800115a:	69fb      	ldr	r3, [r7, #28]
 800115c:	fa02 f303 	lsl.w	r3, r2, r3
 8001160:	69ba      	ldr	r2, [r7, #24]
 8001162:	4313      	orrs	r3, r2
 8001164:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	69ba      	ldr	r2, [r7, #24]
 800116a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	f003 0303 	and.w	r3, r3, #3
 8001174:	2b03      	cmp	r3, #3
 8001176:	d017      	beq.n	80011a8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	68db      	ldr	r3, [r3, #12]
 800117c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800117e:	69fb      	ldr	r3, [r7, #28]
 8001180:	005b      	lsls	r3, r3, #1
 8001182:	2203      	movs	r2, #3
 8001184:	fa02 f303 	lsl.w	r3, r2, r3
 8001188:	43db      	mvns	r3, r3
 800118a:	69ba      	ldr	r2, [r7, #24]
 800118c:	4013      	ands	r3, r2
 800118e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	689a      	ldr	r2, [r3, #8]
 8001194:	69fb      	ldr	r3, [r7, #28]
 8001196:	005b      	lsls	r3, r3, #1
 8001198:	fa02 f303 	lsl.w	r3, r2, r3
 800119c:	69ba      	ldr	r2, [r7, #24]
 800119e:	4313      	orrs	r3, r2
 80011a0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	69ba      	ldr	r2, [r7, #24]
 80011a6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	f003 0303 	and.w	r3, r3, #3
 80011b0:	2b02      	cmp	r3, #2
 80011b2:	d123      	bne.n	80011fc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011b4:	69fb      	ldr	r3, [r7, #28]
 80011b6:	08da      	lsrs	r2, r3, #3
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	3208      	adds	r2, #8
 80011bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80011c2:	69fb      	ldr	r3, [r7, #28]
 80011c4:	f003 0307 	and.w	r3, r3, #7
 80011c8:	009b      	lsls	r3, r3, #2
 80011ca:	220f      	movs	r2, #15
 80011cc:	fa02 f303 	lsl.w	r3, r2, r3
 80011d0:	43db      	mvns	r3, r3
 80011d2:	69ba      	ldr	r2, [r7, #24]
 80011d4:	4013      	ands	r3, r2
 80011d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	691a      	ldr	r2, [r3, #16]
 80011dc:	69fb      	ldr	r3, [r7, #28]
 80011de:	f003 0307 	and.w	r3, r3, #7
 80011e2:	009b      	lsls	r3, r3, #2
 80011e4:	fa02 f303 	lsl.w	r3, r2, r3
 80011e8:	69ba      	ldr	r2, [r7, #24]
 80011ea:	4313      	orrs	r3, r2
 80011ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80011ee:	69fb      	ldr	r3, [r7, #28]
 80011f0:	08da      	lsrs	r2, r3, #3
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	3208      	adds	r2, #8
 80011f6:	69b9      	ldr	r1, [r7, #24]
 80011f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001202:	69fb      	ldr	r3, [r7, #28]
 8001204:	005b      	lsls	r3, r3, #1
 8001206:	2203      	movs	r2, #3
 8001208:	fa02 f303 	lsl.w	r3, r2, r3
 800120c:	43db      	mvns	r3, r3
 800120e:	69ba      	ldr	r2, [r7, #24]
 8001210:	4013      	ands	r3, r2
 8001212:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	f003 0203 	and.w	r2, r3, #3
 800121c:	69fb      	ldr	r3, [r7, #28]
 800121e:	005b      	lsls	r3, r3, #1
 8001220:	fa02 f303 	lsl.w	r3, r2, r3
 8001224:	69ba      	ldr	r2, [r7, #24]
 8001226:	4313      	orrs	r3, r2
 8001228:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	69ba      	ldr	r2, [r7, #24]
 800122e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001238:	2b00      	cmp	r3, #0
 800123a:	f000 80a2 	beq.w	8001382 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800123e:	2300      	movs	r3, #0
 8001240:	60fb      	str	r3, [r7, #12]
 8001242:	4b57      	ldr	r3, [pc, #348]	; (80013a0 <HAL_GPIO_Init+0x2e8>)
 8001244:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001246:	4a56      	ldr	r2, [pc, #344]	; (80013a0 <HAL_GPIO_Init+0x2e8>)
 8001248:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800124c:	6453      	str	r3, [r2, #68]	; 0x44
 800124e:	4b54      	ldr	r3, [pc, #336]	; (80013a0 <HAL_GPIO_Init+0x2e8>)
 8001250:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001252:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001256:	60fb      	str	r3, [r7, #12]
 8001258:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800125a:	4a52      	ldr	r2, [pc, #328]	; (80013a4 <HAL_GPIO_Init+0x2ec>)
 800125c:	69fb      	ldr	r3, [r7, #28]
 800125e:	089b      	lsrs	r3, r3, #2
 8001260:	3302      	adds	r3, #2
 8001262:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001266:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001268:	69fb      	ldr	r3, [r7, #28]
 800126a:	f003 0303 	and.w	r3, r3, #3
 800126e:	009b      	lsls	r3, r3, #2
 8001270:	220f      	movs	r2, #15
 8001272:	fa02 f303 	lsl.w	r3, r2, r3
 8001276:	43db      	mvns	r3, r3
 8001278:	69ba      	ldr	r2, [r7, #24]
 800127a:	4013      	ands	r3, r2
 800127c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	4a49      	ldr	r2, [pc, #292]	; (80013a8 <HAL_GPIO_Init+0x2f0>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d019      	beq.n	80012ba <HAL_GPIO_Init+0x202>
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	4a48      	ldr	r2, [pc, #288]	; (80013ac <HAL_GPIO_Init+0x2f4>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d013      	beq.n	80012b6 <HAL_GPIO_Init+0x1fe>
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	4a47      	ldr	r2, [pc, #284]	; (80013b0 <HAL_GPIO_Init+0x2f8>)
 8001292:	4293      	cmp	r3, r2
 8001294:	d00d      	beq.n	80012b2 <HAL_GPIO_Init+0x1fa>
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	4a46      	ldr	r2, [pc, #280]	; (80013b4 <HAL_GPIO_Init+0x2fc>)
 800129a:	4293      	cmp	r3, r2
 800129c:	d007      	beq.n	80012ae <HAL_GPIO_Init+0x1f6>
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	4a45      	ldr	r2, [pc, #276]	; (80013b8 <HAL_GPIO_Init+0x300>)
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d101      	bne.n	80012aa <HAL_GPIO_Init+0x1f2>
 80012a6:	2304      	movs	r3, #4
 80012a8:	e008      	b.n	80012bc <HAL_GPIO_Init+0x204>
 80012aa:	2307      	movs	r3, #7
 80012ac:	e006      	b.n	80012bc <HAL_GPIO_Init+0x204>
 80012ae:	2303      	movs	r3, #3
 80012b0:	e004      	b.n	80012bc <HAL_GPIO_Init+0x204>
 80012b2:	2302      	movs	r3, #2
 80012b4:	e002      	b.n	80012bc <HAL_GPIO_Init+0x204>
 80012b6:	2301      	movs	r3, #1
 80012b8:	e000      	b.n	80012bc <HAL_GPIO_Init+0x204>
 80012ba:	2300      	movs	r3, #0
 80012bc:	69fa      	ldr	r2, [r7, #28]
 80012be:	f002 0203 	and.w	r2, r2, #3
 80012c2:	0092      	lsls	r2, r2, #2
 80012c4:	4093      	lsls	r3, r2
 80012c6:	69ba      	ldr	r2, [r7, #24]
 80012c8:	4313      	orrs	r3, r2
 80012ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012cc:	4935      	ldr	r1, [pc, #212]	; (80013a4 <HAL_GPIO_Init+0x2ec>)
 80012ce:	69fb      	ldr	r3, [r7, #28]
 80012d0:	089b      	lsrs	r3, r3, #2
 80012d2:	3302      	adds	r3, #2
 80012d4:	69ba      	ldr	r2, [r7, #24]
 80012d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012da:	4b38      	ldr	r3, [pc, #224]	; (80013bc <HAL_GPIO_Init+0x304>)
 80012dc:	689b      	ldr	r3, [r3, #8]
 80012de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012e0:	693b      	ldr	r3, [r7, #16]
 80012e2:	43db      	mvns	r3, r3
 80012e4:	69ba      	ldr	r2, [r7, #24]
 80012e6:	4013      	ands	r3, r2
 80012e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d003      	beq.n	80012fe <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80012f6:	69ba      	ldr	r2, [r7, #24]
 80012f8:	693b      	ldr	r3, [r7, #16]
 80012fa:	4313      	orrs	r3, r2
 80012fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012fe:	4a2f      	ldr	r2, [pc, #188]	; (80013bc <HAL_GPIO_Init+0x304>)
 8001300:	69bb      	ldr	r3, [r7, #24]
 8001302:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001304:	4b2d      	ldr	r3, [pc, #180]	; (80013bc <HAL_GPIO_Init+0x304>)
 8001306:	68db      	ldr	r3, [r3, #12]
 8001308:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800130a:	693b      	ldr	r3, [r7, #16]
 800130c:	43db      	mvns	r3, r3
 800130e:	69ba      	ldr	r2, [r7, #24]
 8001310:	4013      	ands	r3, r2
 8001312:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800131c:	2b00      	cmp	r3, #0
 800131e:	d003      	beq.n	8001328 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001320:	69ba      	ldr	r2, [r7, #24]
 8001322:	693b      	ldr	r3, [r7, #16]
 8001324:	4313      	orrs	r3, r2
 8001326:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001328:	4a24      	ldr	r2, [pc, #144]	; (80013bc <HAL_GPIO_Init+0x304>)
 800132a:	69bb      	ldr	r3, [r7, #24]
 800132c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800132e:	4b23      	ldr	r3, [pc, #140]	; (80013bc <HAL_GPIO_Init+0x304>)
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001334:	693b      	ldr	r3, [r7, #16]
 8001336:	43db      	mvns	r3, r3
 8001338:	69ba      	ldr	r2, [r7, #24]
 800133a:	4013      	ands	r3, r2
 800133c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	685b      	ldr	r3, [r3, #4]
 8001342:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001346:	2b00      	cmp	r3, #0
 8001348:	d003      	beq.n	8001352 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800134a:	69ba      	ldr	r2, [r7, #24]
 800134c:	693b      	ldr	r3, [r7, #16]
 800134e:	4313      	orrs	r3, r2
 8001350:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001352:	4a1a      	ldr	r2, [pc, #104]	; (80013bc <HAL_GPIO_Init+0x304>)
 8001354:	69bb      	ldr	r3, [r7, #24]
 8001356:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001358:	4b18      	ldr	r3, [pc, #96]	; (80013bc <HAL_GPIO_Init+0x304>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800135e:	693b      	ldr	r3, [r7, #16]
 8001360:	43db      	mvns	r3, r3
 8001362:	69ba      	ldr	r2, [r7, #24]
 8001364:	4013      	ands	r3, r2
 8001366:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001370:	2b00      	cmp	r3, #0
 8001372:	d003      	beq.n	800137c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001374:	69ba      	ldr	r2, [r7, #24]
 8001376:	693b      	ldr	r3, [r7, #16]
 8001378:	4313      	orrs	r3, r2
 800137a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800137c:	4a0f      	ldr	r2, [pc, #60]	; (80013bc <HAL_GPIO_Init+0x304>)
 800137e:	69bb      	ldr	r3, [r7, #24]
 8001380:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001382:	69fb      	ldr	r3, [r7, #28]
 8001384:	3301      	adds	r3, #1
 8001386:	61fb      	str	r3, [r7, #28]
 8001388:	69fb      	ldr	r3, [r7, #28]
 800138a:	2b0f      	cmp	r3, #15
 800138c:	f67f aea2 	bls.w	80010d4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001390:	bf00      	nop
 8001392:	bf00      	nop
 8001394:	3724      	adds	r7, #36	; 0x24
 8001396:	46bd      	mov	sp, r7
 8001398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139c:	4770      	bx	lr
 800139e:	bf00      	nop
 80013a0:	40023800 	.word	0x40023800
 80013a4:	40013800 	.word	0x40013800
 80013a8:	40020000 	.word	0x40020000
 80013ac:	40020400 	.word	0x40020400
 80013b0:	40020800 	.word	0x40020800
 80013b4:	40020c00 	.word	0x40020c00
 80013b8:	40021000 	.word	0x40021000
 80013bc:	40013c00 	.word	0x40013c00

080013c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b083      	sub	sp, #12
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
 80013c8:	460b      	mov	r3, r1
 80013ca:	807b      	strh	r3, [r7, #2]
 80013cc:	4613      	mov	r3, r2
 80013ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013d0:	787b      	ldrb	r3, [r7, #1]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d003      	beq.n	80013de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013d6:	887a      	ldrh	r2, [r7, #2]
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80013dc:	e003      	b.n	80013e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80013de:	887b      	ldrh	r3, [r7, #2]
 80013e0:	041a      	lsls	r2, r3, #16
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	619a      	str	r2, [r3, #24]
}
 80013e6:	bf00      	nop
 80013e8:	370c      	adds	r7, #12
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr
	...

080013f4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b086      	sub	sp, #24
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d101      	bne.n	8001406 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001402:	2301      	movs	r3, #1
 8001404:	e267      	b.n	80018d6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f003 0301 	and.w	r3, r3, #1
 800140e:	2b00      	cmp	r3, #0
 8001410:	d075      	beq.n	80014fe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001412:	4b88      	ldr	r3, [pc, #544]	; (8001634 <HAL_RCC_OscConfig+0x240>)
 8001414:	689b      	ldr	r3, [r3, #8]
 8001416:	f003 030c 	and.w	r3, r3, #12
 800141a:	2b04      	cmp	r3, #4
 800141c:	d00c      	beq.n	8001438 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800141e:	4b85      	ldr	r3, [pc, #532]	; (8001634 <HAL_RCC_OscConfig+0x240>)
 8001420:	689b      	ldr	r3, [r3, #8]
 8001422:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001426:	2b08      	cmp	r3, #8
 8001428:	d112      	bne.n	8001450 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800142a:	4b82      	ldr	r3, [pc, #520]	; (8001634 <HAL_RCC_OscConfig+0x240>)
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001432:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001436:	d10b      	bne.n	8001450 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001438:	4b7e      	ldr	r3, [pc, #504]	; (8001634 <HAL_RCC_OscConfig+0x240>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001440:	2b00      	cmp	r3, #0
 8001442:	d05b      	beq.n	80014fc <HAL_RCC_OscConfig+0x108>
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	2b00      	cmp	r3, #0
 800144a:	d157      	bne.n	80014fc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800144c:	2301      	movs	r3, #1
 800144e:	e242      	b.n	80018d6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001458:	d106      	bne.n	8001468 <HAL_RCC_OscConfig+0x74>
 800145a:	4b76      	ldr	r3, [pc, #472]	; (8001634 <HAL_RCC_OscConfig+0x240>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4a75      	ldr	r2, [pc, #468]	; (8001634 <HAL_RCC_OscConfig+0x240>)
 8001460:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001464:	6013      	str	r3, [r2, #0]
 8001466:	e01d      	b.n	80014a4 <HAL_RCC_OscConfig+0xb0>
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001470:	d10c      	bne.n	800148c <HAL_RCC_OscConfig+0x98>
 8001472:	4b70      	ldr	r3, [pc, #448]	; (8001634 <HAL_RCC_OscConfig+0x240>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4a6f      	ldr	r2, [pc, #444]	; (8001634 <HAL_RCC_OscConfig+0x240>)
 8001478:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800147c:	6013      	str	r3, [r2, #0]
 800147e:	4b6d      	ldr	r3, [pc, #436]	; (8001634 <HAL_RCC_OscConfig+0x240>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4a6c      	ldr	r2, [pc, #432]	; (8001634 <HAL_RCC_OscConfig+0x240>)
 8001484:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001488:	6013      	str	r3, [r2, #0]
 800148a:	e00b      	b.n	80014a4 <HAL_RCC_OscConfig+0xb0>
 800148c:	4b69      	ldr	r3, [pc, #420]	; (8001634 <HAL_RCC_OscConfig+0x240>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4a68      	ldr	r2, [pc, #416]	; (8001634 <HAL_RCC_OscConfig+0x240>)
 8001492:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001496:	6013      	str	r3, [r2, #0]
 8001498:	4b66      	ldr	r3, [pc, #408]	; (8001634 <HAL_RCC_OscConfig+0x240>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a65      	ldr	r2, [pc, #404]	; (8001634 <HAL_RCC_OscConfig+0x240>)
 800149e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d013      	beq.n	80014d4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014ac:	f7ff fc54 	bl	8000d58 <HAL_GetTick>
 80014b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014b2:	e008      	b.n	80014c6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014b4:	f7ff fc50 	bl	8000d58 <HAL_GetTick>
 80014b8:	4602      	mov	r2, r0
 80014ba:	693b      	ldr	r3, [r7, #16]
 80014bc:	1ad3      	subs	r3, r2, r3
 80014be:	2b64      	cmp	r3, #100	; 0x64
 80014c0:	d901      	bls.n	80014c6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80014c2:	2303      	movs	r3, #3
 80014c4:	e207      	b.n	80018d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014c6:	4b5b      	ldr	r3, [pc, #364]	; (8001634 <HAL_RCC_OscConfig+0x240>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d0f0      	beq.n	80014b4 <HAL_RCC_OscConfig+0xc0>
 80014d2:	e014      	b.n	80014fe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014d4:	f7ff fc40 	bl	8000d58 <HAL_GetTick>
 80014d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014da:	e008      	b.n	80014ee <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014dc:	f7ff fc3c 	bl	8000d58 <HAL_GetTick>
 80014e0:	4602      	mov	r2, r0
 80014e2:	693b      	ldr	r3, [r7, #16]
 80014e4:	1ad3      	subs	r3, r2, r3
 80014e6:	2b64      	cmp	r3, #100	; 0x64
 80014e8:	d901      	bls.n	80014ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80014ea:	2303      	movs	r3, #3
 80014ec:	e1f3      	b.n	80018d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014ee:	4b51      	ldr	r3, [pc, #324]	; (8001634 <HAL_RCC_OscConfig+0x240>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d1f0      	bne.n	80014dc <HAL_RCC_OscConfig+0xe8>
 80014fa:	e000      	b.n	80014fe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f003 0302 	and.w	r3, r3, #2
 8001506:	2b00      	cmp	r3, #0
 8001508:	d063      	beq.n	80015d2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800150a:	4b4a      	ldr	r3, [pc, #296]	; (8001634 <HAL_RCC_OscConfig+0x240>)
 800150c:	689b      	ldr	r3, [r3, #8]
 800150e:	f003 030c 	and.w	r3, r3, #12
 8001512:	2b00      	cmp	r3, #0
 8001514:	d00b      	beq.n	800152e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001516:	4b47      	ldr	r3, [pc, #284]	; (8001634 <HAL_RCC_OscConfig+0x240>)
 8001518:	689b      	ldr	r3, [r3, #8]
 800151a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800151e:	2b08      	cmp	r3, #8
 8001520:	d11c      	bne.n	800155c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001522:	4b44      	ldr	r3, [pc, #272]	; (8001634 <HAL_RCC_OscConfig+0x240>)
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800152a:	2b00      	cmp	r3, #0
 800152c:	d116      	bne.n	800155c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800152e:	4b41      	ldr	r3, [pc, #260]	; (8001634 <HAL_RCC_OscConfig+0x240>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f003 0302 	and.w	r3, r3, #2
 8001536:	2b00      	cmp	r3, #0
 8001538:	d005      	beq.n	8001546 <HAL_RCC_OscConfig+0x152>
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	68db      	ldr	r3, [r3, #12]
 800153e:	2b01      	cmp	r3, #1
 8001540:	d001      	beq.n	8001546 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001542:	2301      	movs	r3, #1
 8001544:	e1c7      	b.n	80018d6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001546:	4b3b      	ldr	r3, [pc, #236]	; (8001634 <HAL_RCC_OscConfig+0x240>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	691b      	ldr	r3, [r3, #16]
 8001552:	00db      	lsls	r3, r3, #3
 8001554:	4937      	ldr	r1, [pc, #220]	; (8001634 <HAL_RCC_OscConfig+0x240>)
 8001556:	4313      	orrs	r3, r2
 8001558:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800155a:	e03a      	b.n	80015d2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	68db      	ldr	r3, [r3, #12]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d020      	beq.n	80015a6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001564:	4b34      	ldr	r3, [pc, #208]	; (8001638 <HAL_RCC_OscConfig+0x244>)
 8001566:	2201      	movs	r2, #1
 8001568:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800156a:	f7ff fbf5 	bl	8000d58 <HAL_GetTick>
 800156e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001570:	e008      	b.n	8001584 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001572:	f7ff fbf1 	bl	8000d58 <HAL_GetTick>
 8001576:	4602      	mov	r2, r0
 8001578:	693b      	ldr	r3, [r7, #16]
 800157a:	1ad3      	subs	r3, r2, r3
 800157c:	2b02      	cmp	r3, #2
 800157e:	d901      	bls.n	8001584 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001580:	2303      	movs	r3, #3
 8001582:	e1a8      	b.n	80018d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001584:	4b2b      	ldr	r3, [pc, #172]	; (8001634 <HAL_RCC_OscConfig+0x240>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f003 0302 	and.w	r3, r3, #2
 800158c:	2b00      	cmp	r3, #0
 800158e:	d0f0      	beq.n	8001572 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001590:	4b28      	ldr	r3, [pc, #160]	; (8001634 <HAL_RCC_OscConfig+0x240>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	691b      	ldr	r3, [r3, #16]
 800159c:	00db      	lsls	r3, r3, #3
 800159e:	4925      	ldr	r1, [pc, #148]	; (8001634 <HAL_RCC_OscConfig+0x240>)
 80015a0:	4313      	orrs	r3, r2
 80015a2:	600b      	str	r3, [r1, #0]
 80015a4:	e015      	b.n	80015d2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015a6:	4b24      	ldr	r3, [pc, #144]	; (8001638 <HAL_RCC_OscConfig+0x244>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015ac:	f7ff fbd4 	bl	8000d58 <HAL_GetTick>
 80015b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015b2:	e008      	b.n	80015c6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015b4:	f7ff fbd0 	bl	8000d58 <HAL_GetTick>
 80015b8:	4602      	mov	r2, r0
 80015ba:	693b      	ldr	r3, [r7, #16]
 80015bc:	1ad3      	subs	r3, r2, r3
 80015be:	2b02      	cmp	r3, #2
 80015c0:	d901      	bls.n	80015c6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80015c2:	2303      	movs	r3, #3
 80015c4:	e187      	b.n	80018d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015c6:	4b1b      	ldr	r3, [pc, #108]	; (8001634 <HAL_RCC_OscConfig+0x240>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f003 0302 	and.w	r3, r3, #2
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d1f0      	bne.n	80015b4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f003 0308 	and.w	r3, r3, #8
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d036      	beq.n	800164c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	695b      	ldr	r3, [r3, #20]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d016      	beq.n	8001614 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015e6:	4b15      	ldr	r3, [pc, #84]	; (800163c <HAL_RCC_OscConfig+0x248>)
 80015e8:	2201      	movs	r2, #1
 80015ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015ec:	f7ff fbb4 	bl	8000d58 <HAL_GetTick>
 80015f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015f2:	e008      	b.n	8001606 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015f4:	f7ff fbb0 	bl	8000d58 <HAL_GetTick>
 80015f8:	4602      	mov	r2, r0
 80015fa:	693b      	ldr	r3, [r7, #16]
 80015fc:	1ad3      	subs	r3, r2, r3
 80015fe:	2b02      	cmp	r3, #2
 8001600:	d901      	bls.n	8001606 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001602:	2303      	movs	r3, #3
 8001604:	e167      	b.n	80018d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001606:	4b0b      	ldr	r3, [pc, #44]	; (8001634 <HAL_RCC_OscConfig+0x240>)
 8001608:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800160a:	f003 0302 	and.w	r3, r3, #2
 800160e:	2b00      	cmp	r3, #0
 8001610:	d0f0      	beq.n	80015f4 <HAL_RCC_OscConfig+0x200>
 8001612:	e01b      	b.n	800164c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001614:	4b09      	ldr	r3, [pc, #36]	; (800163c <HAL_RCC_OscConfig+0x248>)
 8001616:	2200      	movs	r2, #0
 8001618:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800161a:	f7ff fb9d 	bl	8000d58 <HAL_GetTick>
 800161e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001620:	e00e      	b.n	8001640 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001622:	f7ff fb99 	bl	8000d58 <HAL_GetTick>
 8001626:	4602      	mov	r2, r0
 8001628:	693b      	ldr	r3, [r7, #16]
 800162a:	1ad3      	subs	r3, r2, r3
 800162c:	2b02      	cmp	r3, #2
 800162e:	d907      	bls.n	8001640 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001630:	2303      	movs	r3, #3
 8001632:	e150      	b.n	80018d6 <HAL_RCC_OscConfig+0x4e2>
 8001634:	40023800 	.word	0x40023800
 8001638:	42470000 	.word	0x42470000
 800163c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001640:	4b88      	ldr	r3, [pc, #544]	; (8001864 <HAL_RCC_OscConfig+0x470>)
 8001642:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001644:	f003 0302 	and.w	r3, r3, #2
 8001648:	2b00      	cmp	r3, #0
 800164a:	d1ea      	bne.n	8001622 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f003 0304 	and.w	r3, r3, #4
 8001654:	2b00      	cmp	r3, #0
 8001656:	f000 8097 	beq.w	8001788 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800165a:	2300      	movs	r3, #0
 800165c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800165e:	4b81      	ldr	r3, [pc, #516]	; (8001864 <HAL_RCC_OscConfig+0x470>)
 8001660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001662:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001666:	2b00      	cmp	r3, #0
 8001668:	d10f      	bne.n	800168a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800166a:	2300      	movs	r3, #0
 800166c:	60bb      	str	r3, [r7, #8]
 800166e:	4b7d      	ldr	r3, [pc, #500]	; (8001864 <HAL_RCC_OscConfig+0x470>)
 8001670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001672:	4a7c      	ldr	r2, [pc, #496]	; (8001864 <HAL_RCC_OscConfig+0x470>)
 8001674:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001678:	6413      	str	r3, [r2, #64]	; 0x40
 800167a:	4b7a      	ldr	r3, [pc, #488]	; (8001864 <HAL_RCC_OscConfig+0x470>)
 800167c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800167e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001682:	60bb      	str	r3, [r7, #8]
 8001684:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001686:	2301      	movs	r3, #1
 8001688:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800168a:	4b77      	ldr	r3, [pc, #476]	; (8001868 <HAL_RCC_OscConfig+0x474>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001692:	2b00      	cmp	r3, #0
 8001694:	d118      	bne.n	80016c8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001696:	4b74      	ldr	r3, [pc, #464]	; (8001868 <HAL_RCC_OscConfig+0x474>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	4a73      	ldr	r2, [pc, #460]	; (8001868 <HAL_RCC_OscConfig+0x474>)
 800169c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016a2:	f7ff fb59 	bl	8000d58 <HAL_GetTick>
 80016a6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016a8:	e008      	b.n	80016bc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016aa:	f7ff fb55 	bl	8000d58 <HAL_GetTick>
 80016ae:	4602      	mov	r2, r0
 80016b0:	693b      	ldr	r3, [r7, #16]
 80016b2:	1ad3      	subs	r3, r2, r3
 80016b4:	2b02      	cmp	r3, #2
 80016b6:	d901      	bls.n	80016bc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80016b8:	2303      	movs	r3, #3
 80016ba:	e10c      	b.n	80018d6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016bc:	4b6a      	ldr	r3, [pc, #424]	; (8001868 <HAL_RCC_OscConfig+0x474>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d0f0      	beq.n	80016aa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	689b      	ldr	r3, [r3, #8]
 80016cc:	2b01      	cmp	r3, #1
 80016ce:	d106      	bne.n	80016de <HAL_RCC_OscConfig+0x2ea>
 80016d0:	4b64      	ldr	r3, [pc, #400]	; (8001864 <HAL_RCC_OscConfig+0x470>)
 80016d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016d4:	4a63      	ldr	r2, [pc, #396]	; (8001864 <HAL_RCC_OscConfig+0x470>)
 80016d6:	f043 0301 	orr.w	r3, r3, #1
 80016da:	6713      	str	r3, [r2, #112]	; 0x70
 80016dc:	e01c      	b.n	8001718 <HAL_RCC_OscConfig+0x324>
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	689b      	ldr	r3, [r3, #8]
 80016e2:	2b05      	cmp	r3, #5
 80016e4:	d10c      	bne.n	8001700 <HAL_RCC_OscConfig+0x30c>
 80016e6:	4b5f      	ldr	r3, [pc, #380]	; (8001864 <HAL_RCC_OscConfig+0x470>)
 80016e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016ea:	4a5e      	ldr	r2, [pc, #376]	; (8001864 <HAL_RCC_OscConfig+0x470>)
 80016ec:	f043 0304 	orr.w	r3, r3, #4
 80016f0:	6713      	str	r3, [r2, #112]	; 0x70
 80016f2:	4b5c      	ldr	r3, [pc, #368]	; (8001864 <HAL_RCC_OscConfig+0x470>)
 80016f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016f6:	4a5b      	ldr	r2, [pc, #364]	; (8001864 <HAL_RCC_OscConfig+0x470>)
 80016f8:	f043 0301 	orr.w	r3, r3, #1
 80016fc:	6713      	str	r3, [r2, #112]	; 0x70
 80016fe:	e00b      	b.n	8001718 <HAL_RCC_OscConfig+0x324>
 8001700:	4b58      	ldr	r3, [pc, #352]	; (8001864 <HAL_RCC_OscConfig+0x470>)
 8001702:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001704:	4a57      	ldr	r2, [pc, #348]	; (8001864 <HAL_RCC_OscConfig+0x470>)
 8001706:	f023 0301 	bic.w	r3, r3, #1
 800170a:	6713      	str	r3, [r2, #112]	; 0x70
 800170c:	4b55      	ldr	r3, [pc, #340]	; (8001864 <HAL_RCC_OscConfig+0x470>)
 800170e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001710:	4a54      	ldr	r2, [pc, #336]	; (8001864 <HAL_RCC_OscConfig+0x470>)
 8001712:	f023 0304 	bic.w	r3, r3, #4
 8001716:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	689b      	ldr	r3, [r3, #8]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d015      	beq.n	800174c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001720:	f7ff fb1a 	bl	8000d58 <HAL_GetTick>
 8001724:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001726:	e00a      	b.n	800173e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001728:	f7ff fb16 	bl	8000d58 <HAL_GetTick>
 800172c:	4602      	mov	r2, r0
 800172e:	693b      	ldr	r3, [r7, #16]
 8001730:	1ad3      	subs	r3, r2, r3
 8001732:	f241 3288 	movw	r2, #5000	; 0x1388
 8001736:	4293      	cmp	r3, r2
 8001738:	d901      	bls.n	800173e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800173a:	2303      	movs	r3, #3
 800173c:	e0cb      	b.n	80018d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800173e:	4b49      	ldr	r3, [pc, #292]	; (8001864 <HAL_RCC_OscConfig+0x470>)
 8001740:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001742:	f003 0302 	and.w	r3, r3, #2
 8001746:	2b00      	cmp	r3, #0
 8001748:	d0ee      	beq.n	8001728 <HAL_RCC_OscConfig+0x334>
 800174a:	e014      	b.n	8001776 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800174c:	f7ff fb04 	bl	8000d58 <HAL_GetTick>
 8001750:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001752:	e00a      	b.n	800176a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001754:	f7ff fb00 	bl	8000d58 <HAL_GetTick>
 8001758:	4602      	mov	r2, r0
 800175a:	693b      	ldr	r3, [r7, #16]
 800175c:	1ad3      	subs	r3, r2, r3
 800175e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001762:	4293      	cmp	r3, r2
 8001764:	d901      	bls.n	800176a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001766:	2303      	movs	r3, #3
 8001768:	e0b5      	b.n	80018d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800176a:	4b3e      	ldr	r3, [pc, #248]	; (8001864 <HAL_RCC_OscConfig+0x470>)
 800176c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800176e:	f003 0302 	and.w	r3, r3, #2
 8001772:	2b00      	cmp	r3, #0
 8001774:	d1ee      	bne.n	8001754 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001776:	7dfb      	ldrb	r3, [r7, #23]
 8001778:	2b01      	cmp	r3, #1
 800177a:	d105      	bne.n	8001788 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800177c:	4b39      	ldr	r3, [pc, #228]	; (8001864 <HAL_RCC_OscConfig+0x470>)
 800177e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001780:	4a38      	ldr	r2, [pc, #224]	; (8001864 <HAL_RCC_OscConfig+0x470>)
 8001782:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001786:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	699b      	ldr	r3, [r3, #24]
 800178c:	2b00      	cmp	r3, #0
 800178e:	f000 80a1 	beq.w	80018d4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001792:	4b34      	ldr	r3, [pc, #208]	; (8001864 <HAL_RCC_OscConfig+0x470>)
 8001794:	689b      	ldr	r3, [r3, #8]
 8001796:	f003 030c 	and.w	r3, r3, #12
 800179a:	2b08      	cmp	r3, #8
 800179c:	d05c      	beq.n	8001858 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	699b      	ldr	r3, [r3, #24]
 80017a2:	2b02      	cmp	r3, #2
 80017a4:	d141      	bne.n	800182a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017a6:	4b31      	ldr	r3, [pc, #196]	; (800186c <HAL_RCC_OscConfig+0x478>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017ac:	f7ff fad4 	bl	8000d58 <HAL_GetTick>
 80017b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017b2:	e008      	b.n	80017c6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017b4:	f7ff fad0 	bl	8000d58 <HAL_GetTick>
 80017b8:	4602      	mov	r2, r0
 80017ba:	693b      	ldr	r3, [r7, #16]
 80017bc:	1ad3      	subs	r3, r2, r3
 80017be:	2b02      	cmp	r3, #2
 80017c0:	d901      	bls.n	80017c6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80017c2:	2303      	movs	r3, #3
 80017c4:	e087      	b.n	80018d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017c6:	4b27      	ldr	r3, [pc, #156]	; (8001864 <HAL_RCC_OscConfig+0x470>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d1f0      	bne.n	80017b4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	69da      	ldr	r2, [r3, #28]
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6a1b      	ldr	r3, [r3, #32]
 80017da:	431a      	orrs	r2, r3
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017e0:	019b      	lsls	r3, r3, #6
 80017e2:	431a      	orrs	r2, r3
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017e8:	085b      	lsrs	r3, r3, #1
 80017ea:	3b01      	subs	r3, #1
 80017ec:	041b      	lsls	r3, r3, #16
 80017ee:	431a      	orrs	r2, r3
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017f4:	061b      	lsls	r3, r3, #24
 80017f6:	491b      	ldr	r1, [pc, #108]	; (8001864 <HAL_RCC_OscConfig+0x470>)
 80017f8:	4313      	orrs	r3, r2
 80017fa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017fc:	4b1b      	ldr	r3, [pc, #108]	; (800186c <HAL_RCC_OscConfig+0x478>)
 80017fe:	2201      	movs	r2, #1
 8001800:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001802:	f7ff faa9 	bl	8000d58 <HAL_GetTick>
 8001806:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001808:	e008      	b.n	800181c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800180a:	f7ff faa5 	bl	8000d58 <HAL_GetTick>
 800180e:	4602      	mov	r2, r0
 8001810:	693b      	ldr	r3, [r7, #16]
 8001812:	1ad3      	subs	r3, r2, r3
 8001814:	2b02      	cmp	r3, #2
 8001816:	d901      	bls.n	800181c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001818:	2303      	movs	r3, #3
 800181a:	e05c      	b.n	80018d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800181c:	4b11      	ldr	r3, [pc, #68]	; (8001864 <HAL_RCC_OscConfig+0x470>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001824:	2b00      	cmp	r3, #0
 8001826:	d0f0      	beq.n	800180a <HAL_RCC_OscConfig+0x416>
 8001828:	e054      	b.n	80018d4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800182a:	4b10      	ldr	r3, [pc, #64]	; (800186c <HAL_RCC_OscConfig+0x478>)
 800182c:	2200      	movs	r2, #0
 800182e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001830:	f7ff fa92 	bl	8000d58 <HAL_GetTick>
 8001834:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001836:	e008      	b.n	800184a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001838:	f7ff fa8e 	bl	8000d58 <HAL_GetTick>
 800183c:	4602      	mov	r2, r0
 800183e:	693b      	ldr	r3, [r7, #16]
 8001840:	1ad3      	subs	r3, r2, r3
 8001842:	2b02      	cmp	r3, #2
 8001844:	d901      	bls.n	800184a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001846:	2303      	movs	r3, #3
 8001848:	e045      	b.n	80018d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800184a:	4b06      	ldr	r3, [pc, #24]	; (8001864 <HAL_RCC_OscConfig+0x470>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001852:	2b00      	cmp	r3, #0
 8001854:	d1f0      	bne.n	8001838 <HAL_RCC_OscConfig+0x444>
 8001856:	e03d      	b.n	80018d4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	699b      	ldr	r3, [r3, #24]
 800185c:	2b01      	cmp	r3, #1
 800185e:	d107      	bne.n	8001870 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001860:	2301      	movs	r3, #1
 8001862:	e038      	b.n	80018d6 <HAL_RCC_OscConfig+0x4e2>
 8001864:	40023800 	.word	0x40023800
 8001868:	40007000 	.word	0x40007000
 800186c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001870:	4b1b      	ldr	r3, [pc, #108]	; (80018e0 <HAL_RCC_OscConfig+0x4ec>)
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	699b      	ldr	r3, [r3, #24]
 800187a:	2b01      	cmp	r3, #1
 800187c:	d028      	beq.n	80018d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001888:	429a      	cmp	r2, r3
 800188a:	d121      	bne.n	80018d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001896:	429a      	cmp	r2, r3
 8001898:	d11a      	bne.n	80018d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800189a:	68fa      	ldr	r2, [r7, #12]
 800189c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80018a0:	4013      	ands	r3, r2
 80018a2:	687a      	ldr	r2, [r7, #4]
 80018a4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80018a6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80018a8:	4293      	cmp	r3, r2
 80018aa:	d111      	bne.n	80018d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018b6:	085b      	lsrs	r3, r3, #1
 80018b8:	3b01      	subs	r3, #1
 80018ba:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80018bc:	429a      	cmp	r2, r3
 80018be:	d107      	bne.n	80018d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018ca:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80018cc:	429a      	cmp	r2, r3
 80018ce:	d001      	beq.n	80018d4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80018d0:	2301      	movs	r3, #1
 80018d2:	e000      	b.n	80018d6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80018d4:	2300      	movs	r3, #0
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	3718      	adds	r7, #24
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	40023800 	.word	0x40023800

080018e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b084      	sub	sp, #16
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
 80018ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d101      	bne.n	80018f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018f4:	2301      	movs	r3, #1
 80018f6:	e0cc      	b.n	8001a92 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80018f8:	4b68      	ldr	r3, [pc, #416]	; (8001a9c <HAL_RCC_ClockConfig+0x1b8>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f003 0307 	and.w	r3, r3, #7
 8001900:	683a      	ldr	r2, [r7, #0]
 8001902:	429a      	cmp	r2, r3
 8001904:	d90c      	bls.n	8001920 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001906:	4b65      	ldr	r3, [pc, #404]	; (8001a9c <HAL_RCC_ClockConfig+0x1b8>)
 8001908:	683a      	ldr	r2, [r7, #0]
 800190a:	b2d2      	uxtb	r2, r2
 800190c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800190e:	4b63      	ldr	r3, [pc, #396]	; (8001a9c <HAL_RCC_ClockConfig+0x1b8>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f003 0307 	and.w	r3, r3, #7
 8001916:	683a      	ldr	r2, [r7, #0]
 8001918:	429a      	cmp	r2, r3
 800191a:	d001      	beq.n	8001920 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800191c:	2301      	movs	r3, #1
 800191e:	e0b8      	b.n	8001a92 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f003 0302 	and.w	r3, r3, #2
 8001928:	2b00      	cmp	r3, #0
 800192a:	d020      	beq.n	800196e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f003 0304 	and.w	r3, r3, #4
 8001934:	2b00      	cmp	r3, #0
 8001936:	d005      	beq.n	8001944 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001938:	4b59      	ldr	r3, [pc, #356]	; (8001aa0 <HAL_RCC_ClockConfig+0x1bc>)
 800193a:	689b      	ldr	r3, [r3, #8]
 800193c:	4a58      	ldr	r2, [pc, #352]	; (8001aa0 <HAL_RCC_ClockConfig+0x1bc>)
 800193e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001942:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f003 0308 	and.w	r3, r3, #8
 800194c:	2b00      	cmp	r3, #0
 800194e:	d005      	beq.n	800195c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001950:	4b53      	ldr	r3, [pc, #332]	; (8001aa0 <HAL_RCC_ClockConfig+0x1bc>)
 8001952:	689b      	ldr	r3, [r3, #8]
 8001954:	4a52      	ldr	r2, [pc, #328]	; (8001aa0 <HAL_RCC_ClockConfig+0x1bc>)
 8001956:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800195a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800195c:	4b50      	ldr	r3, [pc, #320]	; (8001aa0 <HAL_RCC_ClockConfig+0x1bc>)
 800195e:	689b      	ldr	r3, [r3, #8]
 8001960:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	689b      	ldr	r3, [r3, #8]
 8001968:	494d      	ldr	r1, [pc, #308]	; (8001aa0 <HAL_RCC_ClockConfig+0x1bc>)
 800196a:	4313      	orrs	r3, r2
 800196c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f003 0301 	and.w	r3, r3, #1
 8001976:	2b00      	cmp	r3, #0
 8001978:	d044      	beq.n	8001a04 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	2b01      	cmp	r3, #1
 8001980:	d107      	bne.n	8001992 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001982:	4b47      	ldr	r3, [pc, #284]	; (8001aa0 <HAL_RCC_ClockConfig+0x1bc>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800198a:	2b00      	cmp	r3, #0
 800198c:	d119      	bne.n	80019c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800198e:	2301      	movs	r3, #1
 8001990:	e07f      	b.n	8001a92 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	2b02      	cmp	r3, #2
 8001998:	d003      	beq.n	80019a2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800199e:	2b03      	cmp	r3, #3
 80019a0:	d107      	bne.n	80019b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019a2:	4b3f      	ldr	r3, [pc, #252]	; (8001aa0 <HAL_RCC_ClockConfig+0x1bc>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d109      	bne.n	80019c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019ae:	2301      	movs	r3, #1
 80019b0:	e06f      	b.n	8001a92 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019b2:	4b3b      	ldr	r3, [pc, #236]	; (8001aa0 <HAL_RCC_ClockConfig+0x1bc>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f003 0302 	and.w	r3, r3, #2
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d101      	bne.n	80019c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019be:	2301      	movs	r3, #1
 80019c0:	e067      	b.n	8001a92 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019c2:	4b37      	ldr	r3, [pc, #220]	; (8001aa0 <HAL_RCC_ClockConfig+0x1bc>)
 80019c4:	689b      	ldr	r3, [r3, #8]
 80019c6:	f023 0203 	bic.w	r2, r3, #3
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	4934      	ldr	r1, [pc, #208]	; (8001aa0 <HAL_RCC_ClockConfig+0x1bc>)
 80019d0:	4313      	orrs	r3, r2
 80019d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80019d4:	f7ff f9c0 	bl	8000d58 <HAL_GetTick>
 80019d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019da:	e00a      	b.n	80019f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019dc:	f7ff f9bc 	bl	8000d58 <HAL_GetTick>
 80019e0:	4602      	mov	r2, r0
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	1ad3      	subs	r3, r2, r3
 80019e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d901      	bls.n	80019f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80019ee:	2303      	movs	r3, #3
 80019f0:	e04f      	b.n	8001a92 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019f2:	4b2b      	ldr	r3, [pc, #172]	; (8001aa0 <HAL_RCC_ClockConfig+0x1bc>)
 80019f4:	689b      	ldr	r3, [r3, #8]
 80019f6:	f003 020c 	and.w	r2, r3, #12
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	009b      	lsls	r3, r3, #2
 8001a00:	429a      	cmp	r2, r3
 8001a02:	d1eb      	bne.n	80019dc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a04:	4b25      	ldr	r3, [pc, #148]	; (8001a9c <HAL_RCC_ClockConfig+0x1b8>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f003 0307 	and.w	r3, r3, #7
 8001a0c:	683a      	ldr	r2, [r7, #0]
 8001a0e:	429a      	cmp	r2, r3
 8001a10:	d20c      	bcs.n	8001a2c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a12:	4b22      	ldr	r3, [pc, #136]	; (8001a9c <HAL_RCC_ClockConfig+0x1b8>)
 8001a14:	683a      	ldr	r2, [r7, #0]
 8001a16:	b2d2      	uxtb	r2, r2
 8001a18:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a1a:	4b20      	ldr	r3, [pc, #128]	; (8001a9c <HAL_RCC_ClockConfig+0x1b8>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f003 0307 	and.w	r3, r3, #7
 8001a22:	683a      	ldr	r2, [r7, #0]
 8001a24:	429a      	cmp	r2, r3
 8001a26:	d001      	beq.n	8001a2c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	e032      	b.n	8001a92 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f003 0304 	and.w	r3, r3, #4
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d008      	beq.n	8001a4a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a38:	4b19      	ldr	r3, [pc, #100]	; (8001aa0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a3a:	689b      	ldr	r3, [r3, #8]
 8001a3c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	68db      	ldr	r3, [r3, #12]
 8001a44:	4916      	ldr	r1, [pc, #88]	; (8001aa0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a46:	4313      	orrs	r3, r2
 8001a48:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f003 0308 	and.w	r3, r3, #8
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d009      	beq.n	8001a6a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a56:	4b12      	ldr	r3, [pc, #72]	; (8001aa0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a58:	689b      	ldr	r3, [r3, #8]
 8001a5a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	691b      	ldr	r3, [r3, #16]
 8001a62:	00db      	lsls	r3, r3, #3
 8001a64:	490e      	ldr	r1, [pc, #56]	; (8001aa0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a66:	4313      	orrs	r3, r2
 8001a68:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001a6a:	f000 f821 	bl	8001ab0 <HAL_RCC_GetSysClockFreq>
 8001a6e:	4602      	mov	r2, r0
 8001a70:	4b0b      	ldr	r3, [pc, #44]	; (8001aa0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a72:	689b      	ldr	r3, [r3, #8]
 8001a74:	091b      	lsrs	r3, r3, #4
 8001a76:	f003 030f 	and.w	r3, r3, #15
 8001a7a:	490a      	ldr	r1, [pc, #40]	; (8001aa4 <HAL_RCC_ClockConfig+0x1c0>)
 8001a7c:	5ccb      	ldrb	r3, [r1, r3]
 8001a7e:	fa22 f303 	lsr.w	r3, r2, r3
 8001a82:	4a09      	ldr	r2, [pc, #36]	; (8001aa8 <HAL_RCC_ClockConfig+0x1c4>)
 8001a84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001a86:	4b09      	ldr	r3, [pc, #36]	; (8001aac <HAL_RCC_ClockConfig+0x1c8>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f7ff f920 	bl	8000cd0 <HAL_InitTick>

  return HAL_OK;
 8001a90:	2300      	movs	r3, #0
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	3710      	adds	r7, #16
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	40023c00 	.word	0x40023c00
 8001aa0:	40023800 	.word	0x40023800
 8001aa4:	08003d20 	.word	0x08003d20
 8001aa8:	20000018 	.word	0x20000018
 8001aac:	2000001c 	.word	0x2000001c

08001ab0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ab0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001ab4:	b094      	sub	sp, #80	; 0x50
 8001ab6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	647b      	str	r3, [r7, #68]	; 0x44
 8001abc:	2300      	movs	r3, #0
 8001abe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001ac8:	4b79      	ldr	r3, [pc, #484]	; (8001cb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001aca:	689b      	ldr	r3, [r3, #8]
 8001acc:	f003 030c 	and.w	r3, r3, #12
 8001ad0:	2b08      	cmp	r3, #8
 8001ad2:	d00d      	beq.n	8001af0 <HAL_RCC_GetSysClockFreq+0x40>
 8001ad4:	2b08      	cmp	r3, #8
 8001ad6:	f200 80e1 	bhi.w	8001c9c <HAL_RCC_GetSysClockFreq+0x1ec>
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d002      	beq.n	8001ae4 <HAL_RCC_GetSysClockFreq+0x34>
 8001ade:	2b04      	cmp	r3, #4
 8001ae0:	d003      	beq.n	8001aea <HAL_RCC_GetSysClockFreq+0x3a>
 8001ae2:	e0db      	b.n	8001c9c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001ae4:	4b73      	ldr	r3, [pc, #460]	; (8001cb4 <HAL_RCC_GetSysClockFreq+0x204>)
 8001ae6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001ae8:	e0db      	b.n	8001ca2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001aea:	4b73      	ldr	r3, [pc, #460]	; (8001cb8 <HAL_RCC_GetSysClockFreq+0x208>)
 8001aec:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001aee:	e0d8      	b.n	8001ca2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001af0:	4b6f      	ldr	r3, [pc, #444]	; (8001cb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001af8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001afa:	4b6d      	ldr	r3, [pc, #436]	; (8001cb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d063      	beq.n	8001bce <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b06:	4b6a      	ldr	r3, [pc, #424]	; (8001cb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	099b      	lsrs	r3, r3, #6
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001b10:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001b12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b18:	633b      	str	r3, [r7, #48]	; 0x30
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	637b      	str	r3, [r7, #52]	; 0x34
 8001b1e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001b22:	4622      	mov	r2, r4
 8001b24:	462b      	mov	r3, r5
 8001b26:	f04f 0000 	mov.w	r0, #0
 8001b2a:	f04f 0100 	mov.w	r1, #0
 8001b2e:	0159      	lsls	r1, r3, #5
 8001b30:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b34:	0150      	lsls	r0, r2, #5
 8001b36:	4602      	mov	r2, r0
 8001b38:	460b      	mov	r3, r1
 8001b3a:	4621      	mov	r1, r4
 8001b3c:	1a51      	subs	r1, r2, r1
 8001b3e:	6139      	str	r1, [r7, #16]
 8001b40:	4629      	mov	r1, r5
 8001b42:	eb63 0301 	sbc.w	r3, r3, r1
 8001b46:	617b      	str	r3, [r7, #20]
 8001b48:	f04f 0200 	mov.w	r2, #0
 8001b4c:	f04f 0300 	mov.w	r3, #0
 8001b50:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001b54:	4659      	mov	r1, fp
 8001b56:	018b      	lsls	r3, r1, #6
 8001b58:	4651      	mov	r1, sl
 8001b5a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001b5e:	4651      	mov	r1, sl
 8001b60:	018a      	lsls	r2, r1, #6
 8001b62:	4651      	mov	r1, sl
 8001b64:	ebb2 0801 	subs.w	r8, r2, r1
 8001b68:	4659      	mov	r1, fp
 8001b6a:	eb63 0901 	sbc.w	r9, r3, r1
 8001b6e:	f04f 0200 	mov.w	r2, #0
 8001b72:	f04f 0300 	mov.w	r3, #0
 8001b76:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001b7a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001b7e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001b82:	4690      	mov	r8, r2
 8001b84:	4699      	mov	r9, r3
 8001b86:	4623      	mov	r3, r4
 8001b88:	eb18 0303 	adds.w	r3, r8, r3
 8001b8c:	60bb      	str	r3, [r7, #8]
 8001b8e:	462b      	mov	r3, r5
 8001b90:	eb49 0303 	adc.w	r3, r9, r3
 8001b94:	60fb      	str	r3, [r7, #12]
 8001b96:	f04f 0200 	mov.w	r2, #0
 8001b9a:	f04f 0300 	mov.w	r3, #0
 8001b9e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001ba2:	4629      	mov	r1, r5
 8001ba4:	024b      	lsls	r3, r1, #9
 8001ba6:	4621      	mov	r1, r4
 8001ba8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001bac:	4621      	mov	r1, r4
 8001bae:	024a      	lsls	r2, r1, #9
 8001bb0:	4610      	mov	r0, r2
 8001bb2:	4619      	mov	r1, r3
 8001bb4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	62bb      	str	r3, [r7, #40]	; 0x28
 8001bba:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001bbc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001bc0:	f7fe fb76 	bl	80002b0 <__aeabi_uldivmod>
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	460b      	mov	r3, r1
 8001bc8:	4613      	mov	r3, r2
 8001bca:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001bcc:	e058      	b.n	8001c80 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bce:	4b38      	ldr	r3, [pc, #224]	; (8001cb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	099b      	lsrs	r3, r3, #6
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	4611      	mov	r1, r2
 8001bda:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001bde:	623b      	str	r3, [r7, #32]
 8001be0:	2300      	movs	r3, #0
 8001be2:	627b      	str	r3, [r7, #36]	; 0x24
 8001be4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001be8:	4642      	mov	r2, r8
 8001bea:	464b      	mov	r3, r9
 8001bec:	f04f 0000 	mov.w	r0, #0
 8001bf0:	f04f 0100 	mov.w	r1, #0
 8001bf4:	0159      	lsls	r1, r3, #5
 8001bf6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001bfa:	0150      	lsls	r0, r2, #5
 8001bfc:	4602      	mov	r2, r0
 8001bfe:	460b      	mov	r3, r1
 8001c00:	4641      	mov	r1, r8
 8001c02:	ebb2 0a01 	subs.w	sl, r2, r1
 8001c06:	4649      	mov	r1, r9
 8001c08:	eb63 0b01 	sbc.w	fp, r3, r1
 8001c0c:	f04f 0200 	mov.w	r2, #0
 8001c10:	f04f 0300 	mov.w	r3, #0
 8001c14:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001c18:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001c1c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001c20:	ebb2 040a 	subs.w	r4, r2, sl
 8001c24:	eb63 050b 	sbc.w	r5, r3, fp
 8001c28:	f04f 0200 	mov.w	r2, #0
 8001c2c:	f04f 0300 	mov.w	r3, #0
 8001c30:	00eb      	lsls	r3, r5, #3
 8001c32:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001c36:	00e2      	lsls	r2, r4, #3
 8001c38:	4614      	mov	r4, r2
 8001c3a:	461d      	mov	r5, r3
 8001c3c:	4643      	mov	r3, r8
 8001c3e:	18e3      	adds	r3, r4, r3
 8001c40:	603b      	str	r3, [r7, #0]
 8001c42:	464b      	mov	r3, r9
 8001c44:	eb45 0303 	adc.w	r3, r5, r3
 8001c48:	607b      	str	r3, [r7, #4]
 8001c4a:	f04f 0200 	mov.w	r2, #0
 8001c4e:	f04f 0300 	mov.w	r3, #0
 8001c52:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001c56:	4629      	mov	r1, r5
 8001c58:	028b      	lsls	r3, r1, #10
 8001c5a:	4621      	mov	r1, r4
 8001c5c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001c60:	4621      	mov	r1, r4
 8001c62:	028a      	lsls	r2, r1, #10
 8001c64:	4610      	mov	r0, r2
 8001c66:	4619      	mov	r1, r3
 8001c68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	61bb      	str	r3, [r7, #24]
 8001c6e:	61fa      	str	r2, [r7, #28]
 8001c70:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c74:	f7fe fb1c 	bl	80002b0 <__aeabi_uldivmod>
 8001c78:	4602      	mov	r2, r0
 8001c7a:	460b      	mov	r3, r1
 8001c7c:	4613      	mov	r3, r2
 8001c7e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001c80:	4b0b      	ldr	r3, [pc, #44]	; (8001cb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	0c1b      	lsrs	r3, r3, #16
 8001c86:	f003 0303 	and.w	r3, r3, #3
 8001c8a:	3301      	adds	r3, #1
 8001c8c:	005b      	lsls	r3, r3, #1
 8001c8e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001c90:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001c92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c94:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c98:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001c9a:	e002      	b.n	8001ca2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001c9c:	4b05      	ldr	r3, [pc, #20]	; (8001cb4 <HAL_RCC_GetSysClockFreq+0x204>)
 8001c9e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001ca0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ca2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	3750      	adds	r7, #80	; 0x50
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001cae:	bf00      	nop
 8001cb0:	40023800 	.word	0x40023800
 8001cb4:	00f42400 	.word	0x00f42400
 8001cb8:	007a1200 	.word	0x007a1200

08001cbc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001cc0:	4b03      	ldr	r3, [pc, #12]	; (8001cd0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr
 8001cce:	bf00      	nop
 8001cd0:	20000018 	.word	0x20000018

08001cd4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001cd8:	f7ff fff0 	bl	8001cbc <HAL_RCC_GetHCLKFreq>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	4b05      	ldr	r3, [pc, #20]	; (8001cf4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ce0:	689b      	ldr	r3, [r3, #8]
 8001ce2:	0a9b      	lsrs	r3, r3, #10
 8001ce4:	f003 0307 	and.w	r3, r3, #7
 8001ce8:	4903      	ldr	r1, [pc, #12]	; (8001cf8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001cea:	5ccb      	ldrb	r3, [r1, r3]
 8001cec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	bd80      	pop	{r7, pc}
 8001cf4:	40023800 	.word	0x40023800
 8001cf8:	08003d30 	.word	0x08003d30

08001cfc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001d00:	f7ff ffdc 	bl	8001cbc <HAL_RCC_GetHCLKFreq>
 8001d04:	4602      	mov	r2, r0
 8001d06:	4b05      	ldr	r3, [pc, #20]	; (8001d1c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001d08:	689b      	ldr	r3, [r3, #8]
 8001d0a:	0b5b      	lsrs	r3, r3, #13
 8001d0c:	f003 0307 	and.w	r3, r3, #7
 8001d10:	4903      	ldr	r1, [pc, #12]	; (8001d20 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d12:	5ccb      	ldrb	r3, [r1, r3]
 8001d14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	bd80      	pop	{r7, pc}
 8001d1c:	40023800 	.word	0x40023800
 8001d20:	08003d30 	.word	0x08003d30

08001d24 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b082      	sub	sp, #8
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d101      	bne.n	8001d36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001d32:	2301      	movs	r3, #1
 8001d34:	e03f      	b.n	8001db6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d3c:	b2db      	uxtb	r3, r3
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d106      	bne.n	8001d50 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2200      	movs	r2, #0
 8001d46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001d4a:	6878      	ldr	r0, [r7, #4]
 8001d4c:	f7fe fef0 	bl	8000b30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2224      	movs	r2, #36	; 0x24
 8001d54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	68da      	ldr	r2, [r3, #12]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001d66:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001d68:	6878      	ldr	r0, [r7, #4]
 8001d6a:	f000 fcdf 	bl	800272c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	691a      	ldr	r2, [r3, #16]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001d7c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	695a      	ldr	r2, [r3, #20]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001d8c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	68da      	ldr	r2, [r3, #12]
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001d9c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2200      	movs	r2, #0
 8001da2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2220      	movs	r2, #32
 8001da8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2220      	movs	r2, #32
 8001db0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001db4:	2300      	movs	r3, #0
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	3708      	adds	r7, #8
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}

08001dbe <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001dbe:	b580      	push	{r7, lr}
 8001dc0:	b084      	sub	sp, #16
 8001dc2:	af00      	add	r7, sp, #0
 8001dc4:	60f8      	str	r0, [r7, #12]
 8001dc6:	60b9      	str	r1, [r7, #8]
 8001dc8:	4613      	mov	r3, r2
 8001dca:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001dd2:	b2db      	uxtb	r3, r3
 8001dd4:	2b20      	cmp	r3, #32
 8001dd6:	d11d      	bne.n	8001e14 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8001dd8:	68bb      	ldr	r3, [r7, #8]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d002      	beq.n	8001de4 <HAL_UART_Receive_IT+0x26>
 8001dde:	88fb      	ldrh	r3, [r7, #6]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d101      	bne.n	8001de8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8001de4:	2301      	movs	r3, #1
 8001de6:	e016      	b.n	8001e16 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001dee:	2b01      	cmp	r3, #1
 8001df0:	d101      	bne.n	8001df6 <HAL_UART_Receive_IT+0x38>
 8001df2:	2302      	movs	r3, #2
 8001df4:	e00f      	b.n	8001e16 <HAL_UART_Receive_IT+0x58>
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	2201      	movs	r2, #1
 8001dfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	2200      	movs	r2, #0
 8001e02:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8001e04:	88fb      	ldrh	r3, [r7, #6]
 8001e06:	461a      	mov	r2, r3
 8001e08:	68b9      	ldr	r1, [r7, #8]
 8001e0a:	68f8      	ldr	r0, [r7, #12]
 8001e0c:	f000 fab6 	bl	800237c <UART_Start_Receive_IT>
 8001e10:	4603      	mov	r3, r0
 8001e12:	e000      	b.n	8001e16 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8001e14:	2302      	movs	r3, #2
  }
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	3710      	adds	r7, #16
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}
	...

08001e20 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b0ba      	sub	sp, #232	; 0xe8
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	68db      	ldr	r3, [r3, #12]
 8001e38:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	695b      	ldr	r3, [r3, #20]
 8001e42:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8001e46:	2300      	movs	r3, #0
 8001e48:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001e52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001e56:	f003 030f 	and.w	r3, r3, #15
 8001e5a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8001e5e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d10f      	bne.n	8001e86 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001e66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001e6a:	f003 0320 	and.w	r3, r3, #32
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d009      	beq.n	8001e86 <HAL_UART_IRQHandler+0x66>
 8001e72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001e76:	f003 0320 	and.w	r3, r3, #32
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d003      	beq.n	8001e86 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8001e7e:	6878      	ldr	r0, [r7, #4]
 8001e80:	f000 fb99 	bl	80025b6 <UART_Receive_IT>
      return;
 8001e84:	e256      	b.n	8002334 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8001e86:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	f000 80de 	beq.w	800204c <HAL_UART_IRQHandler+0x22c>
 8001e90:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001e94:	f003 0301 	and.w	r3, r3, #1
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d106      	bne.n	8001eaa <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001e9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001ea0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	f000 80d1 	beq.w	800204c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001eaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001eae:	f003 0301 	and.w	r3, r3, #1
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d00b      	beq.n	8001ece <HAL_UART_IRQHandler+0xae>
 8001eb6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001eba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d005      	beq.n	8001ece <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec6:	f043 0201 	orr.w	r2, r3, #1
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001ece:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001ed2:	f003 0304 	and.w	r3, r3, #4
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d00b      	beq.n	8001ef2 <HAL_UART_IRQHandler+0xd2>
 8001eda:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001ede:	f003 0301 	and.w	r3, r3, #1
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d005      	beq.n	8001ef2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eea:	f043 0202 	orr.w	r2, r3, #2
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001ef2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001ef6:	f003 0302 	and.w	r3, r3, #2
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d00b      	beq.n	8001f16 <HAL_UART_IRQHandler+0xf6>
 8001efe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001f02:	f003 0301 	and.w	r3, r3, #1
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d005      	beq.n	8001f16 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f0e:	f043 0204 	orr.w	r2, r3, #4
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8001f16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001f1a:	f003 0308 	and.w	r3, r3, #8
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d011      	beq.n	8001f46 <HAL_UART_IRQHandler+0x126>
 8001f22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001f26:	f003 0320 	and.w	r3, r3, #32
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d105      	bne.n	8001f3a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8001f2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001f32:	f003 0301 	and.w	r3, r3, #1
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d005      	beq.n	8001f46 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f3e:	f043 0208 	orr.w	r2, r3, #8
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	f000 81ed 	beq.w	800232a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001f50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001f54:	f003 0320 	and.w	r3, r3, #32
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d008      	beq.n	8001f6e <HAL_UART_IRQHandler+0x14e>
 8001f5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001f60:	f003 0320 	and.w	r3, r3, #32
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d002      	beq.n	8001f6e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8001f68:	6878      	ldr	r0, [r7, #4]
 8001f6a:	f000 fb24 	bl	80025b6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	695b      	ldr	r3, [r3, #20]
 8001f74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f78:	2b40      	cmp	r3, #64	; 0x40
 8001f7a:	bf0c      	ite	eq
 8001f7c:	2301      	moveq	r3, #1
 8001f7e:	2300      	movne	r3, #0
 8001f80:	b2db      	uxtb	r3, r3
 8001f82:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f8a:	f003 0308 	and.w	r3, r3, #8
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d103      	bne.n	8001f9a <HAL_UART_IRQHandler+0x17a>
 8001f92:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d04f      	beq.n	800203a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001f9a:	6878      	ldr	r0, [r7, #4]
 8001f9c:	f000 fa2c 	bl	80023f8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	695b      	ldr	r3, [r3, #20]
 8001fa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001faa:	2b40      	cmp	r3, #64	; 0x40
 8001fac:	d141      	bne.n	8002032 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	3314      	adds	r3, #20
 8001fb4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001fb8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001fbc:	e853 3f00 	ldrex	r3, [r3]
 8001fc0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8001fc4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001fc8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001fcc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	3314      	adds	r3, #20
 8001fd6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8001fda:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8001fde:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001fe2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8001fe6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8001fea:	e841 2300 	strex	r3, r2, [r1]
 8001fee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8001ff2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d1d9      	bne.n	8001fae <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d013      	beq.n	800202a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002006:	4a7d      	ldr	r2, [pc, #500]	; (80021fc <HAL_UART_IRQHandler+0x3dc>)
 8002008:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800200e:	4618      	mov	r0, r3
 8002010:	f7ff f82f 	bl	8001072 <HAL_DMA_Abort_IT>
 8002014:	4603      	mov	r3, r0
 8002016:	2b00      	cmp	r3, #0
 8002018:	d016      	beq.n	8002048 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800201e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002020:	687a      	ldr	r2, [r7, #4]
 8002022:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002024:	4610      	mov	r0, r2
 8002026:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002028:	e00e      	b.n	8002048 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800202a:	6878      	ldr	r0, [r7, #4]
 800202c:	f000 f990 	bl	8002350 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002030:	e00a      	b.n	8002048 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002032:	6878      	ldr	r0, [r7, #4]
 8002034:	f000 f98c 	bl	8002350 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002038:	e006      	b.n	8002048 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800203a:	6878      	ldr	r0, [r7, #4]
 800203c:	f000 f988 	bl	8002350 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2200      	movs	r2, #0
 8002044:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002046:	e170      	b.n	800232a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002048:	bf00      	nop
    return;
 800204a:	e16e      	b.n	800232a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002050:	2b01      	cmp	r3, #1
 8002052:	f040 814a 	bne.w	80022ea <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002056:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800205a:	f003 0310 	and.w	r3, r3, #16
 800205e:	2b00      	cmp	r3, #0
 8002060:	f000 8143 	beq.w	80022ea <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002064:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002068:	f003 0310 	and.w	r3, r3, #16
 800206c:	2b00      	cmp	r3, #0
 800206e:	f000 813c 	beq.w	80022ea <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002072:	2300      	movs	r3, #0
 8002074:	60bb      	str	r3, [r7, #8]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	60bb      	str	r3, [r7, #8]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	60bb      	str	r3, [r7, #8]
 8002086:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	695b      	ldr	r3, [r3, #20]
 800208e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002092:	2b40      	cmp	r3, #64	; 0x40
 8002094:	f040 80b4 	bne.w	8002200 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80020a4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	f000 8140 	beq.w	800232e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80020b2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80020b6:	429a      	cmp	r2, r3
 80020b8:	f080 8139 	bcs.w	800232e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80020c2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020c8:	69db      	ldr	r3, [r3, #28]
 80020ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80020ce:	f000 8088 	beq.w	80021e2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	330c      	adds	r3, #12
 80020d8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80020dc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80020e0:	e853 3f00 	ldrex	r3, [r3]
 80020e4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80020e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80020ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80020f0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	330c      	adds	r3, #12
 80020fa:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80020fe:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002102:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002106:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800210a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800210e:	e841 2300 	strex	r3, r2, [r1]
 8002112:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002116:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800211a:	2b00      	cmp	r3, #0
 800211c:	d1d9      	bne.n	80020d2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	3314      	adds	r3, #20
 8002124:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002126:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002128:	e853 3f00 	ldrex	r3, [r3]
 800212c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800212e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002130:	f023 0301 	bic.w	r3, r3, #1
 8002134:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	3314      	adds	r3, #20
 800213e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002142:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002146:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002148:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800214a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800214e:	e841 2300 	strex	r3, r2, [r1]
 8002152:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002154:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002156:	2b00      	cmp	r3, #0
 8002158:	d1e1      	bne.n	800211e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	3314      	adds	r3, #20
 8002160:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002162:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002164:	e853 3f00 	ldrex	r3, [r3]
 8002168:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800216a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800216c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002170:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	3314      	adds	r3, #20
 800217a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800217e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002180:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002182:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002184:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002186:	e841 2300 	strex	r3, r2, [r1]
 800218a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800218c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800218e:	2b00      	cmp	r3, #0
 8002190:	d1e3      	bne.n	800215a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2220      	movs	r2, #32
 8002196:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2200      	movs	r2, #0
 800219e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	330c      	adds	r3, #12
 80021a6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80021a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80021aa:	e853 3f00 	ldrex	r3, [r3]
 80021ae:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80021b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80021b2:	f023 0310 	bic.w	r3, r3, #16
 80021b6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	330c      	adds	r3, #12
 80021c0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80021c4:	65ba      	str	r2, [r7, #88]	; 0x58
 80021c6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80021c8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80021ca:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80021cc:	e841 2300 	strex	r3, r2, [r1]
 80021d0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80021d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d1e3      	bne.n	80021a0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021dc:	4618      	mov	r0, r3
 80021de:	f7fe fed8 	bl	8000f92 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80021ea:	b29b      	uxth	r3, r3
 80021ec:	1ad3      	subs	r3, r2, r3
 80021ee:	b29b      	uxth	r3, r3
 80021f0:	4619      	mov	r1, r3
 80021f2:	6878      	ldr	r0, [r7, #4]
 80021f4:	f000 f8b6 	bl	8002364 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80021f8:	e099      	b.n	800232e <HAL_UART_IRQHandler+0x50e>
 80021fa:	bf00      	nop
 80021fc:	080024bf 	.word	0x080024bf
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002208:	b29b      	uxth	r3, r3
 800220a:	1ad3      	subs	r3, r2, r3
 800220c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002214:	b29b      	uxth	r3, r3
 8002216:	2b00      	cmp	r3, #0
 8002218:	f000 808b 	beq.w	8002332 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800221c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002220:	2b00      	cmp	r3, #0
 8002222:	f000 8086 	beq.w	8002332 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	330c      	adds	r3, #12
 800222c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800222e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002230:	e853 3f00 	ldrex	r3, [r3]
 8002234:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002236:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002238:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800223c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	330c      	adds	r3, #12
 8002246:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800224a:	647a      	str	r2, [r7, #68]	; 0x44
 800224c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800224e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002250:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002252:	e841 2300 	strex	r3, r2, [r1]
 8002256:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002258:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800225a:	2b00      	cmp	r3, #0
 800225c:	d1e3      	bne.n	8002226 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	3314      	adds	r3, #20
 8002264:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002268:	e853 3f00 	ldrex	r3, [r3]
 800226c:	623b      	str	r3, [r7, #32]
   return(result);
 800226e:	6a3b      	ldr	r3, [r7, #32]
 8002270:	f023 0301 	bic.w	r3, r3, #1
 8002274:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	3314      	adds	r3, #20
 800227e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002282:	633a      	str	r2, [r7, #48]	; 0x30
 8002284:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002286:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002288:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800228a:	e841 2300 	strex	r3, r2, [r1]
 800228e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002292:	2b00      	cmp	r3, #0
 8002294:	d1e3      	bne.n	800225e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2220      	movs	r2, #32
 800229a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2200      	movs	r2, #0
 80022a2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	330c      	adds	r3, #12
 80022aa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022ac:	693b      	ldr	r3, [r7, #16]
 80022ae:	e853 3f00 	ldrex	r3, [r3]
 80022b2:	60fb      	str	r3, [r7, #12]
   return(result);
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	f023 0310 	bic.w	r3, r3, #16
 80022ba:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	330c      	adds	r3, #12
 80022c4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80022c8:	61fa      	str	r2, [r7, #28]
 80022ca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022cc:	69b9      	ldr	r1, [r7, #24]
 80022ce:	69fa      	ldr	r2, [r7, #28]
 80022d0:	e841 2300 	strex	r3, r2, [r1]
 80022d4:	617b      	str	r3, [r7, #20]
   return(result);
 80022d6:	697b      	ldr	r3, [r7, #20]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d1e3      	bne.n	80022a4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80022dc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80022e0:	4619      	mov	r1, r3
 80022e2:	6878      	ldr	r0, [r7, #4]
 80022e4:	f000 f83e 	bl	8002364 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80022e8:	e023      	b.n	8002332 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80022ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80022ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d009      	beq.n	800230a <HAL_UART_IRQHandler+0x4ea>
 80022f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80022fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d003      	beq.n	800230a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8002302:	6878      	ldr	r0, [r7, #4]
 8002304:	f000 f8ef 	bl	80024e6 <UART_Transmit_IT>
    return;
 8002308:	e014      	b.n	8002334 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800230a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800230e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002312:	2b00      	cmp	r3, #0
 8002314:	d00e      	beq.n	8002334 <HAL_UART_IRQHandler+0x514>
 8002316:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800231a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800231e:	2b00      	cmp	r3, #0
 8002320:	d008      	beq.n	8002334 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8002322:	6878      	ldr	r0, [r7, #4]
 8002324:	f000 f92f 	bl	8002586 <UART_EndTransmit_IT>
    return;
 8002328:	e004      	b.n	8002334 <HAL_UART_IRQHandler+0x514>
    return;
 800232a:	bf00      	nop
 800232c:	e002      	b.n	8002334 <HAL_UART_IRQHandler+0x514>
      return;
 800232e:	bf00      	nop
 8002330:	e000      	b.n	8002334 <HAL_UART_IRQHandler+0x514>
      return;
 8002332:	bf00      	nop
  }
}
 8002334:	37e8      	adds	r7, #232	; 0xe8
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop

0800233c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800233c:	b480      	push	{r7}
 800233e:	b083      	sub	sp, #12
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002344:	bf00      	nop
 8002346:	370c      	adds	r7, #12
 8002348:	46bd      	mov	sp, r7
 800234a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234e:	4770      	bx	lr

08002350 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002350:	b480      	push	{r7}
 8002352:	b083      	sub	sp, #12
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002358:	bf00      	nop
 800235a:	370c      	adds	r7, #12
 800235c:	46bd      	mov	sp, r7
 800235e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002362:	4770      	bx	lr

08002364 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002364:	b480      	push	{r7}
 8002366:	b083      	sub	sp, #12
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
 800236c:	460b      	mov	r3, r1
 800236e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002370:	bf00      	nop
 8002372:	370c      	adds	r7, #12
 8002374:	46bd      	mov	sp, r7
 8002376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237a:	4770      	bx	lr

0800237c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800237c:	b480      	push	{r7}
 800237e:	b085      	sub	sp, #20
 8002380:	af00      	add	r7, sp, #0
 8002382:	60f8      	str	r0, [r7, #12]
 8002384:	60b9      	str	r1, [r7, #8]
 8002386:	4613      	mov	r3, r2
 8002388:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	68ba      	ldr	r2, [r7, #8]
 800238e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	88fa      	ldrh	r2, [r7, #6]
 8002394:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	88fa      	ldrh	r2, [r7, #6]
 800239a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	2200      	movs	r2, #0
 80023a0:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	2222      	movs	r2, #34	; 0x22
 80023a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	2200      	movs	r2, #0
 80023ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	691b      	ldr	r3, [r3, #16]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d007      	beq.n	80023ca <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	68da      	ldr	r2, [r3, #12]
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80023c8:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	695a      	ldr	r2, [r3, #20]
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f042 0201 	orr.w	r2, r2, #1
 80023d8:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	68da      	ldr	r2, [r3, #12]
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f042 0220 	orr.w	r2, r2, #32
 80023e8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80023ea:	2300      	movs	r3, #0
}
 80023ec:	4618      	mov	r0, r3
 80023ee:	3714      	adds	r7, #20
 80023f0:	46bd      	mov	sp, r7
 80023f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f6:	4770      	bx	lr

080023f8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b095      	sub	sp, #84	; 0x54
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	330c      	adds	r3, #12
 8002406:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002408:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800240a:	e853 3f00 	ldrex	r3, [r3]
 800240e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002412:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002416:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	330c      	adds	r3, #12
 800241e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002420:	643a      	str	r2, [r7, #64]	; 0x40
 8002422:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002424:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002426:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002428:	e841 2300 	strex	r3, r2, [r1]
 800242c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800242e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002430:	2b00      	cmp	r3, #0
 8002432:	d1e5      	bne.n	8002400 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	3314      	adds	r3, #20
 800243a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800243c:	6a3b      	ldr	r3, [r7, #32]
 800243e:	e853 3f00 	ldrex	r3, [r3]
 8002442:	61fb      	str	r3, [r7, #28]
   return(result);
 8002444:	69fb      	ldr	r3, [r7, #28]
 8002446:	f023 0301 	bic.w	r3, r3, #1
 800244a:	64bb      	str	r3, [r7, #72]	; 0x48
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	3314      	adds	r3, #20
 8002452:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002454:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002456:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002458:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800245a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800245c:	e841 2300 	strex	r3, r2, [r1]
 8002460:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002464:	2b00      	cmp	r3, #0
 8002466:	d1e5      	bne.n	8002434 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800246c:	2b01      	cmp	r3, #1
 800246e:	d119      	bne.n	80024a4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	330c      	adds	r3, #12
 8002476:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	e853 3f00 	ldrex	r3, [r3]
 800247e:	60bb      	str	r3, [r7, #8]
   return(result);
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	f023 0310 	bic.w	r3, r3, #16
 8002486:	647b      	str	r3, [r7, #68]	; 0x44
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	330c      	adds	r3, #12
 800248e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002490:	61ba      	str	r2, [r7, #24]
 8002492:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002494:	6979      	ldr	r1, [r7, #20]
 8002496:	69ba      	ldr	r2, [r7, #24]
 8002498:	e841 2300 	strex	r3, r2, [r1]
 800249c:	613b      	str	r3, [r7, #16]
   return(result);
 800249e:	693b      	ldr	r3, [r7, #16]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d1e5      	bne.n	8002470 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2220      	movs	r2, #32
 80024a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2200      	movs	r2, #0
 80024b0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80024b2:	bf00      	nop
 80024b4:	3754      	adds	r7, #84	; 0x54
 80024b6:	46bd      	mov	sp, r7
 80024b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024bc:	4770      	bx	lr

080024be <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80024be:	b580      	push	{r7, lr}
 80024c0:	b084      	sub	sp, #16
 80024c2:	af00      	add	r7, sp, #0
 80024c4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024ca:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	2200      	movs	r2, #0
 80024d0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	2200      	movs	r2, #0
 80024d6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80024d8:	68f8      	ldr	r0, [r7, #12]
 80024da:	f7ff ff39 	bl	8002350 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80024de:	bf00      	nop
 80024e0:	3710      	adds	r7, #16
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}

080024e6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80024e6:	b480      	push	{r7}
 80024e8:	b085      	sub	sp, #20
 80024ea:	af00      	add	r7, sp, #0
 80024ec:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024f4:	b2db      	uxtb	r3, r3
 80024f6:	2b21      	cmp	r3, #33	; 0x21
 80024f8:	d13e      	bne.n	8002578 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	689b      	ldr	r3, [r3, #8]
 80024fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002502:	d114      	bne.n	800252e <UART_Transmit_IT+0x48>
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	691b      	ldr	r3, [r3, #16]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d110      	bne.n	800252e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6a1b      	ldr	r3, [r3, #32]
 8002510:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	881b      	ldrh	r3, [r3, #0]
 8002516:	461a      	mov	r2, r3
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002520:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6a1b      	ldr	r3, [r3, #32]
 8002526:	1c9a      	adds	r2, r3, #2
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	621a      	str	r2, [r3, #32]
 800252c:	e008      	b.n	8002540 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6a1b      	ldr	r3, [r3, #32]
 8002532:	1c59      	adds	r1, r3, #1
 8002534:	687a      	ldr	r2, [r7, #4]
 8002536:	6211      	str	r1, [r2, #32]
 8002538:	781a      	ldrb	r2, [r3, #0]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002544:	b29b      	uxth	r3, r3
 8002546:	3b01      	subs	r3, #1
 8002548:	b29b      	uxth	r3, r3
 800254a:	687a      	ldr	r2, [r7, #4]
 800254c:	4619      	mov	r1, r3
 800254e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002550:	2b00      	cmp	r3, #0
 8002552:	d10f      	bne.n	8002574 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	68da      	ldr	r2, [r3, #12]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002562:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	68da      	ldr	r2, [r3, #12]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002572:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002574:	2300      	movs	r3, #0
 8002576:	e000      	b.n	800257a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002578:	2302      	movs	r3, #2
  }
}
 800257a:	4618      	mov	r0, r3
 800257c:	3714      	adds	r7, #20
 800257e:	46bd      	mov	sp, r7
 8002580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002584:	4770      	bx	lr

08002586 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002586:	b580      	push	{r7, lr}
 8002588:	b082      	sub	sp, #8
 800258a:	af00      	add	r7, sp, #0
 800258c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	68da      	ldr	r2, [r3, #12]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800259c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2220      	movs	r2, #32
 80025a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80025a6:	6878      	ldr	r0, [r7, #4]
 80025a8:	f7ff fec8 	bl	800233c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80025ac:	2300      	movs	r3, #0
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	3708      	adds	r7, #8
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}

080025b6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80025b6:	b580      	push	{r7, lr}
 80025b8:	b08c      	sub	sp, #48	; 0x30
 80025ba:	af00      	add	r7, sp, #0
 80025bc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80025c4:	b2db      	uxtb	r3, r3
 80025c6:	2b22      	cmp	r3, #34	; 0x22
 80025c8:	f040 80ab 	bne.w	8002722 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	689b      	ldr	r3, [r3, #8]
 80025d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025d4:	d117      	bne.n	8002606 <UART_Receive_IT+0x50>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	691b      	ldr	r3, [r3, #16]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d113      	bne.n	8002606 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80025de:	2300      	movs	r3, #0
 80025e0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025e6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	b29b      	uxth	r3, r3
 80025f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025f4:	b29a      	uxth	r2, r3
 80025f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025f8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025fe:	1c9a      	adds	r2, r3, #2
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	629a      	str	r2, [r3, #40]	; 0x28
 8002604:	e026      	b.n	8002654 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800260a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800260c:	2300      	movs	r3, #0
 800260e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	689b      	ldr	r3, [r3, #8]
 8002614:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002618:	d007      	beq.n	800262a <UART_Receive_IT+0x74>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	689b      	ldr	r3, [r3, #8]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d10a      	bne.n	8002638 <UART_Receive_IT+0x82>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	691b      	ldr	r3, [r3, #16]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d106      	bne.n	8002638 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	b2da      	uxtb	r2, r3
 8002632:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002634:	701a      	strb	r2, [r3, #0]
 8002636:	e008      	b.n	800264a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	b2db      	uxtb	r3, r3
 8002640:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002644:	b2da      	uxtb	r2, r3
 8002646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002648:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800264e:	1c5a      	adds	r2, r3, #1
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002658:	b29b      	uxth	r3, r3
 800265a:	3b01      	subs	r3, #1
 800265c:	b29b      	uxth	r3, r3
 800265e:	687a      	ldr	r2, [r7, #4]
 8002660:	4619      	mov	r1, r3
 8002662:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002664:	2b00      	cmp	r3, #0
 8002666:	d15a      	bne.n	800271e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	68da      	ldr	r2, [r3, #12]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f022 0220 	bic.w	r2, r2, #32
 8002676:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	68da      	ldr	r2, [r3, #12]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002686:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	695a      	ldr	r2, [r3, #20]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f022 0201 	bic.w	r2, r2, #1
 8002696:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2220      	movs	r2, #32
 800269c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026a4:	2b01      	cmp	r3, #1
 80026a6:	d135      	bne.n	8002714 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2200      	movs	r2, #0
 80026ac:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	330c      	adds	r3, #12
 80026b4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	e853 3f00 	ldrex	r3, [r3]
 80026bc:	613b      	str	r3, [r7, #16]
   return(result);
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	f023 0310 	bic.w	r3, r3, #16
 80026c4:	627b      	str	r3, [r7, #36]	; 0x24
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	330c      	adds	r3, #12
 80026cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026ce:	623a      	str	r2, [r7, #32]
 80026d0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026d2:	69f9      	ldr	r1, [r7, #28]
 80026d4:	6a3a      	ldr	r2, [r7, #32]
 80026d6:	e841 2300 	strex	r3, r2, [r1]
 80026da:	61bb      	str	r3, [r7, #24]
   return(result);
 80026dc:	69bb      	ldr	r3, [r7, #24]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d1e5      	bne.n	80026ae <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f003 0310 	and.w	r3, r3, #16
 80026ec:	2b10      	cmp	r3, #16
 80026ee:	d10a      	bne.n	8002706 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80026f0:	2300      	movs	r3, #0
 80026f2:	60fb      	str	r3, [r7, #12]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	60fb      	str	r3, [r7, #12]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	60fb      	str	r3, [r7, #12]
 8002704:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800270a:	4619      	mov	r1, r3
 800270c:	6878      	ldr	r0, [r7, #4]
 800270e:	f7ff fe29 	bl	8002364 <HAL_UARTEx_RxEventCallback>
 8002712:	e002      	b.n	800271a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002714:	6878      	ldr	r0, [r7, #4]
 8002716:	f000 fae1 	bl	8002cdc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800271a:	2300      	movs	r3, #0
 800271c:	e002      	b.n	8002724 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800271e:	2300      	movs	r3, #0
 8002720:	e000      	b.n	8002724 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8002722:	2302      	movs	r3, #2
  }
}
 8002724:	4618      	mov	r0, r3
 8002726:	3730      	adds	r7, #48	; 0x30
 8002728:	46bd      	mov	sp, r7
 800272a:	bd80      	pop	{r7, pc}

0800272c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800272c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002730:	b0c0      	sub	sp, #256	; 0x100
 8002732:	af00      	add	r7, sp, #0
 8002734:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002738:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	691b      	ldr	r3, [r3, #16]
 8002740:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002744:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002748:	68d9      	ldr	r1, [r3, #12]
 800274a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800274e:	681a      	ldr	r2, [r3, #0]
 8002750:	ea40 0301 	orr.w	r3, r0, r1
 8002754:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002756:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800275a:	689a      	ldr	r2, [r3, #8]
 800275c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002760:	691b      	ldr	r3, [r3, #16]
 8002762:	431a      	orrs	r2, r3
 8002764:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002768:	695b      	ldr	r3, [r3, #20]
 800276a:	431a      	orrs	r2, r3
 800276c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002770:	69db      	ldr	r3, [r3, #28]
 8002772:	4313      	orrs	r3, r2
 8002774:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002778:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	68db      	ldr	r3, [r3, #12]
 8002780:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002784:	f021 010c 	bic.w	r1, r1, #12
 8002788:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800278c:	681a      	ldr	r2, [r3, #0]
 800278e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002792:	430b      	orrs	r3, r1
 8002794:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002796:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	695b      	ldr	r3, [r3, #20]
 800279e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80027a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027a6:	6999      	ldr	r1, [r3, #24]
 80027a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027ac:	681a      	ldr	r2, [r3, #0]
 80027ae:	ea40 0301 	orr.w	r3, r0, r1
 80027b2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80027b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027b8:	681a      	ldr	r2, [r3, #0]
 80027ba:	4b8f      	ldr	r3, [pc, #572]	; (80029f8 <UART_SetConfig+0x2cc>)
 80027bc:	429a      	cmp	r2, r3
 80027be:	d005      	beq.n	80027cc <UART_SetConfig+0xa0>
 80027c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027c4:	681a      	ldr	r2, [r3, #0]
 80027c6:	4b8d      	ldr	r3, [pc, #564]	; (80029fc <UART_SetConfig+0x2d0>)
 80027c8:	429a      	cmp	r2, r3
 80027ca:	d104      	bne.n	80027d6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80027cc:	f7ff fa96 	bl	8001cfc <HAL_RCC_GetPCLK2Freq>
 80027d0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80027d4:	e003      	b.n	80027de <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80027d6:	f7ff fa7d 	bl	8001cd4 <HAL_RCC_GetPCLK1Freq>
 80027da:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80027de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027e2:	69db      	ldr	r3, [r3, #28]
 80027e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80027e8:	f040 810c 	bne.w	8002a04 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80027ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80027f0:	2200      	movs	r2, #0
 80027f2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80027f6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80027fa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80027fe:	4622      	mov	r2, r4
 8002800:	462b      	mov	r3, r5
 8002802:	1891      	adds	r1, r2, r2
 8002804:	65b9      	str	r1, [r7, #88]	; 0x58
 8002806:	415b      	adcs	r3, r3
 8002808:	65fb      	str	r3, [r7, #92]	; 0x5c
 800280a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800280e:	4621      	mov	r1, r4
 8002810:	eb12 0801 	adds.w	r8, r2, r1
 8002814:	4629      	mov	r1, r5
 8002816:	eb43 0901 	adc.w	r9, r3, r1
 800281a:	f04f 0200 	mov.w	r2, #0
 800281e:	f04f 0300 	mov.w	r3, #0
 8002822:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002826:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800282a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800282e:	4690      	mov	r8, r2
 8002830:	4699      	mov	r9, r3
 8002832:	4623      	mov	r3, r4
 8002834:	eb18 0303 	adds.w	r3, r8, r3
 8002838:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800283c:	462b      	mov	r3, r5
 800283e:	eb49 0303 	adc.w	r3, r9, r3
 8002842:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002846:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	2200      	movs	r2, #0
 800284e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002852:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002856:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800285a:	460b      	mov	r3, r1
 800285c:	18db      	adds	r3, r3, r3
 800285e:	653b      	str	r3, [r7, #80]	; 0x50
 8002860:	4613      	mov	r3, r2
 8002862:	eb42 0303 	adc.w	r3, r2, r3
 8002866:	657b      	str	r3, [r7, #84]	; 0x54
 8002868:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800286c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002870:	f7fd fd1e 	bl	80002b0 <__aeabi_uldivmod>
 8002874:	4602      	mov	r2, r0
 8002876:	460b      	mov	r3, r1
 8002878:	4b61      	ldr	r3, [pc, #388]	; (8002a00 <UART_SetConfig+0x2d4>)
 800287a:	fba3 2302 	umull	r2, r3, r3, r2
 800287e:	095b      	lsrs	r3, r3, #5
 8002880:	011c      	lsls	r4, r3, #4
 8002882:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002886:	2200      	movs	r2, #0
 8002888:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800288c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002890:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002894:	4642      	mov	r2, r8
 8002896:	464b      	mov	r3, r9
 8002898:	1891      	adds	r1, r2, r2
 800289a:	64b9      	str	r1, [r7, #72]	; 0x48
 800289c:	415b      	adcs	r3, r3
 800289e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80028a0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80028a4:	4641      	mov	r1, r8
 80028a6:	eb12 0a01 	adds.w	sl, r2, r1
 80028aa:	4649      	mov	r1, r9
 80028ac:	eb43 0b01 	adc.w	fp, r3, r1
 80028b0:	f04f 0200 	mov.w	r2, #0
 80028b4:	f04f 0300 	mov.w	r3, #0
 80028b8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80028bc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80028c0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80028c4:	4692      	mov	sl, r2
 80028c6:	469b      	mov	fp, r3
 80028c8:	4643      	mov	r3, r8
 80028ca:	eb1a 0303 	adds.w	r3, sl, r3
 80028ce:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80028d2:	464b      	mov	r3, r9
 80028d4:	eb4b 0303 	adc.w	r3, fp, r3
 80028d8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80028dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	2200      	movs	r2, #0
 80028e4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80028e8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80028ec:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80028f0:	460b      	mov	r3, r1
 80028f2:	18db      	adds	r3, r3, r3
 80028f4:	643b      	str	r3, [r7, #64]	; 0x40
 80028f6:	4613      	mov	r3, r2
 80028f8:	eb42 0303 	adc.w	r3, r2, r3
 80028fc:	647b      	str	r3, [r7, #68]	; 0x44
 80028fe:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002902:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002906:	f7fd fcd3 	bl	80002b0 <__aeabi_uldivmod>
 800290a:	4602      	mov	r2, r0
 800290c:	460b      	mov	r3, r1
 800290e:	4611      	mov	r1, r2
 8002910:	4b3b      	ldr	r3, [pc, #236]	; (8002a00 <UART_SetConfig+0x2d4>)
 8002912:	fba3 2301 	umull	r2, r3, r3, r1
 8002916:	095b      	lsrs	r3, r3, #5
 8002918:	2264      	movs	r2, #100	; 0x64
 800291a:	fb02 f303 	mul.w	r3, r2, r3
 800291e:	1acb      	subs	r3, r1, r3
 8002920:	00db      	lsls	r3, r3, #3
 8002922:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002926:	4b36      	ldr	r3, [pc, #216]	; (8002a00 <UART_SetConfig+0x2d4>)
 8002928:	fba3 2302 	umull	r2, r3, r3, r2
 800292c:	095b      	lsrs	r3, r3, #5
 800292e:	005b      	lsls	r3, r3, #1
 8002930:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002934:	441c      	add	r4, r3
 8002936:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800293a:	2200      	movs	r2, #0
 800293c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002940:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002944:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002948:	4642      	mov	r2, r8
 800294a:	464b      	mov	r3, r9
 800294c:	1891      	adds	r1, r2, r2
 800294e:	63b9      	str	r1, [r7, #56]	; 0x38
 8002950:	415b      	adcs	r3, r3
 8002952:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002954:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002958:	4641      	mov	r1, r8
 800295a:	1851      	adds	r1, r2, r1
 800295c:	6339      	str	r1, [r7, #48]	; 0x30
 800295e:	4649      	mov	r1, r9
 8002960:	414b      	adcs	r3, r1
 8002962:	637b      	str	r3, [r7, #52]	; 0x34
 8002964:	f04f 0200 	mov.w	r2, #0
 8002968:	f04f 0300 	mov.w	r3, #0
 800296c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002970:	4659      	mov	r1, fp
 8002972:	00cb      	lsls	r3, r1, #3
 8002974:	4651      	mov	r1, sl
 8002976:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800297a:	4651      	mov	r1, sl
 800297c:	00ca      	lsls	r2, r1, #3
 800297e:	4610      	mov	r0, r2
 8002980:	4619      	mov	r1, r3
 8002982:	4603      	mov	r3, r0
 8002984:	4642      	mov	r2, r8
 8002986:	189b      	adds	r3, r3, r2
 8002988:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800298c:	464b      	mov	r3, r9
 800298e:	460a      	mov	r2, r1
 8002990:	eb42 0303 	adc.w	r3, r2, r3
 8002994:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002998:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	2200      	movs	r2, #0
 80029a0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80029a4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80029a8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80029ac:	460b      	mov	r3, r1
 80029ae:	18db      	adds	r3, r3, r3
 80029b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80029b2:	4613      	mov	r3, r2
 80029b4:	eb42 0303 	adc.w	r3, r2, r3
 80029b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80029ba:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80029be:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80029c2:	f7fd fc75 	bl	80002b0 <__aeabi_uldivmod>
 80029c6:	4602      	mov	r2, r0
 80029c8:	460b      	mov	r3, r1
 80029ca:	4b0d      	ldr	r3, [pc, #52]	; (8002a00 <UART_SetConfig+0x2d4>)
 80029cc:	fba3 1302 	umull	r1, r3, r3, r2
 80029d0:	095b      	lsrs	r3, r3, #5
 80029d2:	2164      	movs	r1, #100	; 0x64
 80029d4:	fb01 f303 	mul.w	r3, r1, r3
 80029d8:	1ad3      	subs	r3, r2, r3
 80029da:	00db      	lsls	r3, r3, #3
 80029dc:	3332      	adds	r3, #50	; 0x32
 80029de:	4a08      	ldr	r2, [pc, #32]	; (8002a00 <UART_SetConfig+0x2d4>)
 80029e0:	fba2 2303 	umull	r2, r3, r2, r3
 80029e4:	095b      	lsrs	r3, r3, #5
 80029e6:	f003 0207 	and.w	r2, r3, #7
 80029ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4422      	add	r2, r4
 80029f2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80029f4:	e106      	b.n	8002c04 <UART_SetConfig+0x4d8>
 80029f6:	bf00      	nop
 80029f8:	40011000 	.word	0x40011000
 80029fc:	40011400 	.word	0x40011400
 8002a00:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002a04:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002a08:	2200      	movs	r2, #0
 8002a0a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002a0e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002a12:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002a16:	4642      	mov	r2, r8
 8002a18:	464b      	mov	r3, r9
 8002a1a:	1891      	adds	r1, r2, r2
 8002a1c:	6239      	str	r1, [r7, #32]
 8002a1e:	415b      	adcs	r3, r3
 8002a20:	627b      	str	r3, [r7, #36]	; 0x24
 8002a22:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002a26:	4641      	mov	r1, r8
 8002a28:	1854      	adds	r4, r2, r1
 8002a2a:	4649      	mov	r1, r9
 8002a2c:	eb43 0501 	adc.w	r5, r3, r1
 8002a30:	f04f 0200 	mov.w	r2, #0
 8002a34:	f04f 0300 	mov.w	r3, #0
 8002a38:	00eb      	lsls	r3, r5, #3
 8002a3a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002a3e:	00e2      	lsls	r2, r4, #3
 8002a40:	4614      	mov	r4, r2
 8002a42:	461d      	mov	r5, r3
 8002a44:	4643      	mov	r3, r8
 8002a46:	18e3      	adds	r3, r4, r3
 8002a48:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002a4c:	464b      	mov	r3, r9
 8002a4e:	eb45 0303 	adc.w	r3, r5, r3
 8002a52:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002a56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002a62:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002a66:	f04f 0200 	mov.w	r2, #0
 8002a6a:	f04f 0300 	mov.w	r3, #0
 8002a6e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002a72:	4629      	mov	r1, r5
 8002a74:	008b      	lsls	r3, r1, #2
 8002a76:	4621      	mov	r1, r4
 8002a78:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002a7c:	4621      	mov	r1, r4
 8002a7e:	008a      	lsls	r2, r1, #2
 8002a80:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002a84:	f7fd fc14 	bl	80002b0 <__aeabi_uldivmod>
 8002a88:	4602      	mov	r2, r0
 8002a8a:	460b      	mov	r3, r1
 8002a8c:	4b60      	ldr	r3, [pc, #384]	; (8002c10 <UART_SetConfig+0x4e4>)
 8002a8e:	fba3 2302 	umull	r2, r3, r3, r2
 8002a92:	095b      	lsrs	r3, r3, #5
 8002a94:	011c      	lsls	r4, r3, #4
 8002a96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002aa0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002aa4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002aa8:	4642      	mov	r2, r8
 8002aaa:	464b      	mov	r3, r9
 8002aac:	1891      	adds	r1, r2, r2
 8002aae:	61b9      	str	r1, [r7, #24]
 8002ab0:	415b      	adcs	r3, r3
 8002ab2:	61fb      	str	r3, [r7, #28]
 8002ab4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002ab8:	4641      	mov	r1, r8
 8002aba:	1851      	adds	r1, r2, r1
 8002abc:	6139      	str	r1, [r7, #16]
 8002abe:	4649      	mov	r1, r9
 8002ac0:	414b      	adcs	r3, r1
 8002ac2:	617b      	str	r3, [r7, #20]
 8002ac4:	f04f 0200 	mov.w	r2, #0
 8002ac8:	f04f 0300 	mov.w	r3, #0
 8002acc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002ad0:	4659      	mov	r1, fp
 8002ad2:	00cb      	lsls	r3, r1, #3
 8002ad4:	4651      	mov	r1, sl
 8002ad6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002ada:	4651      	mov	r1, sl
 8002adc:	00ca      	lsls	r2, r1, #3
 8002ade:	4610      	mov	r0, r2
 8002ae0:	4619      	mov	r1, r3
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	4642      	mov	r2, r8
 8002ae6:	189b      	adds	r3, r3, r2
 8002ae8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002aec:	464b      	mov	r3, r9
 8002aee:	460a      	mov	r2, r1
 8002af0:	eb42 0303 	adc.w	r3, r2, r3
 8002af4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002af8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	2200      	movs	r2, #0
 8002b00:	67bb      	str	r3, [r7, #120]	; 0x78
 8002b02:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002b04:	f04f 0200 	mov.w	r2, #0
 8002b08:	f04f 0300 	mov.w	r3, #0
 8002b0c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002b10:	4649      	mov	r1, r9
 8002b12:	008b      	lsls	r3, r1, #2
 8002b14:	4641      	mov	r1, r8
 8002b16:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002b1a:	4641      	mov	r1, r8
 8002b1c:	008a      	lsls	r2, r1, #2
 8002b1e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002b22:	f7fd fbc5 	bl	80002b0 <__aeabi_uldivmod>
 8002b26:	4602      	mov	r2, r0
 8002b28:	460b      	mov	r3, r1
 8002b2a:	4611      	mov	r1, r2
 8002b2c:	4b38      	ldr	r3, [pc, #224]	; (8002c10 <UART_SetConfig+0x4e4>)
 8002b2e:	fba3 2301 	umull	r2, r3, r3, r1
 8002b32:	095b      	lsrs	r3, r3, #5
 8002b34:	2264      	movs	r2, #100	; 0x64
 8002b36:	fb02 f303 	mul.w	r3, r2, r3
 8002b3a:	1acb      	subs	r3, r1, r3
 8002b3c:	011b      	lsls	r3, r3, #4
 8002b3e:	3332      	adds	r3, #50	; 0x32
 8002b40:	4a33      	ldr	r2, [pc, #204]	; (8002c10 <UART_SetConfig+0x4e4>)
 8002b42:	fba2 2303 	umull	r2, r3, r2, r3
 8002b46:	095b      	lsrs	r3, r3, #5
 8002b48:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b4c:	441c      	add	r4, r3
 8002b4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002b52:	2200      	movs	r2, #0
 8002b54:	673b      	str	r3, [r7, #112]	; 0x70
 8002b56:	677a      	str	r2, [r7, #116]	; 0x74
 8002b58:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002b5c:	4642      	mov	r2, r8
 8002b5e:	464b      	mov	r3, r9
 8002b60:	1891      	adds	r1, r2, r2
 8002b62:	60b9      	str	r1, [r7, #8]
 8002b64:	415b      	adcs	r3, r3
 8002b66:	60fb      	str	r3, [r7, #12]
 8002b68:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002b6c:	4641      	mov	r1, r8
 8002b6e:	1851      	adds	r1, r2, r1
 8002b70:	6039      	str	r1, [r7, #0]
 8002b72:	4649      	mov	r1, r9
 8002b74:	414b      	adcs	r3, r1
 8002b76:	607b      	str	r3, [r7, #4]
 8002b78:	f04f 0200 	mov.w	r2, #0
 8002b7c:	f04f 0300 	mov.w	r3, #0
 8002b80:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002b84:	4659      	mov	r1, fp
 8002b86:	00cb      	lsls	r3, r1, #3
 8002b88:	4651      	mov	r1, sl
 8002b8a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002b8e:	4651      	mov	r1, sl
 8002b90:	00ca      	lsls	r2, r1, #3
 8002b92:	4610      	mov	r0, r2
 8002b94:	4619      	mov	r1, r3
 8002b96:	4603      	mov	r3, r0
 8002b98:	4642      	mov	r2, r8
 8002b9a:	189b      	adds	r3, r3, r2
 8002b9c:	66bb      	str	r3, [r7, #104]	; 0x68
 8002b9e:	464b      	mov	r3, r9
 8002ba0:	460a      	mov	r2, r1
 8002ba2:	eb42 0303 	adc.w	r3, r2, r3
 8002ba6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002ba8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	663b      	str	r3, [r7, #96]	; 0x60
 8002bb2:	667a      	str	r2, [r7, #100]	; 0x64
 8002bb4:	f04f 0200 	mov.w	r2, #0
 8002bb8:	f04f 0300 	mov.w	r3, #0
 8002bbc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002bc0:	4649      	mov	r1, r9
 8002bc2:	008b      	lsls	r3, r1, #2
 8002bc4:	4641      	mov	r1, r8
 8002bc6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002bca:	4641      	mov	r1, r8
 8002bcc:	008a      	lsls	r2, r1, #2
 8002bce:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002bd2:	f7fd fb6d 	bl	80002b0 <__aeabi_uldivmod>
 8002bd6:	4602      	mov	r2, r0
 8002bd8:	460b      	mov	r3, r1
 8002bda:	4b0d      	ldr	r3, [pc, #52]	; (8002c10 <UART_SetConfig+0x4e4>)
 8002bdc:	fba3 1302 	umull	r1, r3, r3, r2
 8002be0:	095b      	lsrs	r3, r3, #5
 8002be2:	2164      	movs	r1, #100	; 0x64
 8002be4:	fb01 f303 	mul.w	r3, r1, r3
 8002be8:	1ad3      	subs	r3, r2, r3
 8002bea:	011b      	lsls	r3, r3, #4
 8002bec:	3332      	adds	r3, #50	; 0x32
 8002bee:	4a08      	ldr	r2, [pc, #32]	; (8002c10 <UART_SetConfig+0x4e4>)
 8002bf0:	fba2 2303 	umull	r2, r3, r2, r3
 8002bf4:	095b      	lsrs	r3, r3, #5
 8002bf6:	f003 020f 	and.w	r2, r3, #15
 8002bfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4422      	add	r2, r4
 8002c02:	609a      	str	r2, [r3, #8]
}
 8002c04:	bf00      	nop
 8002c06:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002c10:	51eb851f 	.word	0x51eb851f

08002c14 <addtobuffer>:
char Rx_data1[10];
char Rx_data2[10];



void addtobuffer(char *str){
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b082      	sub	sp, #8
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
	if ((str[0] != '\r') && (str[0] != '\n')) {
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	781b      	ldrb	r3, [r3, #0]
 8002c20:	2b0d      	cmp	r3, #13
 8002c22:	d00f      	beq.n	8002c44 <addtobuffer+0x30>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	781b      	ldrb	r3, [r3, #0]
 8002c28:	2b0a      	cmp	r3, #10
 8002c2a:	d00b      	beq.n	8002c44 <addtobuffer+0x30>
			Rx_data1[Receptionidx] = str[0];
 8002c2c:	4b15      	ldr	r3, [pc, #84]	; (8002c84 <addtobuffer+0x70>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	687a      	ldr	r2, [r7, #4]
 8002c32:	7811      	ldrb	r1, [r2, #0]
 8002c34:	4a14      	ldr	r2, [pc, #80]	; (8002c88 <addtobuffer+0x74>)
 8002c36:	54d1      	strb	r1, [r2, r3]
			Receptionidx++;
 8002c38:	4b12      	ldr	r3, [pc, #72]	; (8002c84 <addtobuffer+0x70>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	3301      	adds	r3, #1
 8002c3e:	4a11      	ldr	r2, [pc, #68]	; (8002c84 <addtobuffer+0x70>)
 8002c40:	6013      	str	r3, [r2, #0]
 8002c42:	e018      	b.n	8002c76 <addtobuffer+0x62>
		}
	else
		{
			memcpy(Rx_data2, Rx_data1, strlen(Rx_data1));
 8002c44:	4810      	ldr	r0, [pc, #64]	; (8002c88 <addtobuffer+0x74>)
 8002c46:	f7fd fad5 	bl	80001f4 <strlen>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	461a      	mov	r2, r3
 8002c4e:	490e      	ldr	r1, [pc, #56]	; (8002c88 <addtobuffer+0x74>)
 8002c50:	480e      	ldr	r0, [pc, #56]	; (8002c8c <addtobuffer+0x78>)
 8002c52:	f000 fa1b 	bl	800308c <memcpy>
			check_command(Rx_data2);
 8002c56:	480d      	ldr	r0, [pc, #52]	; (8002c8c <addtobuffer+0x78>)
 8002c58:	f7fd fca8 	bl	80005ac <check_command>
			Receptionidx = 0;
 8002c5c:	4b09      	ldr	r3, [pc, #36]	; (8002c84 <addtobuffer+0x70>)
 8002c5e:	2200      	movs	r2, #0
 8002c60:	601a      	str	r2, [r3, #0]
			memset(Rx_data1, 0, sizeof(Rx_data1));
 8002c62:	220a      	movs	r2, #10
 8002c64:	2100      	movs	r1, #0
 8002c66:	4808      	ldr	r0, [pc, #32]	; (8002c88 <addtobuffer+0x74>)
 8002c68:	f000 f939 	bl	8002ede <memset>
			memset(Rx_data2, 0, sizeof(Rx_data2));
 8002c6c:	220a      	movs	r2, #10
 8002c6e:	2100      	movs	r1, #0
 8002c70:	4806      	ldr	r0, [pc, #24]	; (8002c8c <addtobuffer+0x78>)
 8002c72:	f000 f934 	bl	8002ede <memset>
		}
	Receive_Interrupt();
 8002c76:	f000 f823 	bl	8002cc0 <Receive_Interrupt>
}
 8002c7a:	bf00      	nop
 8002c7c:	3708      	adds	r7, #8
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}
 8002c82:	bf00      	nop
 8002c84:	2000012c 	.word	0x2000012c
 8002c88:	20000130 	.word	0x20000130
 8002c8c:	2000013c 	.word	0x2000013c

08002c90 <LED1_ON>:
#include "main.h"
#include "led_control.h"

void LED1_ON(){
 8002c90:	b580      	push	{r7, lr}
 8002c92:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_SET);
 8002c94:	2201      	movs	r2, #1
 8002c96:	2120      	movs	r1, #32
 8002c98:	4802      	ldr	r0, [pc, #8]	; (8002ca4 <LED1_ON+0x14>)
 8002c9a:	f7fe fb91 	bl	80013c0 <HAL_GPIO_WritePin>
}
 8002c9e:	bf00      	nop
 8002ca0:	bd80      	pop	{r7, pc}
 8002ca2:	bf00      	nop
 8002ca4:	40020000 	.word	0x40020000

08002ca8 <LED1_OFF>:

void LED1_OFF(){
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_RESET);
 8002cac:	2200      	movs	r2, #0
 8002cae:	2120      	movs	r1, #32
 8002cb0:	4802      	ldr	r0, [pc, #8]	; (8002cbc <LED1_OFF+0x14>)
 8002cb2:	f7fe fb85 	bl	80013c0 <HAL_GPIO_WritePin>
}
 8002cb6:	bf00      	nop
 8002cb8:	bd80      	pop	{r7, pc}
 8002cba:	bf00      	nop
 8002cbc:	40020000 	.word	0x40020000

08002cc0 <Receive_Interrupt>:
#include "usart_handler.h"
#include "addtobuffer.h"

char str[1];

void Receive_Interrupt(){
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart1, &str, sizeof(str));
 8002cc4:	2201      	movs	r2, #1
 8002cc6:	4903      	ldr	r1, [pc, #12]	; (8002cd4 <Receive_Interrupt+0x14>)
 8002cc8:	4803      	ldr	r0, [pc, #12]	; (8002cd8 <Receive_Interrupt+0x18>)
 8002cca:	f7ff f878 	bl	8001dbe <HAL_UART_Receive_IT>
}
 8002cce:	bf00      	nop
 8002cd0:	bd80      	pop	{r7, pc}
 8002cd2:	bf00      	nop
 8002cd4:	20000148 	.word	0x20000148
 8002cd8:	200000a0 	.word	0x200000a0

08002cdc <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart1){
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b082      	sub	sp, #8
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
	addtobuffer(&str);
 8002ce4:	4803      	ldr	r0, [pc, #12]	; (8002cf4 <HAL_UART_RxCpltCallback+0x18>)
 8002ce6:	f7ff ff95 	bl	8002c14 <addtobuffer>
}
 8002cea:	bf00      	nop
 8002cec:	3708      	adds	r7, #8
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}
 8002cf2:	bf00      	nop
 8002cf4:	20000148 	.word	0x20000148

08002cf8 <std>:
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	b510      	push	{r4, lr}
 8002cfc:	4604      	mov	r4, r0
 8002cfe:	e9c0 3300 	strd	r3, r3, [r0]
 8002d02:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002d06:	6083      	str	r3, [r0, #8]
 8002d08:	8181      	strh	r1, [r0, #12]
 8002d0a:	6643      	str	r3, [r0, #100]	; 0x64
 8002d0c:	81c2      	strh	r2, [r0, #14]
 8002d0e:	6183      	str	r3, [r0, #24]
 8002d10:	4619      	mov	r1, r3
 8002d12:	2208      	movs	r2, #8
 8002d14:	305c      	adds	r0, #92	; 0x5c
 8002d16:	f000 f8e2 	bl	8002ede <memset>
 8002d1a:	4b05      	ldr	r3, [pc, #20]	; (8002d30 <std+0x38>)
 8002d1c:	6263      	str	r3, [r4, #36]	; 0x24
 8002d1e:	4b05      	ldr	r3, [pc, #20]	; (8002d34 <std+0x3c>)
 8002d20:	62a3      	str	r3, [r4, #40]	; 0x28
 8002d22:	4b05      	ldr	r3, [pc, #20]	; (8002d38 <std+0x40>)
 8002d24:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002d26:	4b05      	ldr	r3, [pc, #20]	; (8002d3c <std+0x44>)
 8002d28:	6224      	str	r4, [r4, #32]
 8002d2a:	6323      	str	r3, [r4, #48]	; 0x30
 8002d2c:	bd10      	pop	{r4, pc}
 8002d2e:	bf00      	nop
 8002d30:	08002e59 	.word	0x08002e59
 8002d34:	08002e7b 	.word	0x08002e7b
 8002d38:	08002eb3 	.word	0x08002eb3
 8002d3c:	08002ed7 	.word	0x08002ed7

08002d40 <stdio_exit_handler>:
 8002d40:	4a02      	ldr	r2, [pc, #8]	; (8002d4c <stdio_exit_handler+0xc>)
 8002d42:	4903      	ldr	r1, [pc, #12]	; (8002d50 <stdio_exit_handler+0x10>)
 8002d44:	4803      	ldr	r0, [pc, #12]	; (8002d54 <stdio_exit_handler+0x14>)
 8002d46:	f000 b869 	b.w	8002e1c <_fwalk_sglue>
 8002d4a:	bf00      	nop
 8002d4c:	20000024 	.word	0x20000024
 8002d50:	080033f1 	.word	0x080033f1
 8002d54:	20000030 	.word	0x20000030

08002d58 <cleanup_stdio>:
 8002d58:	6841      	ldr	r1, [r0, #4]
 8002d5a:	4b0c      	ldr	r3, [pc, #48]	; (8002d8c <cleanup_stdio+0x34>)
 8002d5c:	4299      	cmp	r1, r3
 8002d5e:	b510      	push	{r4, lr}
 8002d60:	4604      	mov	r4, r0
 8002d62:	d001      	beq.n	8002d68 <cleanup_stdio+0x10>
 8002d64:	f000 fb44 	bl	80033f0 <_fflush_r>
 8002d68:	68a1      	ldr	r1, [r4, #8]
 8002d6a:	4b09      	ldr	r3, [pc, #36]	; (8002d90 <cleanup_stdio+0x38>)
 8002d6c:	4299      	cmp	r1, r3
 8002d6e:	d002      	beq.n	8002d76 <cleanup_stdio+0x1e>
 8002d70:	4620      	mov	r0, r4
 8002d72:	f000 fb3d 	bl	80033f0 <_fflush_r>
 8002d76:	68e1      	ldr	r1, [r4, #12]
 8002d78:	4b06      	ldr	r3, [pc, #24]	; (8002d94 <cleanup_stdio+0x3c>)
 8002d7a:	4299      	cmp	r1, r3
 8002d7c:	d004      	beq.n	8002d88 <cleanup_stdio+0x30>
 8002d7e:	4620      	mov	r0, r4
 8002d80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002d84:	f000 bb34 	b.w	80033f0 <_fflush_r>
 8002d88:	bd10      	pop	{r4, pc}
 8002d8a:	bf00      	nop
 8002d8c:	2000014c 	.word	0x2000014c
 8002d90:	200001b4 	.word	0x200001b4
 8002d94:	2000021c 	.word	0x2000021c

08002d98 <global_stdio_init.part.0>:
 8002d98:	b510      	push	{r4, lr}
 8002d9a:	4b0b      	ldr	r3, [pc, #44]	; (8002dc8 <global_stdio_init.part.0+0x30>)
 8002d9c:	4c0b      	ldr	r4, [pc, #44]	; (8002dcc <global_stdio_init.part.0+0x34>)
 8002d9e:	4a0c      	ldr	r2, [pc, #48]	; (8002dd0 <global_stdio_init.part.0+0x38>)
 8002da0:	601a      	str	r2, [r3, #0]
 8002da2:	4620      	mov	r0, r4
 8002da4:	2200      	movs	r2, #0
 8002da6:	2104      	movs	r1, #4
 8002da8:	f7ff ffa6 	bl	8002cf8 <std>
 8002dac:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8002db0:	2201      	movs	r2, #1
 8002db2:	2109      	movs	r1, #9
 8002db4:	f7ff ffa0 	bl	8002cf8 <std>
 8002db8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8002dbc:	2202      	movs	r2, #2
 8002dbe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002dc2:	2112      	movs	r1, #18
 8002dc4:	f7ff bf98 	b.w	8002cf8 <std>
 8002dc8:	20000284 	.word	0x20000284
 8002dcc:	2000014c 	.word	0x2000014c
 8002dd0:	08002d41 	.word	0x08002d41

08002dd4 <__sfp_lock_acquire>:
 8002dd4:	4801      	ldr	r0, [pc, #4]	; (8002ddc <__sfp_lock_acquire+0x8>)
 8002dd6:	f000 b957 	b.w	8003088 <__retarget_lock_acquire_recursive>
 8002dda:	bf00      	nop
 8002ddc:	2000028d 	.word	0x2000028d

08002de0 <__sfp_lock_release>:
 8002de0:	4801      	ldr	r0, [pc, #4]	; (8002de8 <__sfp_lock_release+0x8>)
 8002de2:	f000 b952 	b.w	800308a <__retarget_lock_release_recursive>
 8002de6:	bf00      	nop
 8002de8:	2000028d 	.word	0x2000028d

08002dec <__sinit>:
 8002dec:	b510      	push	{r4, lr}
 8002dee:	4604      	mov	r4, r0
 8002df0:	f7ff fff0 	bl	8002dd4 <__sfp_lock_acquire>
 8002df4:	6a23      	ldr	r3, [r4, #32]
 8002df6:	b11b      	cbz	r3, 8002e00 <__sinit+0x14>
 8002df8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002dfc:	f7ff bff0 	b.w	8002de0 <__sfp_lock_release>
 8002e00:	4b04      	ldr	r3, [pc, #16]	; (8002e14 <__sinit+0x28>)
 8002e02:	6223      	str	r3, [r4, #32]
 8002e04:	4b04      	ldr	r3, [pc, #16]	; (8002e18 <__sinit+0x2c>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d1f5      	bne.n	8002df8 <__sinit+0xc>
 8002e0c:	f7ff ffc4 	bl	8002d98 <global_stdio_init.part.0>
 8002e10:	e7f2      	b.n	8002df8 <__sinit+0xc>
 8002e12:	bf00      	nop
 8002e14:	08002d59 	.word	0x08002d59
 8002e18:	20000284 	.word	0x20000284

08002e1c <_fwalk_sglue>:
 8002e1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002e20:	4607      	mov	r7, r0
 8002e22:	4688      	mov	r8, r1
 8002e24:	4614      	mov	r4, r2
 8002e26:	2600      	movs	r6, #0
 8002e28:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002e2c:	f1b9 0901 	subs.w	r9, r9, #1
 8002e30:	d505      	bpl.n	8002e3e <_fwalk_sglue+0x22>
 8002e32:	6824      	ldr	r4, [r4, #0]
 8002e34:	2c00      	cmp	r4, #0
 8002e36:	d1f7      	bne.n	8002e28 <_fwalk_sglue+0xc>
 8002e38:	4630      	mov	r0, r6
 8002e3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002e3e:	89ab      	ldrh	r3, [r5, #12]
 8002e40:	2b01      	cmp	r3, #1
 8002e42:	d907      	bls.n	8002e54 <_fwalk_sglue+0x38>
 8002e44:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002e48:	3301      	adds	r3, #1
 8002e4a:	d003      	beq.n	8002e54 <_fwalk_sglue+0x38>
 8002e4c:	4629      	mov	r1, r5
 8002e4e:	4638      	mov	r0, r7
 8002e50:	47c0      	blx	r8
 8002e52:	4306      	orrs	r6, r0
 8002e54:	3568      	adds	r5, #104	; 0x68
 8002e56:	e7e9      	b.n	8002e2c <_fwalk_sglue+0x10>

08002e58 <__sread>:
 8002e58:	b510      	push	{r4, lr}
 8002e5a:	460c      	mov	r4, r1
 8002e5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002e60:	f000 f8c4 	bl	8002fec <_read_r>
 8002e64:	2800      	cmp	r0, #0
 8002e66:	bfab      	itete	ge
 8002e68:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002e6a:	89a3      	ldrhlt	r3, [r4, #12]
 8002e6c:	181b      	addge	r3, r3, r0
 8002e6e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002e72:	bfac      	ite	ge
 8002e74:	6563      	strge	r3, [r4, #84]	; 0x54
 8002e76:	81a3      	strhlt	r3, [r4, #12]
 8002e78:	bd10      	pop	{r4, pc}

08002e7a <__swrite>:
 8002e7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002e7e:	461f      	mov	r7, r3
 8002e80:	898b      	ldrh	r3, [r1, #12]
 8002e82:	05db      	lsls	r3, r3, #23
 8002e84:	4605      	mov	r5, r0
 8002e86:	460c      	mov	r4, r1
 8002e88:	4616      	mov	r6, r2
 8002e8a:	d505      	bpl.n	8002e98 <__swrite+0x1e>
 8002e8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002e90:	2302      	movs	r3, #2
 8002e92:	2200      	movs	r2, #0
 8002e94:	f000 f898 	bl	8002fc8 <_lseek_r>
 8002e98:	89a3      	ldrh	r3, [r4, #12]
 8002e9a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002e9e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002ea2:	81a3      	strh	r3, [r4, #12]
 8002ea4:	4632      	mov	r2, r6
 8002ea6:	463b      	mov	r3, r7
 8002ea8:	4628      	mov	r0, r5
 8002eaa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002eae:	f000 b8af 	b.w	8003010 <_write_r>

08002eb2 <__sseek>:
 8002eb2:	b510      	push	{r4, lr}
 8002eb4:	460c      	mov	r4, r1
 8002eb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002eba:	f000 f885 	bl	8002fc8 <_lseek_r>
 8002ebe:	1c43      	adds	r3, r0, #1
 8002ec0:	89a3      	ldrh	r3, [r4, #12]
 8002ec2:	bf15      	itete	ne
 8002ec4:	6560      	strne	r0, [r4, #84]	; 0x54
 8002ec6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002eca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002ece:	81a3      	strheq	r3, [r4, #12]
 8002ed0:	bf18      	it	ne
 8002ed2:	81a3      	strhne	r3, [r4, #12]
 8002ed4:	bd10      	pop	{r4, pc}

08002ed6 <__sclose>:
 8002ed6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002eda:	f000 b865 	b.w	8002fa8 <_close_r>

08002ede <memset>:
 8002ede:	4402      	add	r2, r0
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d100      	bne.n	8002ee8 <memset+0xa>
 8002ee6:	4770      	bx	lr
 8002ee8:	f803 1b01 	strb.w	r1, [r3], #1
 8002eec:	e7f9      	b.n	8002ee2 <memset+0x4>
	...

08002ef0 <strtok>:
 8002ef0:	4b16      	ldr	r3, [pc, #88]	; (8002f4c <strtok+0x5c>)
 8002ef2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002ef4:	681e      	ldr	r6, [r3, #0]
 8002ef6:	6c74      	ldr	r4, [r6, #68]	; 0x44
 8002ef8:	4605      	mov	r5, r0
 8002efa:	b9fc      	cbnz	r4, 8002f3c <strtok+0x4c>
 8002efc:	2050      	movs	r0, #80	; 0x50
 8002efe:	9101      	str	r1, [sp, #4]
 8002f00:	f000 f93c 	bl	800317c <malloc>
 8002f04:	9901      	ldr	r1, [sp, #4]
 8002f06:	6470      	str	r0, [r6, #68]	; 0x44
 8002f08:	4602      	mov	r2, r0
 8002f0a:	b920      	cbnz	r0, 8002f16 <strtok+0x26>
 8002f0c:	4b10      	ldr	r3, [pc, #64]	; (8002f50 <strtok+0x60>)
 8002f0e:	4811      	ldr	r0, [pc, #68]	; (8002f54 <strtok+0x64>)
 8002f10:	215b      	movs	r1, #91	; 0x5b
 8002f12:	f000 f8c9 	bl	80030a8 <__assert_func>
 8002f16:	e9c0 4400 	strd	r4, r4, [r0]
 8002f1a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8002f1e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8002f22:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8002f26:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8002f2a:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8002f2e:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8002f32:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8002f36:	6184      	str	r4, [r0, #24]
 8002f38:	7704      	strb	r4, [r0, #28]
 8002f3a:	6244      	str	r4, [r0, #36]	; 0x24
 8002f3c:	6c72      	ldr	r2, [r6, #68]	; 0x44
 8002f3e:	2301      	movs	r3, #1
 8002f40:	4628      	mov	r0, r5
 8002f42:	b002      	add	sp, #8
 8002f44:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8002f48:	f000 b806 	b.w	8002f58 <__strtok_r>
 8002f4c:	2000007c 	.word	0x2000007c
 8002f50:	08003d38 	.word	0x08003d38
 8002f54:	08003d4f 	.word	0x08003d4f

08002f58 <__strtok_r>:
 8002f58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f5a:	b908      	cbnz	r0, 8002f60 <__strtok_r+0x8>
 8002f5c:	6810      	ldr	r0, [r2, #0]
 8002f5e:	b188      	cbz	r0, 8002f84 <__strtok_r+0x2c>
 8002f60:	4604      	mov	r4, r0
 8002f62:	4620      	mov	r0, r4
 8002f64:	f814 5b01 	ldrb.w	r5, [r4], #1
 8002f68:	460f      	mov	r7, r1
 8002f6a:	f817 6b01 	ldrb.w	r6, [r7], #1
 8002f6e:	b91e      	cbnz	r6, 8002f78 <__strtok_r+0x20>
 8002f70:	b965      	cbnz	r5, 8002f8c <__strtok_r+0x34>
 8002f72:	6015      	str	r5, [r2, #0]
 8002f74:	4628      	mov	r0, r5
 8002f76:	e005      	b.n	8002f84 <__strtok_r+0x2c>
 8002f78:	42b5      	cmp	r5, r6
 8002f7a:	d1f6      	bne.n	8002f6a <__strtok_r+0x12>
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d1f0      	bne.n	8002f62 <__strtok_r+0xa>
 8002f80:	6014      	str	r4, [r2, #0]
 8002f82:	7003      	strb	r3, [r0, #0]
 8002f84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f86:	461c      	mov	r4, r3
 8002f88:	e00c      	b.n	8002fa4 <__strtok_r+0x4c>
 8002f8a:	b915      	cbnz	r5, 8002f92 <__strtok_r+0x3a>
 8002f8c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8002f90:	460e      	mov	r6, r1
 8002f92:	f816 5b01 	ldrb.w	r5, [r6], #1
 8002f96:	42ab      	cmp	r3, r5
 8002f98:	d1f7      	bne.n	8002f8a <__strtok_r+0x32>
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d0f3      	beq.n	8002f86 <__strtok_r+0x2e>
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	f804 3c01 	strb.w	r3, [r4, #-1]
 8002fa4:	6014      	str	r4, [r2, #0]
 8002fa6:	e7ed      	b.n	8002f84 <__strtok_r+0x2c>

08002fa8 <_close_r>:
 8002fa8:	b538      	push	{r3, r4, r5, lr}
 8002faa:	4d06      	ldr	r5, [pc, #24]	; (8002fc4 <_close_r+0x1c>)
 8002fac:	2300      	movs	r3, #0
 8002fae:	4604      	mov	r4, r0
 8002fb0:	4608      	mov	r0, r1
 8002fb2:	602b      	str	r3, [r5, #0]
 8002fb4:	f7fd fceb 	bl	800098e <_close>
 8002fb8:	1c43      	adds	r3, r0, #1
 8002fba:	d102      	bne.n	8002fc2 <_close_r+0x1a>
 8002fbc:	682b      	ldr	r3, [r5, #0]
 8002fbe:	b103      	cbz	r3, 8002fc2 <_close_r+0x1a>
 8002fc0:	6023      	str	r3, [r4, #0]
 8002fc2:	bd38      	pop	{r3, r4, r5, pc}
 8002fc4:	20000288 	.word	0x20000288

08002fc8 <_lseek_r>:
 8002fc8:	b538      	push	{r3, r4, r5, lr}
 8002fca:	4d07      	ldr	r5, [pc, #28]	; (8002fe8 <_lseek_r+0x20>)
 8002fcc:	4604      	mov	r4, r0
 8002fce:	4608      	mov	r0, r1
 8002fd0:	4611      	mov	r1, r2
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	602a      	str	r2, [r5, #0]
 8002fd6:	461a      	mov	r2, r3
 8002fd8:	f7fd fd00 	bl	80009dc <_lseek>
 8002fdc:	1c43      	adds	r3, r0, #1
 8002fde:	d102      	bne.n	8002fe6 <_lseek_r+0x1e>
 8002fe0:	682b      	ldr	r3, [r5, #0]
 8002fe2:	b103      	cbz	r3, 8002fe6 <_lseek_r+0x1e>
 8002fe4:	6023      	str	r3, [r4, #0]
 8002fe6:	bd38      	pop	{r3, r4, r5, pc}
 8002fe8:	20000288 	.word	0x20000288

08002fec <_read_r>:
 8002fec:	b538      	push	{r3, r4, r5, lr}
 8002fee:	4d07      	ldr	r5, [pc, #28]	; (800300c <_read_r+0x20>)
 8002ff0:	4604      	mov	r4, r0
 8002ff2:	4608      	mov	r0, r1
 8002ff4:	4611      	mov	r1, r2
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	602a      	str	r2, [r5, #0]
 8002ffa:	461a      	mov	r2, r3
 8002ffc:	f7fd fc8e 	bl	800091c <_read>
 8003000:	1c43      	adds	r3, r0, #1
 8003002:	d102      	bne.n	800300a <_read_r+0x1e>
 8003004:	682b      	ldr	r3, [r5, #0]
 8003006:	b103      	cbz	r3, 800300a <_read_r+0x1e>
 8003008:	6023      	str	r3, [r4, #0]
 800300a:	bd38      	pop	{r3, r4, r5, pc}
 800300c:	20000288 	.word	0x20000288

08003010 <_write_r>:
 8003010:	b538      	push	{r3, r4, r5, lr}
 8003012:	4d07      	ldr	r5, [pc, #28]	; (8003030 <_write_r+0x20>)
 8003014:	4604      	mov	r4, r0
 8003016:	4608      	mov	r0, r1
 8003018:	4611      	mov	r1, r2
 800301a:	2200      	movs	r2, #0
 800301c:	602a      	str	r2, [r5, #0]
 800301e:	461a      	mov	r2, r3
 8003020:	f7fd fc99 	bl	8000956 <_write>
 8003024:	1c43      	adds	r3, r0, #1
 8003026:	d102      	bne.n	800302e <_write_r+0x1e>
 8003028:	682b      	ldr	r3, [r5, #0]
 800302a:	b103      	cbz	r3, 800302e <_write_r+0x1e>
 800302c:	6023      	str	r3, [r4, #0]
 800302e:	bd38      	pop	{r3, r4, r5, pc}
 8003030:	20000288 	.word	0x20000288

08003034 <__errno>:
 8003034:	4b01      	ldr	r3, [pc, #4]	; (800303c <__errno+0x8>)
 8003036:	6818      	ldr	r0, [r3, #0]
 8003038:	4770      	bx	lr
 800303a:	bf00      	nop
 800303c:	2000007c 	.word	0x2000007c

08003040 <__libc_init_array>:
 8003040:	b570      	push	{r4, r5, r6, lr}
 8003042:	4d0d      	ldr	r5, [pc, #52]	; (8003078 <__libc_init_array+0x38>)
 8003044:	4c0d      	ldr	r4, [pc, #52]	; (800307c <__libc_init_array+0x3c>)
 8003046:	1b64      	subs	r4, r4, r5
 8003048:	10a4      	asrs	r4, r4, #2
 800304a:	2600      	movs	r6, #0
 800304c:	42a6      	cmp	r6, r4
 800304e:	d109      	bne.n	8003064 <__libc_init_array+0x24>
 8003050:	4d0b      	ldr	r5, [pc, #44]	; (8003080 <__libc_init_array+0x40>)
 8003052:	4c0c      	ldr	r4, [pc, #48]	; (8003084 <__libc_init_array+0x44>)
 8003054:	f000 fe4e 	bl	8003cf4 <_init>
 8003058:	1b64      	subs	r4, r4, r5
 800305a:	10a4      	asrs	r4, r4, #2
 800305c:	2600      	movs	r6, #0
 800305e:	42a6      	cmp	r6, r4
 8003060:	d105      	bne.n	800306e <__libc_init_array+0x2e>
 8003062:	bd70      	pop	{r4, r5, r6, pc}
 8003064:	f855 3b04 	ldr.w	r3, [r5], #4
 8003068:	4798      	blx	r3
 800306a:	3601      	adds	r6, #1
 800306c:	e7ee      	b.n	800304c <__libc_init_array+0xc>
 800306e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003072:	4798      	blx	r3
 8003074:	3601      	adds	r6, #1
 8003076:	e7f2      	b.n	800305e <__libc_init_array+0x1e>
 8003078:	08003e20 	.word	0x08003e20
 800307c:	08003e20 	.word	0x08003e20
 8003080:	08003e20 	.word	0x08003e20
 8003084:	08003e24 	.word	0x08003e24

08003088 <__retarget_lock_acquire_recursive>:
 8003088:	4770      	bx	lr

0800308a <__retarget_lock_release_recursive>:
 800308a:	4770      	bx	lr

0800308c <memcpy>:
 800308c:	440a      	add	r2, r1
 800308e:	4291      	cmp	r1, r2
 8003090:	f100 33ff 	add.w	r3, r0, #4294967295
 8003094:	d100      	bne.n	8003098 <memcpy+0xc>
 8003096:	4770      	bx	lr
 8003098:	b510      	push	{r4, lr}
 800309a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800309e:	f803 4f01 	strb.w	r4, [r3, #1]!
 80030a2:	4291      	cmp	r1, r2
 80030a4:	d1f9      	bne.n	800309a <memcpy+0xe>
 80030a6:	bd10      	pop	{r4, pc}

080030a8 <__assert_func>:
 80030a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80030aa:	4614      	mov	r4, r2
 80030ac:	461a      	mov	r2, r3
 80030ae:	4b09      	ldr	r3, [pc, #36]	; (80030d4 <__assert_func+0x2c>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4605      	mov	r5, r0
 80030b4:	68d8      	ldr	r0, [r3, #12]
 80030b6:	b14c      	cbz	r4, 80030cc <__assert_func+0x24>
 80030b8:	4b07      	ldr	r3, [pc, #28]	; (80030d8 <__assert_func+0x30>)
 80030ba:	9100      	str	r1, [sp, #0]
 80030bc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80030c0:	4906      	ldr	r1, [pc, #24]	; (80030dc <__assert_func+0x34>)
 80030c2:	462b      	mov	r3, r5
 80030c4:	f000 f9bc 	bl	8003440 <fiprintf>
 80030c8:	f000 f9dc 	bl	8003484 <abort>
 80030cc:	4b04      	ldr	r3, [pc, #16]	; (80030e0 <__assert_func+0x38>)
 80030ce:	461c      	mov	r4, r3
 80030d0:	e7f3      	b.n	80030ba <__assert_func+0x12>
 80030d2:	bf00      	nop
 80030d4:	2000007c 	.word	0x2000007c
 80030d8:	08003da9 	.word	0x08003da9
 80030dc:	08003db6 	.word	0x08003db6
 80030e0:	08003de4 	.word	0x08003de4

080030e4 <_free_r>:
 80030e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80030e6:	2900      	cmp	r1, #0
 80030e8:	d044      	beq.n	8003174 <_free_r+0x90>
 80030ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80030ee:	9001      	str	r0, [sp, #4]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	f1a1 0404 	sub.w	r4, r1, #4
 80030f6:	bfb8      	it	lt
 80030f8:	18e4      	addlt	r4, r4, r3
 80030fa:	f000 f8e7 	bl	80032cc <__malloc_lock>
 80030fe:	4a1e      	ldr	r2, [pc, #120]	; (8003178 <_free_r+0x94>)
 8003100:	9801      	ldr	r0, [sp, #4]
 8003102:	6813      	ldr	r3, [r2, #0]
 8003104:	b933      	cbnz	r3, 8003114 <_free_r+0x30>
 8003106:	6063      	str	r3, [r4, #4]
 8003108:	6014      	str	r4, [r2, #0]
 800310a:	b003      	add	sp, #12
 800310c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003110:	f000 b8e2 	b.w	80032d8 <__malloc_unlock>
 8003114:	42a3      	cmp	r3, r4
 8003116:	d908      	bls.n	800312a <_free_r+0x46>
 8003118:	6825      	ldr	r5, [r4, #0]
 800311a:	1961      	adds	r1, r4, r5
 800311c:	428b      	cmp	r3, r1
 800311e:	bf01      	itttt	eq
 8003120:	6819      	ldreq	r1, [r3, #0]
 8003122:	685b      	ldreq	r3, [r3, #4]
 8003124:	1949      	addeq	r1, r1, r5
 8003126:	6021      	streq	r1, [r4, #0]
 8003128:	e7ed      	b.n	8003106 <_free_r+0x22>
 800312a:	461a      	mov	r2, r3
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	b10b      	cbz	r3, 8003134 <_free_r+0x50>
 8003130:	42a3      	cmp	r3, r4
 8003132:	d9fa      	bls.n	800312a <_free_r+0x46>
 8003134:	6811      	ldr	r1, [r2, #0]
 8003136:	1855      	adds	r5, r2, r1
 8003138:	42a5      	cmp	r5, r4
 800313a:	d10b      	bne.n	8003154 <_free_r+0x70>
 800313c:	6824      	ldr	r4, [r4, #0]
 800313e:	4421      	add	r1, r4
 8003140:	1854      	adds	r4, r2, r1
 8003142:	42a3      	cmp	r3, r4
 8003144:	6011      	str	r1, [r2, #0]
 8003146:	d1e0      	bne.n	800310a <_free_r+0x26>
 8003148:	681c      	ldr	r4, [r3, #0]
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	6053      	str	r3, [r2, #4]
 800314e:	440c      	add	r4, r1
 8003150:	6014      	str	r4, [r2, #0]
 8003152:	e7da      	b.n	800310a <_free_r+0x26>
 8003154:	d902      	bls.n	800315c <_free_r+0x78>
 8003156:	230c      	movs	r3, #12
 8003158:	6003      	str	r3, [r0, #0]
 800315a:	e7d6      	b.n	800310a <_free_r+0x26>
 800315c:	6825      	ldr	r5, [r4, #0]
 800315e:	1961      	adds	r1, r4, r5
 8003160:	428b      	cmp	r3, r1
 8003162:	bf04      	itt	eq
 8003164:	6819      	ldreq	r1, [r3, #0]
 8003166:	685b      	ldreq	r3, [r3, #4]
 8003168:	6063      	str	r3, [r4, #4]
 800316a:	bf04      	itt	eq
 800316c:	1949      	addeq	r1, r1, r5
 800316e:	6021      	streq	r1, [r4, #0]
 8003170:	6054      	str	r4, [r2, #4]
 8003172:	e7ca      	b.n	800310a <_free_r+0x26>
 8003174:	b003      	add	sp, #12
 8003176:	bd30      	pop	{r4, r5, pc}
 8003178:	20000290 	.word	0x20000290

0800317c <malloc>:
 800317c:	4b02      	ldr	r3, [pc, #8]	; (8003188 <malloc+0xc>)
 800317e:	4601      	mov	r1, r0
 8003180:	6818      	ldr	r0, [r3, #0]
 8003182:	f000 b823 	b.w	80031cc <_malloc_r>
 8003186:	bf00      	nop
 8003188:	2000007c 	.word	0x2000007c

0800318c <sbrk_aligned>:
 800318c:	b570      	push	{r4, r5, r6, lr}
 800318e:	4e0e      	ldr	r6, [pc, #56]	; (80031c8 <sbrk_aligned+0x3c>)
 8003190:	460c      	mov	r4, r1
 8003192:	6831      	ldr	r1, [r6, #0]
 8003194:	4605      	mov	r5, r0
 8003196:	b911      	cbnz	r1, 800319e <sbrk_aligned+0x12>
 8003198:	f000 f964 	bl	8003464 <_sbrk_r>
 800319c:	6030      	str	r0, [r6, #0]
 800319e:	4621      	mov	r1, r4
 80031a0:	4628      	mov	r0, r5
 80031a2:	f000 f95f 	bl	8003464 <_sbrk_r>
 80031a6:	1c43      	adds	r3, r0, #1
 80031a8:	d00a      	beq.n	80031c0 <sbrk_aligned+0x34>
 80031aa:	1cc4      	adds	r4, r0, #3
 80031ac:	f024 0403 	bic.w	r4, r4, #3
 80031b0:	42a0      	cmp	r0, r4
 80031b2:	d007      	beq.n	80031c4 <sbrk_aligned+0x38>
 80031b4:	1a21      	subs	r1, r4, r0
 80031b6:	4628      	mov	r0, r5
 80031b8:	f000 f954 	bl	8003464 <_sbrk_r>
 80031bc:	3001      	adds	r0, #1
 80031be:	d101      	bne.n	80031c4 <sbrk_aligned+0x38>
 80031c0:	f04f 34ff 	mov.w	r4, #4294967295
 80031c4:	4620      	mov	r0, r4
 80031c6:	bd70      	pop	{r4, r5, r6, pc}
 80031c8:	20000294 	.word	0x20000294

080031cc <_malloc_r>:
 80031cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80031d0:	1ccd      	adds	r5, r1, #3
 80031d2:	f025 0503 	bic.w	r5, r5, #3
 80031d6:	3508      	adds	r5, #8
 80031d8:	2d0c      	cmp	r5, #12
 80031da:	bf38      	it	cc
 80031dc:	250c      	movcc	r5, #12
 80031de:	2d00      	cmp	r5, #0
 80031e0:	4607      	mov	r7, r0
 80031e2:	db01      	blt.n	80031e8 <_malloc_r+0x1c>
 80031e4:	42a9      	cmp	r1, r5
 80031e6:	d905      	bls.n	80031f4 <_malloc_r+0x28>
 80031e8:	230c      	movs	r3, #12
 80031ea:	603b      	str	r3, [r7, #0]
 80031ec:	2600      	movs	r6, #0
 80031ee:	4630      	mov	r0, r6
 80031f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80031f4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80032c8 <_malloc_r+0xfc>
 80031f8:	f000 f868 	bl	80032cc <__malloc_lock>
 80031fc:	f8d8 3000 	ldr.w	r3, [r8]
 8003200:	461c      	mov	r4, r3
 8003202:	bb5c      	cbnz	r4, 800325c <_malloc_r+0x90>
 8003204:	4629      	mov	r1, r5
 8003206:	4638      	mov	r0, r7
 8003208:	f7ff ffc0 	bl	800318c <sbrk_aligned>
 800320c:	1c43      	adds	r3, r0, #1
 800320e:	4604      	mov	r4, r0
 8003210:	d155      	bne.n	80032be <_malloc_r+0xf2>
 8003212:	f8d8 4000 	ldr.w	r4, [r8]
 8003216:	4626      	mov	r6, r4
 8003218:	2e00      	cmp	r6, #0
 800321a:	d145      	bne.n	80032a8 <_malloc_r+0xdc>
 800321c:	2c00      	cmp	r4, #0
 800321e:	d048      	beq.n	80032b2 <_malloc_r+0xe6>
 8003220:	6823      	ldr	r3, [r4, #0]
 8003222:	4631      	mov	r1, r6
 8003224:	4638      	mov	r0, r7
 8003226:	eb04 0903 	add.w	r9, r4, r3
 800322a:	f000 f91b 	bl	8003464 <_sbrk_r>
 800322e:	4581      	cmp	r9, r0
 8003230:	d13f      	bne.n	80032b2 <_malloc_r+0xe6>
 8003232:	6821      	ldr	r1, [r4, #0]
 8003234:	1a6d      	subs	r5, r5, r1
 8003236:	4629      	mov	r1, r5
 8003238:	4638      	mov	r0, r7
 800323a:	f7ff ffa7 	bl	800318c <sbrk_aligned>
 800323e:	3001      	adds	r0, #1
 8003240:	d037      	beq.n	80032b2 <_malloc_r+0xe6>
 8003242:	6823      	ldr	r3, [r4, #0]
 8003244:	442b      	add	r3, r5
 8003246:	6023      	str	r3, [r4, #0]
 8003248:	f8d8 3000 	ldr.w	r3, [r8]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d038      	beq.n	80032c2 <_malloc_r+0xf6>
 8003250:	685a      	ldr	r2, [r3, #4]
 8003252:	42a2      	cmp	r2, r4
 8003254:	d12b      	bne.n	80032ae <_malloc_r+0xe2>
 8003256:	2200      	movs	r2, #0
 8003258:	605a      	str	r2, [r3, #4]
 800325a:	e00f      	b.n	800327c <_malloc_r+0xb0>
 800325c:	6822      	ldr	r2, [r4, #0]
 800325e:	1b52      	subs	r2, r2, r5
 8003260:	d41f      	bmi.n	80032a2 <_malloc_r+0xd6>
 8003262:	2a0b      	cmp	r2, #11
 8003264:	d917      	bls.n	8003296 <_malloc_r+0xca>
 8003266:	1961      	adds	r1, r4, r5
 8003268:	42a3      	cmp	r3, r4
 800326a:	6025      	str	r5, [r4, #0]
 800326c:	bf18      	it	ne
 800326e:	6059      	strne	r1, [r3, #4]
 8003270:	6863      	ldr	r3, [r4, #4]
 8003272:	bf08      	it	eq
 8003274:	f8c8 1000 	streq.w	r1, [r8]
 8003278:	5162      	str	r2, [r4, r5]
 800327a:	604b      	str	r3, [r1, #4]
 800327c:	4638      	mov	r0, r7
 800327e:	f104 060b 	add.w	r6, r4, #11
 8003282:	f000 f829 	bl	80032d8 <__malloc_unlock>
 8003286:	f026 0607 	bic.w	r6, r6, #7
 800328a:	1d23      	adds	r3, r4, #4
 800328c:	1af2      	subs	r2, r6, r3
 800328e:	d0ae      	beq.n	80031ee <_malloc_r+0x22>
 8003290:	1b9b      	subs	r3, r3, r6
 8003292:	50a3      	str	r3, [r4, r2]
 8003294:	e7ab      	b.n	80031ee <_malloc_r+0x22>
 8003296:	42a3      	cmp	r3, r4
 8003298:	6862      	ldr	r2, [r4, #4]
 800329a:	d1dd      	bne.n	8003258 <_malloc_r+0x8c>
 800329c:	f8c8 2000 	str.w	r2, [r8]
 80032a0:	e7ec      	b.n	800327c <_malloc_r+0xb0>
 80032a2:	4623      	mov	r3, r4
 80032a4:	6864      	ldr	r4, [r4, #4]
 80032a6:	e7ac      	b.n	8003202 <_malloc_r+0x36>
 80032a8:	4634      	mov	r4, r6
 80032aa:	6876      	ldr	r6, [r6, #4]
 80032ac:	e7b4      	b.n	8003218 <_malloc_r+0x4c>
 80032ae:	4613      	mov	r3, r2
 80032b0:	e7cc      	b.n	800324c <_malloc_r+0x80>
 80032b2:	230c      	movs	r3, #12
 80032b4:	603b      	str	r3, [r7, #0]
 80032b6:	4638      	mov	r0, r7
 80032b8:	f000 f80e 	bl	80032d8 <__malloc_unlock>
 80032bc:	e797      	b.n	80031ee <_malloc_r+0x22>
 80032be:	6025      	str	r5, [r4, #0]
 80032c0:	e7dc      	b.n	800327c <_malloc_r+0xb0>
 80032c2:	605b      	str	r3, [r3, #4]
 80032c4:	deff      	udf	#255	; 0xff
 80032c6:	bf00      	nop
 80032c8:	20000290 	.word	0x20000290

080032cc <__malloc_lock>:
 80032cc:	4801      	ldr	r0, [pc, #4]	; (80032d4 <__malloc_lock+0x8>)
 80032ce:	f7ff bedb 	b.w	8003088 <__retarget_lock_acquire_recursive>
 80032d2:	bf00      	nop
 80032d4:	2000028c 	.word	0x2000028c

080032d8 <__malloc_unlock>:
 80032d8:	4801      	ldr	r0, [pc, #4]	; (80032e0 <__malloc_unlock+0x8>)
 80032da:	f7ff bed6 	b.w	800308a <__retarget_lock_release_recursive>
 80032de:	bf00      	nop
 80032e0:	2000028c 	.word	0x2000028c

080032e4 <__sflush_r>:
 80032e4:	898a      	ldrh	r2, [r1, #12]
 80032e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80032ea:	4605      	mov	r5, r0
 80032ec:	0710      	lsls	r0, r2, #28
 80032ee:	460c      	mov	r4, r1
 80032f0:	d458      	bmi.n	80033a4 <__sflush_r+0xc0>
 80032f2:	684b      	ldr	r3, [r1, #4]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	dc05      	bgt.n	8003304 <__sflush_r+0x20>
 80032f8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	dc02      	bgt.n	8003304 <__sflush_r+0x20>
 80032fe:	2000      	movs	r0, #0
 8003300:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003304:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003306:	2e00      	cmp	r6, #0
 8003308:	d0f9      	beq.n	80032fe <__sflush_r+0x1a>
 800330a:	2300      	movs	r3, #0
 800330c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003310:	682f      	ldr	r7, [r5, #0]
 8003312:	6a21      	ldr	r1, [r4, #32]
 8003314:	602b      	str	r3, [r5, #0]
 8003316:	d032      	beq.n	800337e <__sflush_r+0x9a>
 8003318:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800331a:	89a3      	ldrh	r3, [r4, #12]
 800331c:	075a      	lsls	r2, r3, #29
 800331e:	d505      	bpl.n	800332c <__sflush_r+0x48>
 8003320:	6863      	ldr	r3, [r4, #4]
 8003322:	1ac0      	subs	r0, r0, r3
 8003324:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003326:	b10b      	cbz	r3, 800332c <__sflush_r+0x48>
 8003328:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800332a:	1ac0      	subs	r0, r0, r3
 800332c:	2300      	movs	r3, #0
 800332e:	4602      	mov	r2, r0
 8003330:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003332:	6a21      	ldr	r1, [r4, #32]
 8003334:	4628      	mov	r0, r5
 8003336:	47b0      	blx	r6
 8003338:	1c43      	adds	r3, r0, #1
 800333a:	89a3      	ldrh	r3, [r4, #12]
 800333c:	d106      	bne.n	800334c <__sflush_r+0x68>
 800333e:	6829      	ldr	r1, [r5, #0]
 8003340:	291d      	cmp	r1, #29
 8003342:	d82b      	bhi.n	800339c <__sflush_r+0xb8>
 8003344:	4a29      	ldr	r2, [pc, #164]	; (80033ec <__sflush_r+0x108>)
 8003346:	410a      	asrs	r2, r1
 8003348:	07d6      	lsls	r6, r2, #31
 800334a:	d427      	bmi.n	800339c <__sflush_r+0xb8>
 800334c:	2200      	movs	r2, #0
 800334e:	6062      	str	r2, [r4, #4]
 8003350:	04d9      	lsls	r1, r3, #19
 8003352:	6922      	ldr	r2, [r4, #16]
 8003354:	6022      	str	r2, [r4, #0]
 8003356:	d504      	bpl.n	8003362 <__sflush_r+0x7e>
 8003358:	1c42      	adds	r2, r0, #1
 800335a:	d101      	bne.n	8003360 <__sflush_r+0x7c>
 800335c:	682b      	ldr	r3, [r5, #0]
 800335e:	b903      	cbnz	r3, 8003362 <__sflush_r+0x7e>
 8003360:	6560      	str	r0, [r4, #84]	; 0x54
 8003362:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003364:	602f      	str	r7, [r5, #0]
 8003366:	2900      	cmp	r1, #0
 8003368:	d0c9      	beq.n	80032fe <__sflush_r+0x1a>
 800336a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800336e:	4299      	cmp	r1, r3
 8003370:	d002      	beq.n	8003378 <__sflush_r+0x94>
 8003372:	4628      	mov	r0, r5
 8003374:	f7ff feb6 	bl	80030e4 <_free_r>
 8003378:	2000      	movs	r0, #0
 800337a:	6360      	str	r0, [r4, #52]	; 0x34
 800337c:	e7c0      	b.n	8003300 <__sflush_r+0x1c>
 800337e:	2301      	movs	r3, #1
 8003380:	4628      	mov	r0, r5
 8003382:	47b0      	blx	r6
 8003384:	1c41      	adds	r1, r0, #1
 8003386:	d1c8      	bne.n	800331a <__sflush_r+0x36>
 8003388:	682b      	ldr	r3, [r5, #0]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d0c5      	beq.n	800331a <__sflush_r+0x36>
 800338e:	2b1d      	cmp	r3, #29
 8003390:	d001      	beq.n	8003396 <__sflush_r+0xb2>
 8003392:	2b16      	cmp	r3, #22
 8003394:	d101      	bne.n	800339a <__sflush_r+0xb6>
 8003396:	602f      	str	r7, [r5, #0]
 8003398:	e7b1      	b.n	80032fe <__sflush_r+0x1a>
 800339a:	89a3      	ldrh	r3, [r4, #12]
 800339c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80033a0:	81a3      	strh	r3, [r4, #12]
 80033a2:	e7ad      	b.n	8003300 <__sflush_r+0x1c>
 80033a4:	690f      	ldr	r7, [r1, #16]
 80033a6:	2f00      	cmp	r7, #0
 80033a8:	d0a9      	beq.n	80032fe <__sflush_r+0x1a>
 80033aa:	0793      	lsls	r3, r2, #30
 80033ac:	680e      	ldr	r6, [r1, #0]
 80033ae:	bf08      	it	eq
 80033b0:	694b      	ldreq	r3, [r1, #20]
 80033b2:	600f      	str	r7, [r1, #0]
 80033b4:	bf18      	it	ne
 80033b6:	2300      	movne	r3, #0
 80033b8:	eba6 0807 	sub.w	r8, r6, r7
 80033bc:	608b      	str	r3, [r1, #8]
 80033be:	f1b8 0f00 	cmp.w	r8, #0
 80033c2:	dd9c      	ble.n	80032fe <__sflush_r+0x1a>
 80033c4:	6a21      	ldr	r1, [r4, #32]
 80033c6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80033c8:	4643      	mov	r3, r8
 80033ca:	463a      	mov	r2, r7
 80033cc:	4628      	mov	r0, r5
 80033ce:	47b0      	blx	r6
 80033d0:	2800      	cmp	r0, #0
 80033d2:	dc06      	bgt.n	80033e2 <__sflush_r+0xfe>
 80033d4:	89a3      	ldrh	r3, [r4, #12]
 80033d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80033da:	81a3      	strh	r3, [r4, #12]
 80033dc:	f04f 30ff 	mov.w	r0, #4294967295
 80033e0:	e78e      	b.n	8003300 <__sflush_r+0x1c>
 80033e2:	4407      	add	r7, r0
 80033e4:	eba8 0800 	sub.w	r8, r8, r0
 80033e8:	e7e9      	b.n	80033be <__sflush_r+0xda>
 80033ea:	bf00      	nop
 80033ec:	dfbffffe 	.word	0xdfbffffe

080033f0 <_fflush_r>:
 80033f0:	b538      	push	{r3, r4, r5, lr}
 80033f2:	690b      	ldr	r3, [r1, #16]
 80033f4:	4605      	mov	r5, r0
 80033f6:	460c      	mov	r4, r1
 80033f8:	b913      	cbnz	r3, 8003400 <_fflush_r+0x10>
 80033fa:	2500      	movs	r5, #0
 80033fc:	4628      	mov	r0, r5
 80033fe:	bd38      	pop	{r3, r4, r5, pc}
 8003400:	b118      	cbz	r0, 800340a <_fflush_r+0x1a>
 8003402:	6a03      	ldr	r3, [r0, #32]
 8003404:	b90b      	cbnz	r3, 800340a <_fflush_r+0x1a>
 8003406:	f7ff fcf1 	bl	8002dec <__sinit>
 800340a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d0f3      	beq.n	80033fa <_fflush_r+0xa>
 8003412:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003414:	07d0      	lsls	r0, r2, #31
 8003416:	d404      	bmi.n	8003422 <_fflush_r+0x32>
 8003418:	0599      	lsls	r1, r3, #22
 800341a:	d402      	bmi.n	8003422 <_fflush_r+0x32>
 800341c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800341e:	f7ff fe33 	bl	8003088 <__retarget_lock_acquire_recursive>
 8003422:	4628      	mov	r0, r5
 8003424:	4621      	mov	r1, r4
 8003426:	f7ff ff5d 	bl	80032e4 <__sflush_r>
 800342a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800342c:	07da      	lsls	r2, r3, #31
 800342e:	4605      	mov	r5, r0
 8003430:	d4e4      	bmi.n	80033fc <_fflush_r+0xc>
 8003432:	89a3      	ldrh	r3, [r4, #12]
 8003434:	059b      	lsls	r3, r3, #22
 8003436:	d4e1      	bmi.n	80033fc <_fflush_r+0xc>
 8003438:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800343a:	f7ff fe26 	bl	800308a <__retarget_lock_release_recursive>
 800343e:	e7dd      	b.n	80033fc <_fflush_r+0xc>

08003440 <fiprintf>:
 8003440:	b40e      	push	{r1, r2, r3}
 8003442:	b503      	push	{r0, r1, lr}
 8003444:	4601      	mov	r1, r0
 8003446:	ab03      	add	r3, sp, #12
 8003448:	4805      	ldr	r0, [pc, #20]	; (8003460 <fiprintf+0x20>)
 800344a:	f853 2b04 	ldr.w	r2, [r3], #4
 800344e:	6800      	ldr	r0, [r0, #0]
 8003450:	9301      	str	r3, [sp, #4]
 8003452:	f000 f847 	bl	80034e4 <_vfiprintf_r>
 8003456:	b002      	add	sp, #8
 8003458:	f85d eb04 	ldr.w	lr, [sp], #4
 800345c:	b003      	add	sp, #12
 800345e:	4770      	bx	lr
 8003460:	2000007c 	.word	0x2000007c

08003464 <_sbrk_r>:
 8003464:	b538      	push	{r3, r4, r5, lr}
 8003466:	4d06      	ldr	r5, [pc, #24]	; (8003480 <_sbrk_r+0x1c>)
 8003468:	2300      	movs	r3, #0
 800346a:	4604      	mov	r4, r0
 800346c:	4608      	mov	r0, r1
 800346e:	602b      	str	r3, [r5, #0]
 8003470:	f7fd fac2 	bl	80009f8 <_sbrk>
 8003474:	1c43      	adds	r3, r0, #1
 8003476:	d102      	bne.n	800347e <_sbrk_r+0x1a>
 8003478:	682b      	ldr	r3, [r5, #0]
 800347a:	b103      	cbz	r3, 800347e <_sbrk_r+0x1a>
 800347c:	6023      	str	r3, [r4, #0]
 800347e:	bd38      	pop	{r3, r4, r5, pc}
 8003480:	20000288 	.word	0x20000288

08003484 <abort>:
 8003484:	b508      	push	{r3, lr}
 8003486:	2006      	movs	r0, #6
 8003488:	f000 fb94 	bl	8003bb4 <raise>
 800348c:	2001      	movs	r0, #1
 800348e:	f7fd fa3b 	bl	8000908 <_exit>

08003492 <__sfputc_r>:
 8003492:	6893      	ldr	r3, [r2, #8]
 8003494:	3b01      	subs	r3, #1
 8003496:	2b00      	cmp	r3, #0
 8003498:	b410      	push	{r4}
 800349a:	6093      	str	r3, [r2, #8]
 800349c:	da08      	bge.n	80034b0 <__sfputc_r+0x1e>
 800349e:	6994      	ldr	r4, [r2, #24]
 80034a0:	42a3      	cmp	r3, r4
 80034a2:	db01      	blt.n	80034a8 <__sfputc_r+0x16>
 80034a4:	290a      	cmp	r1, #10
 80034a6:	d103      	bne.n	80034b0 <__sfputc_r+0x1e>
 80034a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80034ac:	f000 bac4 	b.w	8003a38 <__swbuf_r>
 80034b0:	6813      	ldr	r3, [r2, #0]
 80034b2:	1c58      	adds	r0, r3, #1
 80034b4:	6010      	str	r0, [r2, #0]
 80034b6:	7019      	strb	r1, [r3, #0]
 80034b8:	4608      	mov	r0, r1
 80034ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 80034be:	4770      	bx	lr

080034c0 <__sfputs_r>:
 80034c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034c2:	4606      	mov	r6, r0
 80034c4:	460f      	mov	r7, r1
 80034c6:	4614      	mov	r4, r2
 80034c8:	18d5      	adds	r5, r2, r3
 80034ca:	42ac      	cmp	r4, r5
 80034cc:	d101      	bne.n	80034d2 <__sfputs_r+0x12>
 80034ce:	2000      	movs	r0, #0
 80034d0:	e007      	b.n	80034e2 <__sfputs_r+0x22>
 80034d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80034d6:	463a      	mov	r2, r7
 80034d8:	4630      	mov	r0, r6
 80034da:	f7ff ffda 	bl	8003492 <__sfputc_r>
 80034de:	1c43      	adds	r3, r0, #1
 80034e0:	d1f3      	bne.n	80034ca <__sfputs_r+0xa>
 80034e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080034e4 <_vfiprintf_r>:
 80034e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80034e8:	460d      	mov	r5, r1
 80034ea:	b09d      	sub	sp, #116	; 0x74
 80034ec:	4614      	mov	r4, r2
 80034ee:	4698      	mov	r8, r3
 80034f0:	4606      	mov	r6, r0
 80034f2:	b118      	cbz	r0, 80034fc <_vfiprintf_r+0x18>
 80034f4:	6a03      	ldr	r3, [r0, #32]
 80034f6:	b90b      	cbnz	r3, 80034fc <_vfiprintf_r+0x18>
 80034f8:	f7ff fc78 	bl	8002dec <__sinit>
 80034fc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80034fe:	07d9      	lsls	r1, r3, #31
 8003500:	d405      	bmi.n	800350e <_vfiprintf_r+0x2a>
 8003502:	89ab      	ldrh	r3, [r5, #12]
 8003504:	059a      	lsls	r2, r3, #22
 8003506:	d402      	bmi.n	800350e <_vfiprintf_r+0x2a>
 8003508:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800350a:	f7ff fdbd 	bl	8003088 <__retarget_lock_acquire_recursive>
 800350e:	89ab      	ldrh	r3, [r5, #12]
 8003510:	071b      	lsls	r3, r3, #28
 8003512:	d501      	bpl.n	8003518 <_vfiprintf_r+0x34>
 8003514:	692b      	ldr	r3, [r5, #16]
 8003516:	b99b      	cbnz	r3, 8003540 <_vfiprintf_r+0x5c>
 8003518:	4629      	mov	r1, r5
 800351a:	4630      	mov	r0, r6
 800351c:	f000 faca 	bl	8003ab4 <__swsetup_r>
 8003520:	b170      	cbz	r0, 8003540 <_vfiprintf_r+0x5c>
 8003522:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003524:	07dc      	lsls	r4, r3, #31
 8003526:	d504      	bpl.n	8003532 <_vfiprintf_r+0x4e>
 8003528:	f04f 30ff 	mov.w	r0, #4294967295
 800352c:	b01d      	add	sp, #116	; 0x74
 800352e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003532:	89ab      	ldrh	r3, [r5, #12]
 8003534:	0598      	lsls	r0, r3, #22
 8003536:	d4f7      	bmi.n	8003528 <_vfiprintf_r+0x44>
 8003538:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800353a:	f7ff fda6 	bl	800308a <__retarget_lock_release_recursive>
 800353e:	e7f3      	b.n	8003528 <_vfiprintf_r+0x44>
 8003540:	2300      	movs	r3, #0
 8003542:	9309      	str	r3, [sp, #36]	; 0x24
 8003544:	2320      	movs	r3, #32
 8003546:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800354a:	f8cd 800c 	str.w	r8, [sp, #12]
 800354e:	2330      	movs	r3, #48	; 0x30
 8003550:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8003704 <_vfiprintf_r+0x220>
 8003554:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003558:	f04f 0901 	mov.w	r9, #1
 800355c:	4623      	mov	r3, r4
 800355e:	469a      	mov	sl, r3
 8003560:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003564:	b10a      	cbz	r2, 800356a <_vfiprintf_r+0x86>
 8003566:	2a25      	cmp	r2, #37	; 0x25
 8003568:	d1f9      	bne.n	800355e <_vfiprintf_r+0x7a>
 800356a:	ebba 0b04 	subs.w	fp, sl, r4
 800356e:	d00b      	beq.n	8003588 <_vfiprintf_r+0xa4>
 8003570:	465b      	mov	r3, fp
 8003572:	4622      	mov	r2, r4
 8003574:	4629      	mov	r1, r5
 8003576:	4630      	mov	r0, r6
 8003578:	f7ff ffa2 	bl	80034c0 <__sfputs_r>
 800357c:	3001      	adds	r0, #1
 800357e:	f000 80a9 	beq.w	80036d4 <_vfiprintf_r+0x1f0>
 8003582:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003584:	445a      	add	r2, fp
 8003586:	9209      	str	r2, [sp, #36]	; 0x24
 8003588:	f89a 3000 	ldrb.w	r3, [sl]
 800358c:	2b00      	cmp	r3, #0
 800358e:	f000 80a1 	beq.w	80036d4 <_vfiprintf_r+0x1f0>
 8003592:	2300      	movs	r3, #0
 8003594:	f04f 32ff 	mov.w	r2, #4294967295
 8003598:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800359c:	f10a 0a01 	add.w	sl, sl, #1
 80035a0:	9304      	str	r3, [sp, #16]
 80035a2:	9307      	str	r3, [sp, #28]
 80035a4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80035a8:	931a      	str	r3, [sp, #104]	; 0x68
 80035aa:	4654      	mov	r4, sl
 80035ac:	2205      	movs	r2, #5
 80035ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80035b2:	4854      	ldr	r0, [pc, #336]	; (8003704 <_vfiprintf_r+0x220>)
 80035b4:	f7fc fe2c 	bl	8000210 <memchr>
 80035b8:	9a04      	ldr	r2, [sp, #16]
 80035ba:	b9d8      	cbnz	r0, 80035f4 <_vfiprintf_r+0x110>
 80035bc:	06d1      	lsls	r1, r2, #27
 80035be:	bf44      	itt	mi
 80035c0:	2320      	movmi	r3, #32
 80035c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80035c6:	0713      	lsls	r3, r2, #28
 80035c8:	bf44      	itt	mi
 80035ca:	232b      	movmi	r3, #43	; 0x2b
 80035cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80035d0:	f89a 3000 	ldrb.w	r3, [sl]
 80035d4:	2b2a      	cmp	r3, #42	; 0x2a
 80035d6:	d015      	beq.n	8003604 <_vfiprintf_r+0x120>
 80035d8:	9a07      	ldr	r2, [sp, #28]
 80035da:	4654      	mov	r4, sl
 80035dc:	2000      	movs	r0, #0
 80035de:	f04f 0c0a 	mov.w	ip, #10
 80035e2:	4621      	mov	r1, r4
 80035e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80035e8:	3b30      	subs	r3, #48	; 0x30
 80035ea:	2b09      	cmp	r3, #9
 80035ec:	d94d      	bls.n	800368a <_vfiprintf_r+0x1a6>
 80035ee:	b1b0      	cbz	r0, 800361e <_vfiprintf_r+0x13a>
 80035f0:	9207      	str	r2, [sp, #28]
 80035f2:	e014      	b.n	800361e <_vfiprintf_r+0x13a>
 80035f4:	eba0 0308 	sub.w	r3, r0, r8
 80035f8:	fa09 f303 	lsl.w	r3, r9, r3
 80035fc:	4313      	orrs	r3, r2
 80035fe:	9304      	str	r3, [sp, #16]
 8003600:	46a2      	mov	sl, r4
 8003602:	e7d2      	b.n	80035aa <_vfiprintf_r+0xc6>
 8003604:	9b03      	ldr	r3, [sp, #12]
 8003606:	1d19      	adds	r1, r3, #4
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	9103      	str	r1, [sp, #12]
 800360c:	2b00      	cmp	r3, #0
 800360e:	bfbb      	ittet	lt
 8003610:	425b      	neglt	r3, r3
 8003612:	f042 0202 	orrlt.w	r2, r2, #2
 8003616:	9307      	strge	r3, [sp, #28]
 8003618:	9307      	strlt	r3, [sp, #28]
 800361a:	bfb8      	it	lt
 800361c:	9204      	strlt	r2, [sp, #16]
 800361e:	7823      	ldrb	r3, [r4, #0]
 8003620:	2b2e      	cmp	r3, #46	; 0x2e
 8003622:	d10c      	bne.n	800363e <_vfiprintf_r+0x15a>
 8003624:	7863      	ldrb	r3, [r4, #1]
 8003626:	2b2a      	cmp	r3, #42	; 0x2a
 8003628:	d134      	bne.n	8003694 <_vfiprintf_r+0x1b0>
 800362a:	9b03      	ldr	r3, [sp, #12]
 800362c:	1d1a      	adds	r2, r3, #4
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	9203      	str	r2, [sp, #12]
 8003632:	2b00      	cmp	r3, #0
 8003634:	bfb8      	it	lt
 8003636:	f04f 33ff 	movlt.w	r3, #4294967295
 800363a:	3402      	adds	r4, #2
 800363c:	9305      	str	r3, [sp, #20]
 800363e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8003714 <_vfiprintf_r+0x230>
 8003642:	7821      	ldrb	r1, [r4, #0]
 8003644:	2203      	movs	r2, #3
 8003646:	4650      	mov	r0, sl
 8003648:	f7fc fde2 	bl	8000210 <memchr>
 800364c:	b138      	cbz	r0, 800365e <_vfiprintf_r+0x17a>
 800364e:	9b04      	ldr	r3, [sp, #16]
 8003650:	eba0 000a 	sub.w	r0, r0, sl
 8003654:	2240      	movs	r2, #64	; 0x40
 8003656:	4082      	lsls	r2, r0
 8003658:	4313      	orrs	r3, r2
 800365a:	3401      	adds	r4, #1
 800365c:	9304      	str	r3, [sp, #16]
 800365e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003662:	4829      	ldr	r0, [pc, #164]	; (8003708 <_vfiprintf_r+0x224>)
 8003664:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003668:	2206      	movs	r2, #6
 800366a:	f7fc fdd1 	bl	8000210 <memchr>
 800366e:	2800      	cmp	r0, #0
 8003670:	d03f      	beq.n	80036f2 <_vfiprintf_r+0x20e>
 8003672:	4b26      	ldr	r3, [pc, #152]	; (800370c <_vfiprintf_r+0x228>)
 8003674:	bb1b      	cbnz	r3, 80036be <_vfiprintf_r+0x1da>
 8003676:	9b03      	ldr	r3, [sp, #12]
 8003678:	3307      	adds	r3, #7
 800367a:	f023 0307 	bic.w	r3, r3, #7
 800367e:	3308      	adds	r3, #8
 8003680:	9303      	str	r3, [sp, #12]
 8003682:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003684:	443b      	add	r3, r7
 8003686:	9309      	str	r3, [sp, #36]	; 0x24
 8003688:	e768      	b.n	800355c <_vfiprintf_r+0x78>
 800368a:	fb0c 3202 	mla	r2, ip, r2, r3
 800368e:	460c      	mov	r4, r1
 8003690:	2001      	movs	r0, #1
 8003692:	e7a6      	b.n	80035e2 <_vfiprintf_r+0xfe>
 8003694:	2300      	movs	r3, #0
 8003696:	3401      	adds	r4, #1
 8003698:	9305      	str	r3, [sp, #20]
 800369a:	4619      	mov	r1, r3
 800369c:	f04f 0c0a 	mov.w	ip, #10
 80036a0:	4620      	mov	r0, r4
 80036a2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80036a6:	3a30      	subs	r2, #48	; 0x30
 80036a8:	2a09      	cmp	r2, #9
 80036aa:	d903      	bls.n	80036b4 <_vfiprintf_r+0x1d0>
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d0c6      	beq.n	800363e <_vfiprintf_r+0x15a>
 80036b0:	9105      	str	r1, [sp, #20]
 80036b2:	e7c4      	b.n	800363e <_vfiprintf_r+0x15a>
 80036b4:	fb0c 2101 	mla	r1, ip, r1, r2
 80036b8:	4604      	mov	r4, r0
 80036ba:	2301      	movs	r3, #1
 80036bc:	e7f0      	b.n	80036a0 <_vfiprintf_r+0x1bc>
 80036be:	ab03      	add	r3, sp, #12
 80036c0:	9300      	str	r3, [sp, #0]
 80036c2:	462a      	mov	r2, r5
 80036c4:	4b12      	ldr	r3, [pc, #72]	; (8003710 <_vfiprintf_r+0x22c>)
 80036c6:	a904      	add	r1, sp, #16
 80036c8:	4630      	mov	r0, r6
 80036ca:	f3af 8000 	nop.w
 80036ce:	4607      	mov	r7, r0
 80036d0:	1c78      	adds	r0, r7, #1
 80036d2:	d1d6      	bne.n	8003682 <_vfiprintf_r+0x19e>
 80036d4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80036d6:	07d9      	lsls	r1, r3, #31
 80036d8:	d405      	bmi.n	80036e6 <_vfiprintf_r+0x202>
 80036da:	89ab      	ldrh	r3, [r5, #12]
 80036dc:	059a      	lsls	r2, r3, #22
 80036de:	d402      	bmi.n	80036e6 <_vfiprintf_r+0x202>
 80036e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80036e2:	f7ff fcd2 	bl	800308a <__retarget_lock_release_recursive>
 80036e6:	89ab      	ldrh	r3, [r5, #12]
 80036e8:	065b      	lsls	r3, r3, #25
 80036ea:	f53f af1d 	bmi.w	8003528 <_vfiprintf_r+0x44>
 80036ee:	9809      	ldr	r0, [sp, #36]	; 0x24
 80036f0:	e71c      	b.n	800352c <_vfiprintf_r+0x48>
 80036f2:	ab03      	add	r3, sp, #12
 80036f4:	9300      	str	r3, [sp, #0]
 80036f6:	462a      	mov	r2, r5
 80036f8:	4b05      	ldr	r3, [pc, #20]	; (8003710 <_vfiprintf_r+0x22c>)
 80036fa:	a904      	add	r1, sp, #16
 80036fc:	4630      	mov	r0, r6
 80036fe:	f000 f879 	bl	80037f4 <_printf_i>
 8003702:	e7e4      	b.n	80036ce <_vfiprintf_r+0x1ea>
 8003704:	08003de5 	.word	0x08003de5
 8003708:	08003def 	.word	0x08003def
 800370c:	00000000 	.word	0x00000000
 8003710:	080034c1 	.word	0x080034c1
 8003714:	08003deb 	.word	0x08003deb

08003718 <_printf_common>:
 8003718:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800371c:	4616      	mov	r6, r2
 800371e:	4699      	mov	r9, r3
 8003720:	688a      	ldr	r2, [r1, #8]
 8003722:	690b      	ldr	r3, [r1, #16]
 8003724:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003728:	4293      	cmp	r3, r2
 800372a:	bfb8      	it	lt
 800372c:	4613      	movlt	r3, r2
 800372e:	6033      	str	r3, [r6, #0]
 8003730:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003734:	4607      	mov	r7, r0
 8003736:	460c      	mov	r4, r1
 8003738:	b10a      	cbz	r2, 800373e <_printf_common+0x26>
 800373a:	3301      	adds	r3, #1
 800373c:	6033      	str	r3, [r6, #0]
 800373e:	6823      	ldr	r3, [r4, #0]
 8003740:	0699      	lsls	r1, r3, #26
 8003742:	bf42      	ittt	mi
 8003744:	6833      	ldrmi	r3, [r6, #0]
 8003746:	3302      	addmi	r3, #2
 8003748:	6033      	strmi	r3, [r6, #0]
 800374a:	6825      	ldr	r5, [r4, #0]
 800374c:	f015 0506 	ands.w	r5, r5, #6
 8003750:	d106      	bne.n	8003760 <_printf_common+0x48>
 8003752:	f104 0a19 	add.w	sl, r4, #25
 8003756:	68e3      	ldr	r3, [r4, #12]
 8003758:	6832      	ldr	r2, [r6, #0]
 800375a:	1a9b      	subs	r3, r3, r2
 800375c:	42ab      	cmp	r3, r5
 800375e:	dc26      	bgt.n	80037ae <_printf_common+0x96>
 8003760:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003764:	1e13      	subs	r3, r2, #0
 8003766:	6822      	ldr	r2, [r4, #0]
 8003768:	bf18      	it	ne
 800376a:	2301      	movne	r3, #1
 800376c:	0692      	lsls	r2, r2, #26
 800376e:	d42b      	bmi.n	80037c8 <_printf_common+0xb0>
 8003770:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003774:	4649      	mov	r1, r9
 8003776:	4638      	mov	r0, r7
 8003778:	47c0      	blx	r8
 800377a:	3001      	adds	r0, #1
 800377c:	d01e      	beq.n	80037bc <_printf_common+0xa4>
 800377e:	6823      	ldr	r3, [r4, #0]
 8003780:	6922      	ldr	r2, [r4, #16]
 8003782:	f003 0306 	and.w	r3, r3, #6
 8003786:	2b04      	cmp	r3, #4
 8003788:	bf02      	ittt	eq
 800378a:	68e5      	ldreq	r5, [r4, #12]
 800378c:	6833      	ldreq	r3, [r6, #0]
 800378e:	1aed      	subeq	r5, r5, r3
 8003790:	68a3      	ldr	r3, [r4, #8]
 8003792:	bf0c      	ite	eq
 8003794:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003798:	2500      	movne	r5, #0
 800379a:	4293      	cmp	r3, r2
 800379c:	bfc4      	itt	gt
 800379e:	1a9b      	subgt	r3, r3, r2
 80037a0:	18ed      	addgt	r5, r5, r3
 80037a2:	2600      	movs	r6, #0
 80037a4:	341a      	adds	r4, #26
 80037a6:	42b5      	cmp	r5, r6
 80037a8:	d11a      	bne.n	80037e0 <_printf_common+0xc8>
 80037aa:	2000      	movs	r0, #0
 80037ac:	e008      	b.n	80037c0 <_printf_common+0xa8>
 80037ae:	2301      	movs	r3, #1
 80037b0:	4652      	mov	r2, sl
 80037b2:	4649      	mov	r1, r9
 80037b4:	4638      	mov	r0, r7
 80037b6:	47c0      	blx	r8
 80037b8:	3001      	adds	r0, #1
 80037ba:	d103      	bne.n	80037c4 <_printf_common+0xac>
 80037bc:	f04f 30ff 	mov.w	r0, #4294967295
 80037c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80037c4:	3501      	adds	r5, #1
 80037c6:	e7c6      	b.n	8003756 <_printf_common+0x3e>
 80037c8:	18e1      	adds	r1, r4, r3
 80037ca:	1c5a      	adds	r2, r3, #1
 80037cc:	2030      	movs	r0, #48	; 0x30
 80037ce:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80037d2:	4422      	add	r2, r4
 80037d4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80037d8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80037dc:	3302      	adds	r3, #2
 80037de:	e7c7      	b.n	8003770 <_printf_common+0x58>
 80037e0:	2301      	movs	r3, #1
 80037e2:	4622      	mov	r2, r4
 80037e4:	4649      	mov	r1, r9
 80037e6:	4638      	mov	r0, r7
 80037e8:	47c0      	blx	r8
 80037ea:	3001      	adds	r0, #1
 80037ec:	d0e6      	beq.n	80037bc <_printf_common+0xa4>
 80037ee:	3601      	adds	r6, #1
 80037f0:	e7d9      	b.n	80037a6 <_printf_common+0x8e>
	...

080037f4 <_printf_i>:
 80037f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80037f8:	7e0f      	ldrb	r7, [r1, #24]
 80037fa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80037fc:	2f78      	cmp	r7, #120	; 0x78
 80037fe:	4691      	mov	r9, r2
 8003800:	4680      	mov	r8, r0
 8003802:	460c      	mov	r4, r1
 8003804:	469a      	mov	sl, r3
 8003806:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800380a:	d807      	bhi.n	800381c <_printf_i+0x28>
 800380c:	2f62      	cmp	r7, #98	; 0x62
 800380e:	d80a      	bhi.n	8003826 <_printf_i+0x32>
 8003810:	2f00      	cmp	r7, #0
 8003812:	f000 80d4 	beq.w	80039be <_printf_i+0x1ca>
 8003816:	2f58      	cmp	r7, #88	; 0x58
 8003818:	f000 80c0 	beq.w	800399c <_printf_i+0x1a8>
 800381c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003820:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003824:	e03a      	b.n	800389c <_printf_i+0xa8>
 8003826:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800382a:	2b15      	cmp	r3, #21
 800382c:	d8f6      	bhi.n	800381c <_printf_i+0x28>
 800382e:	a101      	add	r1, pc, #4	; (adr r1, 8003834 <_printf_i+0x40>)
 8003830:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003834:	0800388d 	.word	0x0800388d
 8003838:	080038a1 	.word	0x080038a1
 800383c:	0800381d 	.word	0x0800381d
 8003840:	0800381d 	.word	0x0800381d
 8003844:	0800381d 	.word	0x0800381d
 8003848:	0800381d 	.word	0x0800381d
 800384c:	080038a1 	.word	0x080038a1
 8003850:	0800381d 	.word	0x0800381d
 8003854:	0800381d 	.word	0x0800381d
 8003858:	0800381d 	.word	0x0800381d
 800385c:	0800381d 	.word	0x0800381d
 8003860:	080039a5 	.word	0x080039a5
 8003864:	080038cd 	.word	0x080038cd
 8003868:	0800395f 	.word	0x0800395f
 800386c:	0800381d 	.word	0x0800381d
 8003870:	0800381d 	.word	0x0800381d
 8003874:	080039c7 	.word	0x080039c7
 8003878:	0800381d 	.word	0x0800381d
 800387c:	080038cd 	.word	0x080038cd
 8003880:	0800381d 	.word	0x0800381d
 8003884:	0800381d 	.word	0x0800381d
 8003888:	08003967 	.word	0x08003967
 800388c:	682b      	ldr	r3, [r5, #0]
 800388e:	1d1a      	adds	r2, r3, #4
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	602a      	str	r2, [r5, #0]
 8003894:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003898:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800389c:	2301      	movs	r3, #1
 800389e:	e09f      	b.n	80039e0 <_printf_i+0x1ec>
 80038a0:	6820      	ldr	r0, [r4, #0]
 80038a2:	682b      	ldr	r3, [r5, #0]
 80038a4:	0607      	lsls	r7, r0, #24
 80038a6:	f103 0104 	add.w	r1, r3, #4
 80038aa:	6029      	str	r1, [r5, #0]
 80038ac:	d501      	bpl.n	80038b2 <_printf_i+0xbe>
 80038ae:	681e      	ldr	r6, [r3, #0]
 80038b0:	e003      	b.n	80038ba <_printf_i+0xc6>
 80038b2:	0646      	lsls	r6, r0, #25
 80038b4:	d5fb      	bpl.n	80038ae <_printf_i+0xba>
 80038b6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80038ba:	2e00      	cmp	r6, #0
 80038bc:	da03      	bge.n	80038c6 <_printf_i+0xd2>
 80038be:	232d      	movs	r3, #45	; 0x2d
 80038c0:	4276      	negs	r6, r6
 80038c2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80038c6:	485a      	ldr	r0, [pc, #360]	; (8003a30 <_printf_i+0x23c>)
 80038c8:	230a      	movs	r3, #10
 80038ca:	e012      	b.n	80038f2 <_printf_i+0xfe>
 80038cc:	682b      	ldr	r3, [r5, #0]
 80038ce:	6820      	ldr	r0, [r4, #0]
 80038d0:	1d19      	adds	r1, r3, #4
 80038d2:	6029      	str	r1, [r5, #0]
 80038d4:	0605      	lsls	r5, r0, #24
 80038d6:	d501      	bpl.n	80038dc <_printf_i+0xe8>
 80038d8:	681e      	ldr	r6, [r3, #0]
 80038da:	e002      	b.n	80038e2 <_printf_i+0xee>
 80038dc:	0641      	lsls	r1, r0, #25
 80038de:	d5fb      	bpl.n	80038d8 <_printf_i+0xe4>
 80038e0:	881e      	ldrh	r6, [r3, #0]
 80038e2:	4853      	ldr	r0, [pc, #332]	; (8003a30 <_printf_i+0x23c>)
 80038e4:	2f6f      	cmp	r7, #111	; 0x6f
 80038e6:	bf0c      	ite	eq
 80038e8:	2308      	moveq	r3, #8
 80038ea:	230a      	movne	r3, #10
 80038ec:	2100      	movs	r1, #0
 80038ee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80038f2:	6865      	ldr	r5, [r4, #4]
 80038f4:	60a5      	str	r5, [r4, #8]
 80038f6:	2d00      	cmp	r5, #0
 80038f8:	bfa2      	ittt	ge
 80038fa:	6821      	ldrge	r1, [r4, #0]
 80038fc:	f021 0104 	bicge.w	r1, r1, #4
 8003900:	6021      	strge	r1, [r4, #0]
 8003902:	b90e      	cbnz	r6, 8003908 <_printf_i+0x114>
 8003904:	2d00      	cmp	r5, #0
 8003906:	d04b      	beq.n	80039a0 <_printf_i+0x1ac>
 8003908:	4615      	mov	r5, r2
 800390a:	fbb6 f1f3 	udiv	r1, r6, r3
 800390e:	fb03 6711 	mls	r7, r3, r1, r6
 8003912:	5dc7      	ldrb	r7, [r0, r7]
 8003914:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003918:	4637      	mov	r7, r6
 800391a:	42bb      	cmp	r3, r7
 800391c:	460e      	mov	r6, r1
 800391e:	d9f4      	bls.n	800390a <_printf_i+0x116>
 8003920:	2b08      	cmp	r3, #8
 8003922:	d10b      	bne.n	800393c <_printf_i+0x148>
 8003924:	6823      	ldr	r3, [r4, #0]
 8003926:	07de      	lsls	r6, r3, #31
 8003928:	d508      	bpl.n	800393c <_printf_i+0x148>
 800392a:	6923      	ldr	r3, [r4, #16]
 800392c:	6861      	ldr	r1, [r4, #4]
 800392e:	4299      	cmp	r1, r3
 8003930:	bfde      	ittt	le
 8003932:	2330      	movle	r3, #48	; 0x30
 8003934:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003938:	f105 35ff 	addle.w	r5, r5, #4294967295
 800393c:	1b52      	subs	r2, r2, r5
 800393e:	6122      	str	r2, [r4, #16]
 8003940:	f8cd a000 	str.w	sl, [sp]
 8003944:	464b      	mov	r3, r9
 8003946:	aa03      	add	r2, sp, #12
 8003948:	4621      	mov	r1, r4
 800394a:	4640      	mov	r0, r8
 800394c:	f7ff fee4 	bl	8003718 <_printf_common>
 8003950:	3001      	adds	r0, #1
 8003952:	d14a      	bne.n	80039ea <_printf_i+0x1f6>
 8003954:	f04f 30ff 	mov.w	r0, #4294967295
 8003958:	b004      	add	sp, #16
 800395a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800395e:	6823      	ldr	r3, [r4, #0]
 8003960:	f043 0320 	orr.w	r3, r3, #32
 8003964:	6023      	str	r3, [r4, #0]
 8003966:	4833      	ldr	r0, [pc, #204]	; (8003a34 <_printf_i+0x240>)
 8003968:	2778      	movs	r7, #120	; 0x78
 800396a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800396e:	6823      	ldr	r3, [r4, #0]
 8003970:	6829      	ldr	r1, [r5, #0]
 8003972:	061f      	lsls	r7, r3, #24
 8003974:	f851 6b04 	ldr.w	r6, [r1], #4
 8003978:	d402      	bmi.n	8003980 <_printf_i+0x18c>
 800397a:	065f      	lsls	r7, r3, #25
 800397c:	bf48      	it	mi
 800397e:	b2b6      	uxthmi	r6, r6
 8003980:	07df      	lsls	r7, r3, #31
 8003982:	bf48      	it	mi
 8003984:	f043 0320 	orrmi.w	r3, r3, #32
 8003988:	6029      	str	r1, [r5, #0]
 800398a:	bf48      	it	mi
 800398c:	6023      	strmi	r3, [r4, #0]
 800398e:	b91e      	cbnz	r6, 8003998 <_printf_i+0x1a4>
 8003990:	6823      	ldr	r3, [r4, #0]
 8003992:	f023 0320 	bic.w	r3, r3, #32
 8003996:	6023      	str	r3, [r4, #0]
 8003998:	2310      	movs	r3, #16
 800399a:	e7a7      	b.n	80038ec <_printf_i+0xf8>
 800399c:	4824      	ldr	r0, [pc, #144]	; (8003a30 <_printf_i+0x23c>)
 800399e:	e7e4      	b.n	800396a <_printf_i+0x176>
 80039a0:	4615      	mov	r5, r2
 80039a2:	e7bd      	b.n	8003920 <_printf_i+0x12c>
 80039a4:	682b      	ldr	r3, [r5, #0]
 80039a6:	6826      	ldr	r6, [r4, #0]
 80039a8:	6961      	ldr	r1, [r4, #20]
 80039aa:	1d18      	adds	r0, r3, #4
 80039ac:	6028      	str	r0, [r5, #0]
 80039ae:	0635      	lsls	r5, r6, #24
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	d501      	bpl.n	80039b8 <_printf_i+0x1c4>
 80039b4:	6019      	str	r1, [r3, #0]
 80039b6:	e002      	b.n	80039be <_printf_i+0x1ca>
 80039b8:	0670      	lsls	r0, r6, #25
 80039ba:	d5fb      	bpl.n	80039b4 <_printf_i+0x1c0>
 80039bc:	8019      	strh	r1, [r3, #0]
 80039be:	2300      	movs	r3, #0
 80039c0:	6123      	str	r3, [r4, #16]
 80039c2:	4615      	mov	r5, r2
 80039c4:	e7bc      	b.n	8003940 <_printf_i+0x14c>
 80039c6:	682b      	ldr	r3, [r5, #0]
 80039c8:	1d1a      	adds	r2, r3, #4
 80039ca:	602a      	str	r2, [r5, #0]
 80039cc:	681d      	ldr	r5, [r3, #0]
 80039ce:	6862      	ldr	r2, [r4, #4]
 80039d0:	2100      	movs	r1, #0
 80039d2:	4628      	mov	r0, r5
 80039d4:	f7fc fc1c 	bl	8000210 <memchr>
 80039d8:	b108      	cbz	r0, 80039de <_printf_i+0x1ea>
 80039da:	1b40      	subs	r0, r0, r5
 80039dc:	6060      	str	r0, [r4, #4]
 80039de:	6863      	ldr	r3, [r4, #4]
 80039e0:	6123      	str	r3, [r4, #16]
 80039e2:	2300      	movs	r3, #0
 80039e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80039e8:	e7aa      	b.n	8003940 <_printf_i+0x14c>
 80039ea:	6923      	ldr	r3, [r4, #16]
 80039ec:	462a      	mov	r2, r5
 80039ee:	4649      	mov	r1, r9
 80039f0:	4640      	mov	r0, r8
 80039f2:	47d0      	blx	sl
 80039f4:	3001      	adds	r0, #1
 80039f6:	d0ad      	beq.n	8003954 <_printf_i+0x160>
 80039f8:	6823      	ldr	r3, [r4, #0]
 80039fa:	079b      	lsls	r3, r3, #30
 80039fc:	d413      	bmi.n	8003a26 <_printf_i+0x232>
 80039fe:	68e0      	ldr	r0, [r4, #12]
 8003a00:	9b03      	ldr	r3, [sp, #12]
 8003a02:	4298      	cmp	r0, r3
 8003a04:	bfb8      	it	lt
 8003a06:	4618      	movlt	r0, r3
 8003a08:	e7a6      	b.n	8003958 <_printf_i+0x164>
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	4632      	mov	r2, r6
 8003a0e:	4649      	mov	r1, r9
 8003a10:	4640      	mov	r0, r8
 8003a12:	47d0      	blx	sl
 8003a14:	3001      	adds	r0, #1
 8003a16:	d09d      	beq.n	8003954 <_printf_i+0x160>
 8003a18:	3501      	adds	r5, #1
 8003a1a:	68e3      	ldr	r3, [r4, #12]
 8003a1c:	9903      	ldr	r1, [sp, #12]
 8003a1e:	1a5b      	subs	r3, r3, r1
 8003a20:	42ab      	cmp	r3, r5
 8003a22:	dcf2      	bgt.n	8003a0a <_printf_i+0x216>
 8003a24:	e7eb      	b.n	80039fe <_printf_i+0x20a>
 8003a26:	2500      	movs	r5, #0
 8003a28:	f104 0619 	add.w	r6, r4, #25
 8003a2c:	e7f5      	b.n	8003a1a <_printf_i+0x226>
 8003a2e:	bf00      	nop
 8003a30:	08003df6 	.word	0x08003df6
 8003a34:	08003e07 	.word	0x08003e07

08003a38 <__swbuf_r>:
 8003a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a3a:	460e      	mov	r6, r1
 8003a3c:	4614      	mov	r4, r2
 8003a3e:	4605      	mov	r5, r0
 8003a40:	b118      	cbz	r0, 8003a4a <__swbuf_r+0x12>
 8003a42:	6a03      	ldr	r3, [r0, #32]
 8003a44:	b90b      	cbnz	r3, 8003a4a <__swbuf_r+0x12>
 8003a46:	f7ff f9d1 	bl	8002dec <__sinit>
 8003a4a:	69a3      	ldr	r3, [r4, #24]
 8003a4c:	60a3      	str	r3, [r4, #8]
 8003a4e:	89a3      	ldrh	r3, [r4, #12]
 8003a50:	071a      	lsls	r2, r3, #28
 8003a52:	d525      	bpl.n	8003aa0 <__swbuf_r+0x68>
 8003a54:	6923      	ldr	r3, [r4, #16]
 8003a56:	b31b      	cbz	r3, 8003aa0 <__swbuf_r+0x68>
 8003a58:	6823      	ldr	r3, [r4, #0]
 8003a5a:	6922      	ldr	r2, [r4, #16]
 8003a5c:	1a98      	subs	r0, r3, r2
 8003a5e:	6963      	ldr	r3, [r4, #20]
 8003a60:	b2f6      	uxtb	r6, r6
 8003a62:	4283      	cmp	r3, r0
 8003a64:	4637      	mov	r7, r6
 8003a66:	dc04      	bgt.n	8003a72 <__swbuf_r+0x3a>
 8003a68:	4621      	mov	r1, r4
 8003a6a:	4628      	mov	r0, r5
 8003a6c:	f7ff fcc0 	bl	80033f0 <_fflush_r>
 8003a70:	b9e0      	cbnz	r0, 8003aac <__swbuf_r+0x74>
 8003a72:	68a3      	ldr	r3, [r4, #8]
 8003a74:	3b01      	subs	r3, #1
 8003a76:	60a3      	str	r3, [r4, #8]
 8003a78:	6823      	ldr	r3, [r4, #0]
 8003a7a:	1c5a      	adds	r2, r3, #1
 8003a7c:	6022      	str	r2, [r4, #0]
 8003a7e:	701e      	strb	r6, [r3, #0]
 8003a80:	6962      	ldr	r2, [r4, #20]
 8003a82:	1c43      	adds	r3, r0, #1
 8003a84:	429a      	cmp	r2, r3
 8003a86:	d004      	beq.n	8003a92 <__swbuf_r+0x5a>
 8003a88:	89a3      	ldrh	r3, [r4, #12]
 8003a8a:	07db      	lsls	r3, r3, #31
 8003a8c:	d506      	bpl.n	8003a9c <__swbuf_r+0x64>
 8003a8e:	2e0a      	cmp	r6, #10
 8003a90:	d104      	bne.n	8003a9c <__swbuf_r+0x64>
 8003a92:	4621      	mov	r1, r4
 8003a94:	4628      	mov	r0, r5
 8003a96:	f7ff fcab 	bl	80033f0 <_fflush_r>
 8003a9a:	b938      	cbnz	r0, 8003aac <__swbuf_r+0x74>
 8003a9c:	4638      	mov	r0, r7
 8003a9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003aa0:	4621      	mov	r1, r4
 8003aa2:	4628      	mov	r0, r5
 8003aa4:	f000 f806 	bl	8003ab4 <__swsetup_r>
 8003aa8:	2800      	cmp	r0, #0
 8003aaa:	d0d5      	beq.n	8003a58 <__swbuf_r+0x20>
 8003aac:	f04f 37ff 	mov.w	r7, #4294967295
 8003ab0:	e7f4      	b.n	8003a9c <__swbuf_r+0x64>
	...

08003ab4 <__swsetup_r>:
 8003ab4:	b538      	push	{r3, r4, r5, lr}
 8003ab6:	4b2a      	ldr	r3, [pc, #168]	; (8003b60 <__swsetup_r+0xac>)
 8003ab8:	4605      	mov	r5, r0
 8003aba:	6818      	ldr	r0, [r3, #0]
 8003abc:	460c      	mov	r4, r1
 8003abe:	b118      	cbz	r0, 8003ac8 <__swsetup_r+0x14>
 8003ac0:	6a03      	ldr	r3, [r0, #32]
 8003ac2:	b90b      	cbnz	r3, 8003ac8 <__swsetup_r+0x14>
 8003ac4:	f7ff f992 	bl	8002dec <__sinit>
 8003ac8:	89a3      	ldrh	r3, [r4, #12]
 8003aca:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003ace:	0718      	lsls	r0, r3, #28
 8003ad0:	d422      	bmi.n	8003b18 <__swsetup_r+0x64>
 8003ad2:	06d9      	lsls	r1, r3, #27
 8003ad4:	d407      	bmi.n	8003ae6 <__swsetup_r+0x32>
 8003ad6:	2309      	movs	r3, #9
 8003ad8:	602b      	str	r3, [r5, #0]
 8003ada:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003ade:	81a3      	strh	r3, [r4, #12]
 8003ae0:	f04f 30ff 	mov.w	r0, #4294967295
 8003ae4:	e034      	b.n	8003b50 <__swsetup_r+0x9c>
 8003ae6:	0758      	lsls	r0, r3, #29
 8003ae8:	d512      	bpl.n	8003b10 <__swsetup_r+0x5c>
 8003aea:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003aec:	b141      	cbz	r1, 8003b00 <__swsetup_r+0x4c>
 8003aee:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003af2:	4299      	cmp	r1, r3
 8003af4:	d002      	beq.n	8003afc <__swsetup_r+0x48>
 8003af6:	4628      	mov	r0, r5
 8003af8:	f7ff faf4 	bl	80030e4 <_free_r>
 8003afc:	2300      	movs	r3, #0
 8003afe:	6363      	str	r3, [r4, #52]	; 0x34
 8003b00:	89a3      	ldrh	r3, [r4, #12]
 8003b02:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003b06:	81a3      	strh	r3, [r4, #12]
 8003b08:	2300      	movs	r3, #0
 8003b0a:	6063      	str	r3, [r4, #4]
 8003b0c:	6923      	ldr	r3, [r4, #16]
 8003b0e:	6023      	str	r3, [r4, #0]
 8003b10:	89a3      	ldrh	r3, [r4, #12]
 8003b12:	f043 0308 	orr.w	r3, r3, #8
 8003b16:	81a3      	strh	r3, [r4, #12]
 8003b18:	6923      	ldr	r3, [r4, #16]
 8003b1a:	b94b      	cbnz	r3, 8003b30 <__swsetup_r+0x7c>
 8003b1c:	89a3      	ldrh	r3, [r4, #12]
 8003b1e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003b22:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b26:	d003      	beq.n	8003b30 <__swsetup_r+0x7c>
 8003b28:	4621      	mov	r1, r4
 8003b2a:	4628      	mov	r0, r5
 8003b2c:	f000 f884 	bl	8003c38 <__smakebuf_r>
 8003b30:	89a0      	ldrh	r0, [r4, #12]
 8003b32:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003b36:	f010 0301 	ands.w	r3, r0, #1
 8003b3a:	d00a      	beq.n	8003b52 <__swsetup_r+0x9e>
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	60a3      	str	r3, [r4, #8]
 8003b40:	6963      	ldr	r3, [r4, #20]
 8003b42:	425b      	negs	r3, r3
 8003b44:	61a3      	str	r3, [r4, #24]
 8003b46:	6923      	ldr	r3, [r4, #16]
 8003b48:	b943      	cbnz	r3, 8003b5c <__swsetup_r+0xa8>
 8003b4a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003b4e:	d1c4      	bne.n	8003ada <__swsetup_r+0x26>
 8003b50:	bd38      	pop	{r3, r4, r5, pc}
 8003b52:	0781      	lsls	r1, r0, #30
 8003b54:	bf58      	it	pl
 8003b56:	6963      	ldrpl	r3, [r4, #20]
 8003b58:	60a3      	str	r3, [r4, #8]
 8003b5a:	e7f4      	b.n	8003b46 <__swsetup_r+0x92>
 8003b5c:	2000      	movs	r0, #0
 8003b5e:	e7f7      	b.n	8003b50 <__swsetup_r+0x9c>
 8003b60:	2000007c 	.word	0x2000007c

08003b64 <_raise_r>:
 8003b64:	291f      	cmp	r1, #31
 8003b66:	b538      	push	{r3, r4, r5, lr}
 8003b68:	4604      	mov	r4, r0
 8003b6a:	460d      	mov	r5, r1
 8003b6c:	d904      	bls.n	8003b78 <_raise_r+0x14>
 8003b6e:	2316      	movs	r3, #22
 8003b70:	6003      	str	r3, [r0, #0]
 8003b72:	f04f 30ff 	mov.w	r0, #4294967295
 8003b76:	bd38      	pop	{r3, r4, r5, pc}
 8003b78:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8003b7a:	b112      	cbz	r2, 8003b82 <_raise_r+0x1e>
 8003b7c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8003b80:	b94b      	cbnz	r3, 8003b96 <_raise_r+0x32>
 8003b82:	4620      	mov	r0, r4
 8003b84:	f000 f830 	bl	8003be8 <_getpid_r>
 8003b88:	462a      	mov	r2, r5
 8003b8a:	4601      	mov	r1, r0
 8003b8c:	4620      	mov	r0, r4
 8003b8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003b92:	f000 b817 	b.w	8003bc4 <_kill_r>
 8003b96:	2b01      	cmp	r3, #1
 8003b98:	d00a      	beq.n	8003bb0 <_raise_r+0x4c>
 8003b9a:	1c59      	adds	r1, r3, #1
 8003b9c:	d103      	bne.n	8003ba6 <_raise_r+0x42>
 8003b9e:	2316      	movs	r3, #22
 8003ba0:	6003      	str	r3, [r0, #0]
 8003ba2:	2001      	movs	r0, #1
 8003ba4:	e7e7      	b.n	8003b76 <_raise_r+0x12>
 8003ba6:	2400      	movs	r4, #0
 8003ba8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8003bac:	4628      	mov	r0, r5
 8003bae:	4798      	blx	r3
 8003bb0:	2000      	movs	r0, #0
 8003bb2:	e7e0      	b.n	8003b76 <_raise_r+0x12>

08003bb4 <raise>:
 8003bb4:	4b02      	ldr	r3, [pc, #8]	; (8003bc0 <raise+0xc>)
 8003bb6:	4601      	mov	r1, r0
 8003bb8:	6818      	ldr	r0, [r3, #0]
 8003bba:	f7ff bfd3 	b.w	8003b64 <_raise_r>
 8003bbe:	bf00      	nop
 8003bc0:	2000007c 	.word	0x2000007c

08003bc4 <_kill_r>:
 8003bc4:	b538      	push	{r3, r4, r5, lr}
 8003bc6:	4d07      	ldr	r5, [pc, #28]	; (8003be4 <_kill_r+0x20>)
 8003bc8:	2300      	movs	r3, #0
 8003bca:	4604      	mov	r4, r0
 8003bcc:	4608      	mov	r0, r1
 8003bce:	4611      	mov	r1, r2
 8003bd0:	602b      	str	r3, [r5, #0]
 8003bd2:	f7fc fe89 	bl	80008e8 <_kill>
 8003bd6:	1c43      	adds	r3, r0, #1
 8003bd8:	d102      	bne.n	8003be0 <_kill_r+0x1c>
 8003bda:	682b      	ldr	r3, [r5, #0]
 8003bdc:	b103      	cbz	r3, 8003be0 <_kill_r+0x1c>
 8003bde:	6023      	str	r3, [r4, #0]
 8003be0:	bd38      	pop	{r3, r4, r5, pc}
 8003be2:	bf00      	nop
 8003be4:	20000288 	.word	0x20000288

08003be8 <_getpid_r>:
 8003be8:	f7fc be76 	b.w	80008d8 <_getpid>

08003bec <__swhatbuf_r>:
 8003bec:	b570      	push	{r4, r5, r6, lr}
 8003bee:	460c      	mov	r4, r1
 8003bf0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003bf4:	2900      	cmp	r1, #0
 8003bf6:	b096      	sub	sp, #88	; 0x58
 8003bf8:	4615      	mov	r5, r2
 8003bfa:	461e      	mov	r6, r3
 8003bfc:	da0d      	bge.n	8003c1a <__swhatbuf_r+0x2e>
 8003bfe:	89a3      	ldrh	r3, [r4, #12]
 8003c00:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003c04:	f04f 0100 	mov.w	r1, #0
 8003c08:	bf0c      	ite	eq
 8003c0a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8003c0e:	2340      	movne	r3, #64	; 0x40
 8003c10:	2000      	movs	r0, #0
 8003c12:	6031      	str	r1, [r6, #0]
 8003c14:	602b      	str	r3, [r5, #0]
 8003c16:	b016      	add	sp, #88	; 0x58
 8003c18:	bd70      	pop	{r4, r5, r6, pc}
 8003c1a:	466a      	mov	r2, sp
 8003c1c:	f000 f848 	bl	8003cb0 <_fstat_r>
 8003c20:	2800      	cmp	r0, #0
 8003c22:	dbec      	blt.n	8003bfe <__swhatbuf_r+0x12>
 8003c24:	9901      	ldr	r1, [sp, #4]
 8003c26:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8003c2a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8003c2e:	4259      	negs	r1, r3
 8003c30:	4159      	adcs	r1, r3
 8003c32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003c36:	e7eb      	b.n	8003c10 <__swhatbuf_r+0x24>

08003c38 <__smakebuf_r>:
 8003c38:	898b      	ldrh	r3, [r1, #12]
 8003c3a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003c3c:	079d      	lsls	r5, r3, #30
 8003c3e:	4606      	mov	r6, r0
 8003c40:	460c      	mov	r4, r1
 8003c42:	d507      	bpl.n	8003c54 <__smakebuf_r+0x1c>
 8003c44:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003c48:	6023      	str	r3, [r4, #0]
 8003c4a:	6123      	str	r3, [r4, #16]
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	6163      	str	r3, [r4, #20]
 8003c50:	b002      	add	sp, #8
 8003c52:	bd70      	pop	{r4, r5, r6, pc}
 8003c54:	ab01      	add	r3, sp, #4
 8003c56:	466a      	mov	r2, sp
 8003c58:	f7ff ffc8 	bl	8003bec <__swhatbuf_r>
 8003c5c:	9900      	ldr	r1, [sp, #0]
 8003c5e:	4605      	mov	r5, r0
 8003c60:	4630      	mov	r0, r6
 8003c62:	f7ff fab3 	bl	80031cc <_malloc_r>
 8003c66:	b948      	cbnz	r0, 8003c7c <__smakebuf_r+0x44>
 8003c68:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003c6c:	059a      	lsls	r2, r3, #22
 8003c6e:	d4ef      	bmi.n	8003c50 <__smakebuf_r+0x18>
 8003c70:	f023 0303 	bic.w	r3, r3, #3
 8003c74:	f043 0302 	orr.w	r3, r3, #2
 8003c78:	81a3      	strh	r3, [r4, #12]
 8003c7a:	e7e3      	b.n	8003c44 <__smakebuf_r+0xc>
 8003c7c:	89a3      	ldrh	r3, [r4, #12]
 8003c7e:	6020      	str	r0, [r4, #0]
 8003c80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c84:	81a3      	strh	r3, [r4, #12]
 8003c86:	9b00      	ldr	r3, [sp, #0]
 8003c88:	6163      	str	r3, [r4, #20]
 8003c8a:	9b01      	ldr	r3, [sp, #4]
 8003c8c:	6120      	str	r0, [r4, #16]
 8003c8e:	b15b      	cbz	r3, 8003ca8 <__smakebuf_r+0x70>
 8003c90:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003c94:	4630      	mov	r0, r6
 8003c96:	f000 f81d 	bl	8003cd4 <_isatty_r>
 8003c9a:	b128      	cbz	r0, 8003ca8 <__smakebuf_r+0x70>
 8003c9c:	89a3      	ldrh	r3, [r4, #12]
 8003c9e:	f023 0303 	bic.w	r3, r3, #3
 8003ca2:	f043 0301 	orr.w	r3, r3, #1
 8003ca6:	81a3      	strh	r3, [r4, #12]
 8003ca8:	89a3      	ldrh	r3, [r4, #12]
 8003caa:	431d      	orrs	r5, r3
 8003cac:	81a5      	strh	r5, [r4, #12]
 8003cae:	e7cf      	b.n	8003c50 <__smakebuf_r+0x18>

08003cb0 <_fstat_r>:
 8003cb0:	b538      	push	{r3, r4, r5, lr}
 8003cb2:	4d07      	ldr	r5, [pc, #28]	; (8003cd0 <_fstat_r+0x20>)
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	4604      	mov	r4, r0
 8003cb8:	4608      	mov	r0, r1
 8003cba:	4611      	mov	r1, r2
 8003cbc:	602b      	str	r3, [r5, #0]
 8003cbe:	f7fc fe72 	bl	80009a6 <_fstat>
 8003cc2:	1c43      	adds	r3, r0, #1
 8003cc4:	d102      	bne.n	8003ccc <_fstat_r+0x1c>
 8003cc6:	682b      	ldr	r3, [r5, #0]
 8003cc8:	b103      	cbz	r3, 8003ccc <_fstat_r+0x1c>
 8003cca:	6023      	str	r3, [r4, #0]
 8003ccc:	bd38      	pop	{r3, r4, r5, pc}
 8003cce:	bf00      	nop
 8003cd0:	20000288 	.word	0x20000288

08003cd4 <_isatty_r>:
 8003cd4:	b538      	push	{r3, r4, r5, lr}
 8003cd6:	4d06      	ldr	r5, [pc, #24]	; (8003cf0 <_isatty_r+0x1c>)
 8003cd8:	2300      	movs	r3, #0
 8003cda:	4604      	mov	r4, r0
 8003cdc:	4608      	mov	r0, r1
 8003cde:	602b      	str	r3, [r5, #0]
 8003ce0:	f7fc fe71 	bl	80009c6 <_isatty>
 8003ce4:	1c43      	adds	r3, r0, #1
 8003ce6:	d102      	bne.n	8003cee <_isatty_r+0x1a>
 8003ce8:	682b      	ldr	r3, [r5, #0]
 8003cea:	b103      	cbz	r3, 8003cee <_isatty_r+0x1a>
 8003cec:	6023      	str	r3, [r4, #0]
 8003cee:	bd38      	pop	{r3, r4, r5, pc}
 8003cf0:	20000288 	.word	0x20000288

08003cf4 <_init>:
 8003cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cf6:	bf00      	nop
 8003cf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cfa:	bc08      	pop	{r3}
 8003cfc:	469e      	mov	lr, r3
 8003cfe:	4770      	bx	lr

08003d00 <_fini>:
 8003d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d02:	bf00      	nop
 8003d04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d06:	bc08      	pop	{r3}
 8003d08:	469e      	mov	lr, r3
 8003d0a:	4770      	bx	lr
