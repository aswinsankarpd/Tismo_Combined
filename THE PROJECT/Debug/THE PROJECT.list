
THE PROJECT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000050a0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000238  08005240  08005240  00015240  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005478  08005478  000200a4  2**0
                  CONTENTS
  4 .ARM          00000008  08005478  08005478  00015478  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005480  08005480  000200a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005480  08005480  00015480  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005484  08005484  00015484  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a4  20000000  08005488  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000340  200000a4  0800552c  000200a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003e4  0800552c  000203e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000fed8  00000000  00000000  00020117  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003292  00000000  00000000  0002ffef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ec8  00000000  00000000  00033288  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b1a  00000000  00000000  00034150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000069ff  00000000  00000000  00034c6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001aa53  00000000  00000000  0003b669  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009accd  00000000  00000000  000560bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004434  00000000  00000000  000f0d8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000079  00000000  00000000  000f51c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000a4 	.word	0x200000a4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005228 	.word	0x08005228

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000a8 	.word	0x200000a8
 80001dc:	08005228 	.word	0x08005228

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b970 	b.w	80005a8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	460d      	mov	r5, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	460f      	mov	r7, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4694      	mov	ip, r2
 80002f4:	d965      	bls.n	80003c2 <__udivmoddi4+0xe2>
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	b143      	cbz	r3, 800030e <__udivmoddi4+0x2e>
 80002fc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000300:	f1c3 0220 	rsb	r2, r3, #32
 8000304:	409f      	lsls	r7, r3
 8000306:	fa20 f202 	lsr.w	r2, r0, r2
 800030a:	4317      	orrs	r7, r2
 800030c:	409c      	lsls	r4, r3
 800030e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000312:	fa1f f58c 	uxth.w	r5, ip
 8000316:	fbb7 f1fe 	udiv	r1, r7, lr
 800031a:	0c22      	lsrs	r2, r4, #16
 800031c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000320:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000324:	fb01 f005 	mul.w	r0, r1, r5
 8000328:	4290      	cmp	r0, r2
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x62>
 800032c:	eb1c 0202 	adds.w	r2, ip, r2
 8000330:	f101 37ff 	add.w	r7, r1, #4294967295
 8000334:	f080 811c 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000338:	4290      	cmp	r0, r2
 800033a:	f240 8119 	bls.w	8000570 <__udivmoddi4+0x290>
 800033e:	3902      	subs	r1, #2
 8000340:	4462      	add	r2, ip
 8000342:	1a12      	subs	r2, r2, r0
 8000344:	b2a4      	uxth	r4, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000352:	fb00 f505 	mul.w	r5, r0, r5
 8000356:	42a5      	cmp	r5, r4
 8000358:	d90a      	bls.n	8000370 <__udivmoddi4+0x90>
 800035a:	eb1c 0404 	adds.w	r4, ip, r4
 800035e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000362:	f080 8107 	bcs.w	8000574 <__udivmoddi4+0x294>
 8000366:	42a5      	cmp	r5, r4
 8000368:	f240 8104 	bls.w	8000574 <__udivmoddi4+0x294>
 800036c:	4464      	add	r4, ip
 800036e:	3802      	subs	r0, #2
 8000370:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000374:	1b64      	subs	r4, r4, r5
 8000376:	2100      	movs	r1, #0
 8000378:	b11e      	cbz	r6, 8000382 <__udivmoddi4+0xa2>
 800037a:	40dc      	lsrs	r4, r3
 800037c:	2300      	movs	r3, #0
 800037e:	e9c6 4300 	strd	r4, r3, [r6]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0xbc>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80ed 	beq.w	800056a <__udivmoddi4+0x28a>
 8000390:	2100      	movs	r1, #0
 8000392:	e9c6 0500 	strd	r0, r5, [r6]
 8000396:	4608      	mov	r0, r1
 8000398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039c:	fab3 f183 	clz	r1, r3
 80003a0:	2900      	cmp	r1, #0
 80003a2:	d149      	bne.n	8000438 <__udivmoddi4+0x158>
 80003a4:	42ab      	cmp	r3, r5
 80003a6:	d302      	bcc.n	80003ae <__udivmoddi4+0xce>
 80003a8:	4282      	cmp	r2, r0
 80003aa:	f200 80f8 	bhi.w	800059e <__udivmoddi4+0x2be>
 80003ae:	1a84      	subs	r4, r0, r2
 80003b0:	eb65 0203 	sbc.w	r2, r5, r3
 80003b4:	2001      	movs	r0, #1
 80003b6:	4617      	mov	r7, r2
 80003b8:	2e00      	cmp	r6, #0
 80003ba:	d0e2      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	e9c6 4700 	strd	r4, r7, [r6]
 80003c0:	e7df      	b.n	8000382 <__udivmoddi4+0xa2>
 80003c2:	b902      	cbnz	r2, 80003c6 <__udivmoddi4+0xe6>
 80003c4:	deff      	udf	#255	; 0xff
 80003c6:	fab2 f382 	clz	r3, r2
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8090 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d0:	1a8a      	subs	r2, r1, r2
 80003d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d6:	fa1f fe8c 	uxth.w	lr, ip
 80003da:	2101      	movs	r1, #1
 80003dc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003e0:	fb07 2015 	mls	r0, r7, r5, r2
 80003e4:	0c22      	lsrs	r2, r4, #16
 80003e6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ea:	fb0e f005 	mul.w	r0, lr, r5
 80003ee:	4290      	cmp	r0, r2
 80003f0:	d908      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f2:	eb1c 0202 	adds.w	r2, ip, r2
 80003f6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4290      	cmp	r0, r2
 80003fe:	f200 80cb 	bhi.w	8000598 <__udivmoddi4+0x2b8>
 8000402:	4645      	mov	r5, r8
 8000404:	1a12      	subs	r2, r2, r0
 8000406:	b2a4      	uxth	r4, r4
 8000408:	fbb2 f0f7 	udiv	r0, r2, r7
 800040c:	fb07 2210 	mls	r2, r7, r0, r2
 8000410:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000414:	fb0e fe00 	mul.w	lr, lr, r0
 8000418:	45a6      	cmp	lr, r4
 800041a:	d908      	bls.n	800042e <__udivmoddi4+0x14e>
 800041c:	eb1c 0404 	adds.w	r4, ip, r4
 8000420:	f100 32ff 	add.w	r2, r0, #4294967295
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x14c>
 8000426:	45a6      	cmp	lr, r4
 8000428:	f200 80bb 	bhi.w	80005a2 <__udivmoddi4+0x2c2>
 800042c:	4610      	mov	r0, r2
 800042e:	eba4 040e 	sub.w	r4, r4, lr
 8000432:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000436:	e79f      	b.n	8000378 <__udivmoddi4+0x98>
 8000438:	f1c1 0720 	rsb	r7, r1, #32
 800043c:	408b      	lsls	r3, r1
 800043e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000442:	ea4c 0c03 	orr.w	ip, ip, r3
 8000446:	fa05 f401 	lsl.w	r4, r5, r1
 800044a:	fa20 f307 	lsr.w	r3, r0, r7
 800044e:	40fd      	lsrs	r5, r7
 8000450:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000454:	4323      	orrs	r3, r4
 8000456:	fbb5 f8f9 	udiv	r8, r5, r9
 800045a:	fa1f fe8c 	uxth.w	lr, ip
 800045e:	fb09 5518 	mls	r5, r9, r8, r5
 8000462:	0c1c      	lsrs	r4, r3, #16
 8000464:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000468:	fb08 f50e 	mul.w	r5, r8, lr
 800046c:	42a5      	cmp	r5, r4
 800046e:	fa02 f201 	lsl.w	r2, r2, r1
 8000472:	fa00 f001 	lsl.w	r0, r0, r1
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000480:	f080 8088 	bcs.w	8000594 <__udivmoddi4+0x2b4>
 8000484:	42a5      	cmp	r5, r4
 8000486:	f240 8085 	bls.w	8000594 <__udivmoddi4+0x2b4>
 800048a:	f1a8 0802 	sub.w	r8, r8, #2
 800048e:	4464      	add	r4, ip
 8000490:	1b64      	subs	r4, r4, r5
 8000492:	b29d      	uxth	r5, r3
 8000494:	fbb4 f3f9 	udiv	r3, r4, r9
 8000498:	fb09 4413 	mls	r4, r9, r3, r4
 800049c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004a0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004a4:	45a6      	cmp	lr, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f103 35ff 	add.w	r5, r3, #4294967295
 80004b0:	d26c      	bcs.n	800058c <__udivmoddi4+0x2ac>
 80004b2:	45a6      	cmp	lr, r4
 80004b4:	d96a      	bls.n	800058c <__udivmoddi4+0x2ac>
 80004b6:	3b02      	subs	r3, #2
 80004b8:	4464      	add	r4, ip
 80004ba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004be:	fba3 9502 	umull	r9, r5, r3, r2
 80004c2:	eba4 040e 	sub.w	r4, r4, lr
 80004c6:	42ac      	cmp	r4, r5
 80004c8:	46c8      	mov	r8, r9
 80004ca:	46ae      	mov	lr, r5
 80004cc:	d356      	bcc.n	800057c <__udivmoddi4+0x29c>
 80004ce:	d053      	beq.n	8000578 <__udivmoddi4+0x298>
 80004d0:	b156      	cbz	r6, 80004e8 <__udivmoddi4+0x208>
 80004d2:	ebb0 0208 	subs.w	r2, r0, r8
 80004d6:	eb64 040e 	sbc.w	r4, r4, lr
 80004da:	fa04 f707 	lsl.w	r7, r4, r7
 80004de:	40ca      	lsrs	r2, r1
 80004e0:	40cc      	lsrs	r4, r1
 80004e2:	4317      	orrs	r7, r2
 80004e4:	e9c6 7400 	strd	r7, r4, [r6]
 80004e8:	4618      	mov	r0, r3
 80004ea:	2100      	movs	r1, #0
 80004ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004f0:	f1c3 0120 	rsb	r1, r3, #32
 80004f4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004f8:	fa20 f201 	lsr.w	r2, r0, r1
 80004fc:	fa25 f101 	lsr.w	r1, r5, r1
 8000500:	409d      	lsls	r5, r3
 8000502:	432a      	orrs	r2, r5
 8000504:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000508:	fa1f fe8c 	uxth.w	lr, ip
 800050c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000510:	fb07 1510 	mls	r5, r7, r0, r1
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800051a:	fb00 f50e 	mul.w	r5, r0, lr
 800051e:	428d      	cmp	r5, r1
 8000520:	fa04 f403 	lsl.w	r4, r4, r3
 8000524:	d908      	bls.n	8000538 <__udivmoddi4+0x258>
 8000526:	eb1c 0101 	adds.w	r1, ip, r1
 800052a:	f100 38ff 	add.w	r8, r0, #4294967295
 800052e:	d22f      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000530:	428d      	cmp	r5, r1
 8000532:	d92d      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000534:	3802      	subs	r0, #2
 8000536:	4461      	add	r1, ip
 8000538:	1b49      	subs	r1, r1, r5
 800053a:	b292      	uxth	r2, r2
 800053c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000540:	fb07 1115 	mls	r1, r7, r5, r1
 8000544:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000548:	fb05 f10e 	mul.w	r1, r5, lr
 800054c:	4291      	cmp	r1, r2
 800054e:	d908      	bls.n	8000562 <__udivmoddi4+0x282>
 8000550:	eb1c 0202 	adds.w	r2, ip, r2
 8000554:	f105 38ff 	add.w	r8, r5, #4294967295
 8000558:	d216      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 800055a:	4291      	cmp	r1, r2
 800055c:	d914      	bls.n	8000588 <__udivmoddi4+0x2a8>
 800055e:	3d02      	subs	r5, #2
 8000560:	4462      	add	r2, ip
 8000562:	1a52      	subs	r2, r2, r1
 8000564:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000568:	e738      	b.n	80003dc <__udivmoddi4+0xfc>
 800056a:	4631      	mov	r1, r6
 800056c:	4630      	mov	r0, r6
 800056e:	e708      	b.n	8000382 <__udivmoddi4+0xa2>
 8000570:	4639      	mov	r1, r7
 8000572:	e6e6      	b.n	8000342 <__udivmoddi4+0x62>
 8000574:	4610      	mov	r0, r2
 8000576:	e6fb      	b.n	8000370 <__udivmoddi4+0x90>
 8000578:	4548      	cmp	r0, r9
 800057a:	d2a9      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 800057c:	ebb9 0802 	subs.w	r8, r9, r2
 8000580:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000584:	3b01      	subs	r3, #1
 8000586:	e7a3      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000588:	4645      	mov	r5, r8
 800058a:	e7ea      	b.n	8000562 <__udivmoddi4+0x282>
 800058c:	462b      	mov	r3, r5
 800058e:	e794      	b.n	80004ba <__udivmoddi4+0x1da>
 8000590:	4640      	mov	r0, r8
 8000592:	e7d1      	b.n	8000538 <__udivmoddi4+0x258>
 8000594:	46d0      	mov	r8, sl
 8000596:	e77b      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000598:	3d02      	subs	r5, #2
 800059a:	4462      	add	r2, ip
 800059c:	e732      	b.n	8000404 <__udivmoddi4+0x124>
 800059e:	4608      	mov	r0, r1
 80005a0:	e70a      	b.n	80003b8 <__udivmoddi4+0xd8>
 80005a2:	4464      	add	r4, ip
 80005a4:	3802      	subs	r0, #2
 80005a6:	e742      	b.n	800042e <__udivmoddi4+0x14e>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <adc_main>:
 *      Author: Aswin Sankar
 */

#include "adc_main.h"

void adc_main(int param){
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
	adc_init();
 80005b4:	f003 fb88 	bl	8003cc8 <adc_init>
}
 80005b8:	bf00      	nop
 80005ba:	3708      	adds	r7, #8
 80005bc:	46bd      	mov	sp, r7
 80005be:	bd80      	pop	{r7, pc}

080005c0 <cbuff_Dequeue>:

#include "cbuff_Dequeue.h"

static int buffer_size_index = 0;

void cbuff_Dequeue(CircularBuffer* cb){
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b084      	sub	sp, #16
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]

	uint8_t *tail = CircularBuffer_GetTail(cb);
 80005c8:	6878      	ldr	r0, [r7, #4]
 80005ca:	f000 f89b 	bl	8000704 <CircularBuffer_GetTail>
 80005ce:	60f8      	str	r0, [r7, #12]
	uint8_t SIZE = CircularBuffer_GetSize(cb);
 80005d0:	6878      	ldr	r0, [r7, #4]
 80005d2:	f000 f8a3 	bl	800071c <CircularBuffer_GetSize>
 80005d6:	4603      	mov	r3, r0
 80005d8:	72fb      	strb	r3, [r7, #11]

	tail = tail + buffer_size_index;
 80005da:	4b0f      	ldr	r3, [pc, #60]	; (8000618 <cbuff_Dequeue+0x58>)
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	461a      	mov	r2, r3
 80005e0:	68fb      	ldr	r3, [r7, #12]
 80005e2:	4413      	add	r3, r2
 80005e4:	60fb      	str	r3, [r7, #12]
	buffer_size_index++;
 80005e6:	4b0c      	ldr	r3, [pc, #48]	; (8000618 <cbuff_Dequeue+0x58>)
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	3301      	adds	r3, #1
 80005ec:	4a0a      	ldr	r2, [pc, #40]	; (8000618 <cbuff_Dequeue+0x58>)
 80005ee:	6013      	str	r3, [r2, #0]

	HAL_UART_Transmit_IT(&huart1, tail, (uint16_t)sizeof(char));
 80005f0:	2201      	movs	r2, #1
 80005f2:	68f9      	ldr	r1, [r7, #12]
 80005f4:	4809      	ldr	r0, [pc, #36]	; (800061c <cbuff_Dequeue+0x5c>)
 80005f6:	f002 fb8a 	bl	8002d0e <HAL_UART_Transmit_IT>

	if (buffer_size_index == SIZE){
 80005fa:	7afa      	ldrb	r2, [r7, #11]
 80005fc:	4b06      	ldr	r3, [pc, #24]	; (8000618 <cbuff_Dequeue+0x58>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	429a      	cmp	r2, r3
 8000602:	d102      	bne.n	800060a <cbuff_Dequeue+0x4a>
		buffer_size_index = 0;
 8000604:	4b04      	ldr	r3, [pc, #16]	; (8000618 <cbuff_Dequeue+0x58>)
 8000606:	2200      	movs	r2, #0
 8000608:	601a      	str	r2, [r3, #0]
	}

	Rx_UART_Intrpt();
 800060a:	f003 fb77 	bl	8003cfc <Rx_UART_Intrpt>

}
 800060e:	bf00      	nop
 8000610:	3710      	adds	r7, #16
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	200000c0 	.word	0x200000c0
 800061c:	20000204 	.word	0x20000204

08000620 <cbuff_Enqueue>:
 */

#include "cbuff_Enqueue.h"
static uint8_t buffer_index=0;

void cbuff_Enqueue(char* pData, CircularBuffer* cb){
 8000620:	b580      	push	{r7, lr}
 8000622:	b086      	sub	sp, #24
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
 8000628:	6039      	str	r1, [r7, #0]

	if (strcmp(pData,"d") == 0){
 800062a:	4920      	ldr	r1, [pc, #128]	; (80006ac <cbuff_Enqueue+0x8c>)
 800062c:	6878      	ldr	r0, [r7, #4]
 800062e:	f7ff fdd7 	bl	80001e0 <strcmp>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d102      	bne.n	800063e <cbuff_Enqueue+0x1e>
		cbuff_Dequeue(cb);
 8000638:	6838      	ldr	r0, [r7, #0]
 800063a:	f7ff ffc1 	bl	80005c0 <cbuff_Dequeue>
	}

	uint8_t SIZE = CircularBuffer_GetSize(cb);
 800063e:	6838      	ldr	r0, [r7, #0]
 8000640:	f000 f86c 	bl	800071c <CircularBuffer_GetSize>
 8000644:	4603      	mov	r3, r0
 8000646:	75fb      	strb	r3, [r7, #23]
	uint8_t *head = CircularBuffer_GetHead(cb);
 8000648:	6838      	ldr	r0, [r7, #0]
 800064a:	f000 f84f 	bl	80006ec <CircularBuffer_GetHead>
 800064e:	6138      	str	r0, [r7, #16]
	uint8_t *tail = CircularBuffer_GetTail(cb);
 8000650:	6838      	ldr	r0, [r7, #0]
 8000652:	f000 f857 	bl	8000704 <CircularBuffer_GetTail>
 8000656:	60f8      	str	r0, [r7, #12]

	tail = tail + buffer_index;
 8000658:	4b15      	ldr	r3, [pc, #84]	; (80006b0 <cbuff_Enqueue+0x90>)
 800065a:	781b      	ldrb	r3, [r3, #0]
 800065c:	461a      	mov	r2, r3
 800065e:	68fb      	ldr	r3, [r7, #12]
 8000660:	4413      	add	r3, r2
 8000662:	60fb      	str	r3, [r7, #12]

	HAL_UART_Transmit_IT(&huart1,(uint8_t*)tail,(uint16_t)sizeof(tail));
 8000664:	2204      	movs	r2, #4
 8000666:	68f9      	ldr	r1, [r7, #12]
 8000668:	4812      	ldr	r0, [pc, #72]	; (80006b4 <cbuff_Enqueue+0x94>)
 800066a:	f002 fb50 	bl	8002d0e <HAL_UART_Transmit_IT>

	if (SIZE == buffer_index){
 800066e:	4b10      	ldr	r3, [pc, #64]	; (80006b0 <cbuff_Enqueue+0x90>)
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	7dfa      	ldrb	r2, [r7, #23]
 8000674:	429a      	cmp	r2, r3
 8000676:	d109      	bne.n	800068c <cbuff_Enqueue+0x6c>
		tail = head;
 8000678:	693b      	ldr	r3, [r7, #16]
 800067a:	60fb      	str	r3, [r7, #12]
		*tail = *pData;
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	781a      	ldrb	r2, [r3, #0]
 8000680:	68fb      	ldr	r3, [r7, #12]
 8000682:	701a      	strb	r2, [r3, #0]
		buffer_index=0;
 8000684:	4b0a      	ldr	r3, [pc, #40]	; (80006b0 <cbuff_Enqueue+0x90>)
 8000686:	2200      	movs	r2, #0
 8000688:	701a      	strb	r2, [r3, #0]
 800068a:	e009      	b.n	80006a0 <cbuff_Enqueue+0x80>
	}
	else{
		*tail = *pData;
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	781a      	ldrb	r2, [r3, #0]
 8000690:	68fb      	ldr	r3, [r7, #12]
 8000692:	701a      	strb	r2, [r3, #0]
		buffer_index++;
 8000694:	4b06      	ldr	r3, [pc, #24]	; (80006b0 <cbuff_Enqueue+0x90>)
 8000696:	781b      	ldrb	r3, [r3, #0]
 8000698:	3301      	adds	r3, #1
 800069a:	b2da      	uxtb	r2, r3
 800069c:	4b04      	ldr	r3, [pc, #16]	; (80006b0 <cbuff_Enqueue+0x90>)
 800069e:	701a      	strb	r2, [r3, #0]
	}

	Rx_UART_Intrpt();
 80006a0:	f003 fb2c 	bl	8003cfc <Rx_UART_Intrpt>
}
 80006a4:	bf00      	nop
 80006a6:	3718      	adds	r7, #24
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}
 80006ac:	08005240 	.word	0x08005240
 80006b0:	200000c4 	.word	0x200000c4
 80006b4:	20000204 	.word	0x20000204

080006b8 <Circular_Buffer_Init>:
 */

#include "cbuff_init.h"
#define SIZE 5

void Circular_Buffer_Init(CircularBuffer *cb) {
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b082      	sub	sp, #8
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
    cb->buffer = (uint8_t *)malloc(SIZE * sizeof(uint8_t));
 80006c0:	2005      	movs	r0, #5
 80006c2:	f003 fb5d 	bl	8003d80 <malloc>
 80006c6:	4603      	mov	r3, r0
 80006c8:	461a      	mov	r2, r3
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	601a      	str	r2, [r3, #0]
    cb->head = cb->buffer;
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	681a      	ldr	r2, [r3, #0]
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	605a      	str	r2, [r3, #4]
    cb->tail = cb->buffer;
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	681a      	ldr	r2, [r3, #0]
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	609a      	str	r2, [r3, #8]
    cb->size = SIZE;
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	2205      	movs	r2, #5
 80006e2:	731a      	strb	r2, [r3, #12]
}
 80006e4:	bf00      	nop
 80006e6:	3708      	adds	r7, #8
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}

080006ec <CircularBuffer_GetHead>:

uint8_t* CircularBuffer_GetHead(CircularBuffer *cb) {
 80006ec:	b480      	push	{r7}
 80006ee:	b083      	sub	sp, #12
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
    return cb->head;
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	685b      	ldr	r3, [r3, #4]
}
 80006f8:	4618      	mov	r0, r3
 80006fa:	370c      	adds	r7, #12
 80006fc:	46bd      	mov	sp, r7
 80006fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000702:	4770      	bx	lr

08000704 <CircularBuffer_GetTail>:

uint8_t* CircularBuffer_GetTail(CircularBuffer *cb) {
 8000704:	b480      	push	{r7}
 8000706:	b083      	sub	sp, #12
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
    return cb->tail;
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	689b      	ldr	r3, [r3, #8]
}
 8000710:	4618      	mov	r0, r3
 8000712:	370c      	adds	r7, #12
 8000714:	46bd      	mov	sp, r7
 8000716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071a:	4770      	bx	lr

0800071c <CircularBuffer_GetSize>:

uint8_t CircularBuffer_GetSize(CircularBuffer *cb) {
 800071c:	b480      	push	{r7}
 800071e:	b083      	sub	sp, #12
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
    return cb->size;
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	7b1b      	ldrb	r3, [r3, #12]
}
 8000728:	4618      	mov	r0, r3
 800072a:	370c      	adds	r7, #12
 800072c:	46bd      	mov	sp, r7
 800072e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000732:	4770      	bx	lr

08000734 <cbuff_main>:
 */
#include "cbuff_main.h"

static CircularBuffer cb;

void cbuff_main(int param){
 8000734:	b580      	push	{r7, lr}
 8000736:	b082      	sub	sp, #8
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
	Circular_Buffer_Init(&cb);
 800073c:	4803      	ldr	r0, [pc, #12]	; (800074c <cbuff_main+0x18>)
 800073e:	f7ff ffbb 	bl	80006b8 <Circular_Buffer_Init>
}
 8000742:	bf00      	nop
 8000744:	3708      	adds	r7, #8
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	200000c8 	.word	0x200000c8

08000750 <get_cb_addr>:

CircularBuffer* get_cb_addr(){
 8000750:	b480      	push	{r7}
 8000752:	af00      	add	r7, sp, #0
	return &cb;
 8000754:	4b02      	ldr	r3, [pc, #8]	; (8000760 <get_cb_addr+0x10>)
}
 8000756:	4618      	mov	r0, r3
 8000758:	46bd      	mov	sp, r7
 800075a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075e:	4770      	bx	lr
 8000760:	200000c8 	.word	0x200000c8

08000764 <CommandLineInterface>:
 *      Author: Aswin Sankar
 */

#include "CommandLineInterface.h"

void CommandLineInterface(){
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
	Rx_UART_Intrpt();
 8000768:	f003 fac8 	bl	8003cfc <Rx_UART_Intrpt>
}
 800076c:	bf00      	nop
 800076e:	bd80      	pop	{r7, pc}

08000770 <command_parser>:
char *command;
char *sub_command;
char *value;
static int cbuff_flag = 0;

void command_parser(char *Command_String){
 8000770:	b580      	push	{r7, lr}
 8000772:	b086      	sub	sp, #24
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
    command = strtok(Command_String, "_");
 8000778:	4943      	ldr	r1, [pc, #268]	; (8000888 <command_parser+0x118>)
 800077a:	6878      	ldr	r0, [r7, #4]
 800077c:	f003 fd5c 	bl	8004238 <strtok>
 8000780:	4603      	mov	r3, r0
 8000782:	4a42      	ldr	r2, [pc, #264]	; (800088c <command_parser+0x11c>)
 8000784:	6013      	str	r3, [r2, #0]
    sub_command = strtok(NULL, "_");
 8000786:	4940      	ldr	r1, [pc, #256]	; (8000888 <command_parser+0x118>)
 8000788:	2000      	movs	r0, #0
 800078a:	f003 fd55 	bl	8004238 <strtok>
 800078e:	4603      	mov	r3, r0
 8000790:	4a3f      	ldr	r2, [pc, #252]	; (8000890 <command_parser+0x120>)
 8000792:	6013      	str	r3, [r2, #0]
    value = strtok(NULL,"_");
 8000794:	493c      	ldr	r1, [pc, #240]	; (8000888 <command_parser+0x118>)
 8000796:	2000      	movs	r0, #0
 8000798:	f003 fd4e 	bl	8004238 <strtok>
 800079c:	4603      	mov	r3, r0
 800079e:	4a3d      	ldr	r2, [pc, #244]	; (8000894 <command_parser+0x124>)
 80007a0:	6013      	str	r3, [r2, #0]
    int value_param = 0;
 80007a2:	2300      	movs	r3, #0
 80007a4:	613b      	str	r3, [r7, #16]
    int numCommands = sizeof(commandTable) / sizeof(commandTable[0]);
 80007a6:	2305      	movs	r3, #5
 80007a8:	60fb      	str	r3, [r7, #12]


    for (int i = 0; i < numCommands; i++) {
 80007aa:	2300      	movs	r3, #0
 80007ac:	617b      	str	r3, [r7, #20]
 80007ae:	e062      	b.n	8000876 <command_parser+0x106>
           if ((strcmp(command, commandTable[i].command) == 0) && (strcmp(sub_command,commandTable[i].sub_command) == 0)) {
 80007b0:	4b36      	ldr	r3, [pc, #216]	; (800088c <command_parser+0x11c>)
 80007b2:	6818      	ldr	r0, [r3, #0]
 80007b4:	4938      	ldr	r1, [pc, #224]	; (8000898 <command_parser+0x128>)
 80007b6:	697a      	ldr	r2, [r7, #20]
 80007b8:	4613      	mov	r3, r2
 80007ba:	005b      	lsls	r3, r3, #1
 80007bc:	4413      	add	r3, r2
 80007be:	009b      	lsls	r3, r3, #2
 80007c0:	440b      	add	r3, r1
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	4619      	mov	r1, r3
 80007c6:	f7ff fd0b 	bl	80001e0 <strcmp>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d14f      	bne.n	8000870 <command_parser+0x100>
 80007d0:	4b2f      	ldr	r3, [pc, #188]	; (8000890 <command_parser+0x120>)
 80007d2:	6818      	ldr	r0, [r3, #0]
 80007d4:	4930      	ldr	r1, [pc, #192]	; (8000898 <command_parser+0x128>)
 80007d6:	697a      	ldr	r2, [r7, #20]
 80007d8:	4613      	mov	r3, r2
 80007da:	005b      	lsls	r3, r3, #1
 80007dc:	4413      	add	r3, r2
 80007de:	009b      	lsls	r3, r3, #2
 80007e0:	440b      	add	r3, r1
 80007e2:	3304      	adds	r3, #4
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	4619      	mov	r1, r3
 80007e8:	f7ff fcfa 	bl	80001e0 <strcmp>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d13e      	bne.n	8000870 <command_parser+0x100>
               if (value != NULL) {
 80007f2:	4b28      	ldr	r3, [pc, #160]	; (8000894 <command_parser+0x124>)
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d01b      	beq.n	8000832 <command_parser+0xc2>
				   value_param = atoi(value);
 80007fa:	4b26      	ldr	r3, [pc, #152]	; (8000894 <command_parser+0x124>)
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	4618      	mov	r0, r3
 8000800:	f003 faba 	bl	8003d78 <atoi>
 8000804:	6138      	str	r0, [r7, #16]
				   commandTable[i].function(value_param);
 8000806:	4924      	ldr	r1, [pc, #144]	; (8000898 <command_parser+0x128>)
 8000808:	697a      	ldr	r2, [r7, #20]
 800080a:	4613      	mov	r3, r2
 800080c:	005b      	lsls	r3, r3, #1
 800080e:	4413      	add	r3, r2
 8000810:	009b      	lsls	r3, r3, #2
 8000812:	440b      	add	r3, r1
 8000814:	3308      	adds	r3, #8
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	6938      	ldr	r0, [r7, #16]
 800081a:	4798      	blx	r3
				   sprintf(message,"COMMAND IS : %s",command);
 800081c:	4b1b      	ldr	r3, [pc, #108]	; (800088c <command_parser+0x11c>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	461a      	mov	r2, r3
 8000822:	491e      	ldr	r1, [pc, #120]	; (800089c <command_parser+0x12c>)
 8000824:	481e      	ldr	r0, [pc, #120]	; (80008a0 <command_parser+0x130>)
 8000826:	f003 fc9b 	bl	8004160 <siprintf>
				   Tx_UART(message);
 800082a:	481d      	ldr	r0, [pc, #116]	; (80008a0 <command_parser+0x130>)
 800082c:	f003 fa90 	bl	8003d50 <Tx_UART>
					commandTable[i].function(value_param);
					cbuff_flag = 1;
					sprintf(message,"COMMAND IS : %s",command);
					Tx_UART(message);
               }
               break;
 8000830:	e026      	b.n	8000880 <command_parser+0x110>
					value_param = atoi(value);
 8000832:	4b18      	ldr	r3, [pc, #96]	; (8000894 <command_parser+0x124>)
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	4618      	mov	r0, r3
 8000838:	f003 fa9e 	bl	8003d78 <atoi>
 800083c:	6138      	str	r0, [r7, #16]
					commandTable[i].function(value_param);
 800083e:	4916      	ldr	r1, [pc, #88]	; (8000898 <command_parser+0x128>)
 8000840:	697a      	ldr	r2, [r7, #20]
 8000842:	4613      	mov	r3, r2
 8000844:	005b      	lsls	r3, r3, #1
 8000846:	4413      	add	r3, r2
 8000848:	009b      	lsls	r3, r3, #2
 800084a:	440b      	add	r3, r1
 800084c:	3308      	adds	r3, #8
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	6938      	ldr	r0, [r7, #16]
 8000852:	4798      	blx	r3
					cbuff_flag = 1;
 8000854:	4b13      	ldr	r3, [pc, #76]	; (80008a4 <command_parser+0x134>)
 8000856:	2201      	movs	r2, #1
 8000858:	601a      	str	r2, [r3, #0]
					sprintf(message,"COMMAND IS : %s",command);
 800085a:	4b0c      	ldr	r3, [pc, #48]	; (800088c <command_parser+0x11c>)
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	461a      	mov	r2, r3
 8000860:	490e      	ldr	r1, [pc, #56]	; (800089c <command_parser+0x12c>)
 8000862:	480f      	ldr	r0, [pc, #60]	; (80008a0 <command_parser+0x130>)
 8000864:	f003 fc7c 	bl	8004160 <siprintf>
					Tx_UART(message);
 8000868:	480d      	ldr	r0, [pc, #52]	; (80008a0 <command_parser+0x130>)
 800086a:	f003 fa71 	bl	8003d50 <Tx_UART>
               break;
 800086e:	e007      	b.n	8000880 <command_parser+0x110>
    for (int i = 0; i < numCommands; i++) {
 8000870:	697b      	ldr	r3, [r7, #20]
 8000872:	3301      	adds	r3, #1
 8000874:	617b      	str	r3, [r7, #20]
 8000876:	697a      	ldr	r2, [r7, #20]
 8000878:	68fb      	ldr	r3, [r7, #12]
 800087a:	429a      	cmp	r2, r3
 800087c:	db98      	blt.n	80007b0 <command_parser+0x40>
           }
       }
}
 800087e:	bf00      	nop
 8000880:	bf00      	nop
 8000882:	3718      	adds	r7, #24
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}
 8000888:	08005268 	.word	0x08005268
 800088c:	2000013c 	.word	0x2000013c
 8000890:	20000140 	.word	0x20000140
 8000894:	20000144 	.word	0x20000144
 8000898:	20000000 	.word	0x20000000
 800089c:	0800526c 	.word	0x0800526c
 80008a0:	200000d8 	.word	0x200000d8
 80008a4:	20000148 	.word	0x20000148

080008a8 <get_cbuff_flag>:

int get_cbuff_flag(){
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0
	return cbuff_flag;
 80008ac:	4b03      	ldr	r3, [pc, #12]	; (80008bc <get_cbuff_flag+0x14>)
 80008ae:	681b      	ldr	r3, [r3, #0]
}
 80008b0:	4618      	mov	r0, r3
 80008b2:	46bd      	mov	sp, r7
 80008b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b8:	4770      	bx	lr
 80008ba:	bf00      	nop
 80008bc:	20000148 	.word	0x20000148

080008c0 <addtobuffer>:
static int Command_Reception_idx = 0;
char Rx_Buffer_1[10];
char Rx_Buffer_2[10];
static int Rx_Over_Flag = 0;

void addtobuffer(char *Rx_Temp_String){
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b082      	sub	sp, #8
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]

	if ((Rx_Temp_String[0] != '\r') && (Rx_Temp_String[0] != '\n')) {
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	781b      	ldrb	r3, [r3, #0]
 80008cc:	2b0d      	cmp	r3, #13
 80008ce:	d011      	beq.n	80008f4 <addtobuffer+0x34>
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	781b      	ldrb	r3, [r3, #0]
 80008d4:	2b0a      	cmp	r3, #10
 80008d6:	d00d      	beq.n	80008f4 <addtobuffer+0x34>
		Rx_Buffer_1[Command_Reception_idx] = Rx_Temp_String[0];
 80008d8:	4b0a      	ldr	r3, [pc, #40]	; (8000904 <addtobuffer+0x44>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	687a      	ldr	r2, [r7, #4]
 80008de:	7811      	ldrb	r1, [r2, #0]
 80008e0:	4a09      	ldr	r2, [pc, #36]	; (8000908 <addtobuffer+0x48>)
 80008e2:	54d1      	strb	r1, [r2, r3]
			Command_Reception_idx++;
 80008e4:	4b07      	ldr	r3, [pc, #28]	; (8000904 <addtobuffer+0x44>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	3301      	adds	r3, #1
 80008ea:	4a06      	ldr	r2, [pc, #24]	; (8000904 <addtobuffer+0x44>)
 80008ec:	6013      	str	r3, [r2, #0]
			CommandLineInterface();
 80008ee:	f7ff ff39 	bl	8000764 <CommandLineInterface>
 80008f2:	e003      	b.n	80008fc <addtobuffer+0x3c>
		}

	else
	{
		Rx_Over_Flag = 1;
 80008f4:	4b05      	ldr	r3, [pc, #20]	; (800090c <addtobuffer+0x4c>)
 80008f6:	2201      	movs	r2, #1
 80008f8:	601a      	str	r2, [r3, #0]
	}

}
 80008fa:	bf00      	nop
 80008fc:	bf00      	nop
 80008fe:	3708      	adds	r7, #8
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}
 8000904:	2000014c 	.word	0x2000014c
 8000908:	20000150 	.word	0x20000150
 800090c:	20000168 	.word	0x20000168

08000910 <buff_copy_callback>:

void buff_copy_callback(){
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
	Rx_Over_Flag = 0 ;
 8000914:	4b0f      	ldr	r3, [pc, #60]	; (8000954 <buff_copy_callback+0x44>)
 8000916:	2200      	movs	r2, #0
 8000918:	601a      	str	r2, [r3, #0]

	memcpy(Rx_Buffer_2, Rx_Buffer_1, strlen(Rx_Buffer_1));
 800091a:	480f      	ldr	r0, [pc, #60]	; (8000958 <buff_copy_callback+0x48>)
 800091c:	f7ff fc6a 	bl	80001f4 <strlen>
 8000920:	4603      	mov	r3, r0
 8000922:	461a      	mov	r2, r3
 8000924:	490c      	ldr	r1, [pc, #48]	; (8000958 <buff_copy_callback+0x48>)
 8000926:	480d      	ldr	r0, [pc, #52]	; (800095c <buff_copy_callback+0x4c>)
 8000928:	f003 fd64 	bl	80043f4 <memcpy>
	command_parser(Rx_Buffer_2);
 800092c:	480b      	ldr	r0, [pc, #44]	; (800095c <buff_copy_callback+0x4c>)
 800092e:	f7ff ff1f 	bl	8000770 <command_parser>

	Command_Reception_idx = 0;
 8000932:	4b0b      	ldr	r3, [pc, #44]	; (8000960 <buff_copy_callback+0x50>)
 8000934:	2200      	movs	r2, #0
 8000936:	601a      	str	r2, [r3, #0]

	memset(Rx_Buffer_1, 0, sizeof(Rx_Buffer_1));
 8000938:	220a      	movs	r2, #10
 800093a:	2100      	movs	r1, #0
 800093c:	4806      	ldr	r0, [pc, #24]	; (8000958 <buff_copy_callback+0x48>)
 800093e:	f003 fc72 	bl	8004226 <memset>
	memset(Rx_Buffer_2, 0, sizeof(Rx_Buffer_2));
 8000942:	220a      	movs	r2, #10
 8000944:	2100      	movs	r1, #0
 8000946:	4805      	ldr	r0, [pc, #20]	; (800095c <buff_copy_callback+0x4c>)
 8000948:	f003 fc6d 	bl	8004226 <memset>

	CommandLineInterface();
 800094c:	f7ff ff0a 	bl	8000764 <CommandLineInterface>
}
 8000950:	bf00      	nop
 8000952:	bd80      	pop	{r7, pc}
 8000954:	20000168 	.word	0x20000168
 8000958:	20000150 	.word	0x20000150
 800095c:	2000015c 	.word	0x2000015c
 8000960:	2000014c 	.word	0x2000014c

08000964 <get_Rx_Over_Flag>:

int get_Rx_Over_Flag(){
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0
	return Rx_Over_Flag;
 8000968:	4b03      	ldr	r3, [pc, #12]	; (8000978 <get_Rx_Over_Flag+0x14>)
 800096a:	681b      	ldr	r3, [r3, #0]
}
 800096c:	4618      	mov	r0, r3
 800096e:	46bd      	mov	sp, r7
 8000970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop
 8000978:	20000168 	.word	0x20000168

0800097c <LED_ON>:
 *      Author: Aswin Sankar
 */

#include "led_control.h"

void LED_ON(int value){
 800097c:	b580      	push	{r7, lr}
 800097e:	b082      	sub	sp, #8
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
	if (value == 1){
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	2b01      	cmp	r3, #1
 8000988:	d104      	bne.n	8000994 <LED_ON+0x18>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,1);
 800098a:	2201      	movs	r2, #1
 800098c:	2120      	movs	r1, #32
 800098e:	4803      	ldr	r0, [pc, #12]	; (800099c <LED_ON+0x20>)
 8000990:	f001 fafa 	bl	8001f88 <HAL_GPIO_WritePin>
	}
}
 8000994:	bf00      	nop
 8000996:	3708      	adds	r7, #8
 8000998:	46bd      	mov	sp, r7
 800099a:	bd80      	pop	{r7, pc}
 800099c:	40020000 	.word	0x40020000

080009a0 <LED_OFF>:

void LED_OFF(int value){
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b082      	sub	sp, #8
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]

	if (value == 1){
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	2b01      	cmp	r3, #1
 80009ac:	d104      	bne.n	80009b8 <LED_OFF+0x18>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,0);
 80009ae:	2200      	movs	r2, #0
 80009b0:	2120      	movs	r1, #32
 80009b2:	4803      	ldr	r0, [pc, #12]	; (80009c0 <LED_OFF+0x20>)
 80009b4:	f001 fae8 	bl	8001f88 <HAL_GPIO_WritePin>
	}
}
 80009b8:	bf00      	nop
 80009ba:	3708      	adds	r7, #8
 80009bc:	46bd      	mov	sp, r7
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	40020000 	.word	0x40020000

080009c4 <softtimer>:

#include "stimer_main.h"

static int sec_timer_count = 0;

void softtimer(int param){
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b082      	sub	sp, #8
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
	sec_timer_count = param;
 80009cc:	4a04      	ldr	r2, [pc, #16]	; (80009e0 <softtimer+0x1c>)
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	6013      	str	r3, [r2, #0]
	start_timer();
 80009d2:	f003 f983 	bl	8003cdc <start_timer>
}
 80009d6:	bf00      	nop
 80009d8:	3708      	adds	r7, #8
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	2000016c 	.word	0x2000016c

080009e4 <get_timer_count>:

int get_timer_count(){
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
	return sec_timer_count;
 80009e8:	4b03      	ldr	r3, [pc, #12]	; (80009f8 <get_timer_count+0x14>)
 80009ea:	681b      	ldr	r3, [r3, #0]
}
 80009ec:	4618      	mov	r0, r3
 80009ee:	46bd      	mov	sp, r7
 80009f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop
 80009f8:	2000016c 	.word	0x2000016c

080009fc <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b084      	sub	sp, #16
 8000a00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a02:	463b      	mov	r3, r7
 8000a04:	2200      	movs	r2, #0
 8000a06:	601a      	str	r2, [r3, #0]
 8000a08:	605a      	str	r2, [r3, #4]
 8000a0a:	609a      	str	r2, [r3, #8]
 8000a0c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000a0e:	4b21      	ldr	r3, [pc, #132]	; (8000a94 <MX_ADC1_Init+0x98>)
 8000a10:	4a21      	ldr	r2, [pc, #132]	; (8000a98 <MX_ADC1_Init+0x9c>)
 8000a12:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000a14:	4b1f      	ldr	r3, [pc, #124]	; (8000a94 <MX_ADC1_Init+0x98>)
 8000a16:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000a1a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000a1c:	4b1d      	ldr	r3, [pc, #116]	; (8000a94 <MX_ADC1_Init+0x98>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000a22:	4b1c      	ldr	r3, [pc, #112]	; (8000a94 <MX_ADC1_Init+0x98>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000a28:	4b1a      	ldr	r3, [pc, #104]	; (8000a94 <MX_ADC1_Init+0x98>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a2e:	4b19      	ldr	r3, [pc, #100]	; (8000a94 <MX_ADC1_Init+0x98>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a36:	4b17      	ldr	r3, [pc, #92]	; (8000a94 <MX_ADC1_Init+0x98>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a3c:	4b15      	ldr	r3, [pc, #84]	; (8000a94 <MX_ADC1_Init+0x98>)
 8000a3e:	4a17      	ldr	r2, [pc, #92]	; (8000a9c <MX_ADC1_Init+0xa0>)
 8000a40:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a42:	4b14      	ldr	r3, [pc, #80]	; (8000a94 <MX_ADC1_Init+0x98>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000a48:	4b12      	ldr	r3, [pc, #72]	; (8000a94 <MX_ADC1_Init+0x98>)
 8000a4a:	2201      	movs	r2, #1
 8000a4c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000a4e:	4b11      	ldr	r3, [pc, #68]	; (8000a94 <MX_ADC1_Init+0x98>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a56:	4b0f      	ldr	r3, [pc, #60]	; (8000a94 <MX_ADC1_Init+0x98>)
 8000a58:	2201      	movs	r2, #1
 8000a5a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a5c:	480d      	ldr	r0, [pc, #52]	; (8000a94 <MX_ADC1_Init+0x98>)
 8000a5e:	f000 fc4b 	bl	80012f8 <HAL_ADC_Init>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d001      	beq.n	8000a6c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000a68:	f000 f952 	bl	8000d10 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000a70:	2301      	movs	r3, #1
 8000a72:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000a74:	2300      	movs	r3, #0
 8000a76:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a78:	463b      	mov	r3, r7
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	4805      	ldr	r0, [pc, #20]	; (8000a94 <MX_ADC1_Init+0x98>)
 8000a7e:	f000 fd3d 	bl	80014fc <HAL_ADC_ConfigChannel>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d001      	beq.n	8000a8c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000a88:	f000 f942 	bl	8000d10 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a8c:	bf00      	nop
 8000a8e:	3710      	adds	r7, #16
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	20000170 	.word	0x20000170
 8000a98:	40012000 	.word	0x40012000
 8000a9c:	0f000001 	.word	0x0f000001

08000aa0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b08a      	sub	sp, #40	; 0x28
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa8:	f107 0314 	add.w	r3, r7, #20
 8000aac:	2200      	movs	r2, #0
 8000aae:	601a      	str	r2, [r3, #0]
 8000ab0:	605a      	str	r2, [r3, #4]
 8000ab2:	609a      	str	r2, [r3, #8]
 8000ab4:	60da      	str	r2, [r3, #12]
 8000ab6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	4a17      	ldr	r2, [pc, #92]	; (8000b1c <HAL_ADC_MspInit+0x7c>)
 8000abe:	4293      	cmp	r3, r2
 8000ac0:	d127      	bne.n	8000b12 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	613b      	str	r3, [r7, #16]
 8000ac6:	4b16      	ldr	r3, [pc, #88]	; (8000b20 <HAL_ADC_MspInit+0x80>)
 8000ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aca:	4a15      	ldr	r2, [pc, #84]	; (8000b20 <HAL_ADC_MspInit+0x80>)
 8000acc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ad0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ad2:	4b13      	ldr	r3, [pc, #76]	; (8000b20 <HAL_ADC_MspInit+0x80>)
 8000ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ad6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ada:	613b      	str	r3, [r7, #16]
 8000adc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ade:	2300      	movs	r3, #0
 8000ae0:	60fb      	str	r3, [r7, #12]
 8000ae2:	4b0f      	ldr	r3, [pc, #60]	; (8000b20 <HAL_ADC_MspInit+0x80>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae6:	4a0e      	ldr	r2, [pc, #56]	; (8000b20 <HAL_ADC_MspInit+0x80>)
 8000ae8:	f043 0301 	orr.w	r3, r3, #1
 8000aec:	6313      	str	r3, [r2, #48]	; 0x30
 8000aee:	4b0c      	ldr	r3, [pc, #48]	; (8000b20 <HAL_ADC_MspInit+0x80>)
 8000af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af2:	f003 0301 	and.w	r3, r3, #1
 8000af6:	60fb      	str	r3, [r7, #12]
 8000af8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000afa:	2301      	movs	r3, #1
 8000afc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000afe:	2303      	movs	r3, #3
 8000b00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b02:	2300      	movs	r3, #0
 8000b04:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b06:	f107 0314 	add.w	r3, r7, #20
 8000b0a:	4619      	mov	r1, r3
 8000b0c:	4805      	ldr	r0, [pc, #20]	; (8000b24 <HAL_ADC_MspInit+0x84>)
 8000b0e:	f001 f8b7 	bl	8001c80 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000b12:	bf00      	nop
 8000b14:	3728      	adds	r7, #40	; 0x28
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	40012000 	.word	0x40012000
 8000b20:	40023800 	.word	0x40023800
 8000b24:	40020000 	.word	0x40020000

08000b28 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b08a      	sub	sp, #40	; 0x28
 8000b2c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b2e:	f107 0314 	add.w	r3, r7, #20
 8000b32:	2200      	movs	r2, #0
 8000b34:	601a      	str	r2, [r3, #0]
 8000b36:	605a      	str	r2, [r3, #4]
 8000b38:	609a      	str	r2, [r3, #8]
 8000b3a:	60da      	str	r2, [r3, #12]
 8000b3c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b3e:	2300      	movs	r3, #0
 8000b40:	613b      	str	r3, [r7, #16]
 8000b42:	4b2d      	ldr	r3, [pc, #180]	; (8000bf8 <MX_GPIO_Init+0xd0>)
 8000b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b46:	4a2c      	ldr	r2, [pc, #176]	; (8000bf8 <MX_GPIO_Init+0xd0>)
 8000b48:	f043 0304 	orr.w	r3, r3, #4
 8000b4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b4e:	4b2a      	ldr	r3, [pc, #168]	; (8000bf8 <MX_GPIO_Init+0xd0>)
 8000b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b52:	f003 0304 	and.w	r3, r3, #4
 8000b56:	613b      	str	r3, [r7, #16]
 8000b58:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	60fb      	str	r3, [r7, #12]
 8000b5e:	4b26      	ldr	r3, [pc, #152]	; (8000bf8 <MX_GPIO_Init+0xd0>)
 8000b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b62:	4a25      	ldr	r2, [pc, #148]	; (8000bf8 <MX_GPIO_Init+0xd0>)
 8000b64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b68:	6313      	str	r3, [r2, #48]	; 0x30
 8000b6a:	4b23      	ldr	r3, [pc, #140]	; (8000bf8 <MX_GPIO_Init+0xd0>)
 8000b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b72:	60fb      	str	r3, [r7, #12]
 8000b74:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b76:	2300      	movs	r3, #0
 8000b78:	60bb      	str	r3, [r7, #8]
 8000b7a:	4b1f      	ldr	r3, [pc, #124]	; (8000bf8 <MX_GPIO_Init+0xd0>)
 8000b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7e:	4a1e      	ldr	r2, [pc, #120]	; (8000bf8 <MX_GPIO_Init+0xd0>)
 8000b80:	f043 0301 	orr.w	r3, r3, #1
 8000b84:	6313      	str	r3, [r2, #48]	; 0x30
 8000b86:	4b1c      	ldr	r3, [pc, #112]	; (8000bf8 <MX_GPIO_Init+0xd0>)
 8000b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8a:	f003 0301 	and.w	r3, r3, #1
 8000b8e:	60bb      	str	r3, [r7, #8]
 8000b90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b92:	2300      	movs	r3, #0
 8000b94:	607b      	str	r3, [r7, #4]
 8000b96:	4b18      	ldr	r3, [pc, #96]	; (8000bf8 <MX_GPIO_Init+0xd0>)
 8000b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9a:	4a17      	ldr	r2, [pc, #92]	; (8000bf8 <MX_GPIO_Init+0xd0>)
 8000b9c:	f043 0302 	orr.w	r3, r3, #2
 8000ba0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ba2:	4b15      	ldr	r3, [pc, #84]	; (8000bf8 <MX_GPIO_Init+0xd0>)
 8000ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba6:	f003 0302 	and.w	r3, r3, #2
 8000baa:	607b      	str	r3, [r7, #4]
 8000bac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000bae:	2200      	movs	r2, #0
 8000bb0:	2120      	movs	r1, #32
 8000bb2:	4812      	ldr	r0, [pc, #72]	; (8000bfc <MX_GPIO_Init+0xd4>)
 8000bb4:	f001 f9e8 	bl	8001f88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000bb8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bbc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000bbe:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000bc2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000bc8:	f107 0314 	add.w	r3, r7, #20
 8000bcc:	4619      	mov	r1, r3
 8000bce:	480c      	ldr	r0, [pc, #48]	; (8000c00 <MX_GPIO_Init+0xd8>)
 8000bd0:	f001 f856 	bl	8001c80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000bd4:	2320      	movs	r3, #32
 8000bd6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bd8:	2301      	movs	r3, #1
 8000bda:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be0:	2300      	movs	r3, #0
 8000be2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000be4:	f107 0314 	add.w	r3, r7, #20
 8000be8:	4619      	mov	r1, r3
 8000bea:	4804      	ldr	r0, [pc, #16]	; (8000bfc <MX_GPIO_Init+0xd4>)
 8000bec:	f001 f848 	bl	8001c80 <HAL_GPIO_Init>

}
 8000bf0:	bf00      	nop
 8000bf2:	3728      	adds	r7, #40	; 0x28
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	40023800 	.word	0x40023800
 8000bfc:	40020000 	.word	0x40020000
 8000c00:	40020800 	.word	0x40020800

08000c04 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c08:	f000 fb04 	bl	8001214 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c0c:	f000 f814 	bl	8000c38 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c10:	f7ff ff8a 	bl	8000b28 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000c14:	f000 fa26 	bl	8001064 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8000c18:	f000 f9fa 	bl	8001010 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8000c1c:	f7ff feee 	bl	80009fc <MX_ADC1_Init>
  MX_TIM11_Init();
 8000c20:	f000 f9b0 	bl	8000f84 <MX_TIM11_Init>
  /* USER CODE BEGIN 2 */
  CommandLineInterface();
 8000c24:	f7ff fd9e 	bl	8000764 <CommandLineInterface>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (1 == get_Rx_Over_Flag())
 8000c28:	f7ff fe9c 	bl	8000964 <get_Rx_Over_Flag>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b01      	cmp	r3, #1
 8000c30:	d1fa      	bne.n	8000c28 <main+0x24>
		  buff_copy_callback();
 8000c32:	f7ff fe6d 	bl	8000910 <buff_copy_callback>
	  if (1 == get_Rx_Over_Flag())
 8000c36:	e7f7      	b.n	8000c28 <main+0x24>

08000c38 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b094      	sub	sp, #80	; 0x50
 8000c3c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c3e:	f107 0320 	add.w	r3, r7, #32
 8000c42:	2230      	movs	r2, #48	; 0x30
 8000c44:	2100      	movs	r1, #0
 8000c46:	4618      	mov	r0, r3
 8000c48:	f003 faed 	bl	8004226 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c4c:	f107 030c 	add.w	r3, r7, #12
 8000c50:	2200      	movs	r2, #0
 8000c52:	601a      	str	r2, [r3, #0]
 8000c54:	605a      	str	r2, [r3, #4]
 8000c56:	609a      	str	r2, [r3, #8]
 8000c58:	60da      	str	r2, [r3, #12]
 8000c5a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	60bb      	str	r3, [r7, #8]
 8000c60:	4b29      	ldr	r3, [pc, #164]	; (8000d08 <SystemClock_Config+0xd0>)
 8000c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c64:	4a28      	ldr	r2, [pc, #160]	; (8000d08 <SystemClock_Config+0xd0>)
 8000c66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c6a:	6413      	str	r3, [r2, #64]	; 0x40
 8000c6c:	4b26      	ldr	r3, [pc, #152]	; (8000d08 <SystemClock_Config+0xd0>)
 8000c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c74:	60bb      	str	r3, [r7, #8]
 8000c76:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000c78:	2300      	movs	r3, #0
 8000c7a:	607b      	str	r3, [r7, #4]
 8000c7c:	4b23      	ldr	r3, [pc, #140]	; (8000d0c <SystemClock_Config+0xd4>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000c84:	4a21      	ldr	r2, [pc, #132]	; (8000d0c <SystemClock_Config+0xd4>)
 8000c86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c8a:	6013      	str	r3, [r2, #0]
 8000c8c:	4b1f      	ldr	r3, [pc, #124]	; (8000d0c <SystemClock_Config+0xd4>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c94:	607b      	str	r3, [r7, #4]
 8000c96:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c98:	2302      	movs	r3, #2
 8000c9a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c9c:	2301      	movs	r3, #1
 8000c9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ca0:	2310      	movs	r3, #16
 8000ca2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ca4:	2302      	movs	r3, #2
 8000ca6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000cac:	2310      	movs	r3, #16
 8000cae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000cb0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000cb4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000cb6:	2304      	movs	r3, #4
 8000cb8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000cba:	2307      	movs	r3, #7
 8000cbc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cbe:	f107 0320 	add.w	r3, r7, #32
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f001 f97a 	bl	8001fbc <HAL_RCC_OscConfig>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d001      	beq.n	8000cd2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000cce:	f000 f81f 	bl	8000d10 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cd2:	230f      	movs	r3, #15
 8000cd4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cd6:	2302      	movs	r3, #2
 8000cd8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000cde:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ce2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ce8:	f107 030c 	add.w	r3, r7, #12
 8000cec:	2102      	movs	r1, #2
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f001 fbdc 	bl	80024ac <HAL_RCC_ClockConfig>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d001      	beq.n	8000cfe <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000cfa:	f000 f809 	bl	8000d10 <Error_Handler>
  }
}
 8000cfe:	bf00      	nop
 8000d00:	3750      	adds	r7, #80	; 0x50
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	40023800 	.word	0x40023800
 8000d0c:	40007000 	.word	0x40007000

08000d10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d14:	b672      	cpsid	i
}
 8000d16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d18:	e7fe      	b.n	8000d18 <Error_Handler+0x8>
	...

08000d1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b082      	sub	sp, #8
 8000d20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d22:	2300      	movs	r3, #0
 8000d24:	607b      	str	r3, [r7, #4]
 8000d26:	4b10      	ldr	r3, [pc, #64]	; (8000d68 <HAL_MspInit+0x4c>)
 8000d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d2a:	4a0f      	ldr	r2, [pc, #60]	; (8000d68 <HAL_MspInit+0x4c>)
 8000d2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d30:	6453      	str	r3, [r2, #68]	; 0x44
 8000d32:	4b0d      	ldr	r3, [pc, #52]	; (8000d68 <HAL_MspInit+0x4c>)
 8000d34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d3a:	607b      	str	r3, [r7, #4]
 8000d3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d3e:	2300      	movs	r3, #0
 8000d40:	603b      	str	r3, [r7, #0]
 8000d42:	4b09      	ldr	r3, [pc, #36]	; (8000d68 <HAL_MspInit+0x4c>)
 8000d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d46:	4a08      	ldr	r2, [pc, #32]	; (8000d68 <HAL_MspInit+0x4c>)
 8000d48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d4c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d4e:	4b06      	ldr	r3, [pc, #24]	; (8000d68 <HAL_MspInit+0x4c>)
 8000d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d56:	603b      	str	r3, [r7, #0]
 8000d58:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000d5a:	2007      	movs	r0, #7
 8000d5c:	f000 febc 	bl	8001ad8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d60:	bf00      	nop
 8000d62:	3708      	adds	r7, #8
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	40023800 	.word	0x40023800

08000d6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d70:	e7fe      	b.n	8000d70 <NMI_Handler+0x4>

08000d72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d72:	b480      	push	{r7}
 8000d74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d76:	e7fe      	b.n	8000d76 <HardFault_Handler+0x4>

08000d78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d7c:	e7fe      	b.n	8000d7c <MemManage_Handler+0x4>

08000d7e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d7e:	b480      	push	{r7}
 8000d80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d82:	e7fe      	b.n	8000d82 <BusFault_Handler+0x4>

08000d84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d88:	e7fe      	b.n	8000d88 <UsageFault_Handler+0x4>

08000d8a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d8a:	b480      	push	{r7}
 8000d8c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d8e:	bf00      	nop
 8000d90:	46bd      	mov	sp, r7
 8000d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d96:	4770      	bx	lr

08000d98 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d9c:	bf00      	nop
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr

08000da6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000da6:	b480      	push	{r7}
 8000da8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000daa:	bf00      	nop
 8000dac:	46bd      	mov	sp, r7
 8000dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db2:	4770      	bx	lr

08000db4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000db8:	f000 fa7e 	bl	80012b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dbc:	bf00      	nop
 8000dbe:	bd80      	pop	{r7, pc}

08000dc0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000dc4:	4802      	ldr	r0, [pc, #8]	; (8000dd0 <USART1_IRQHandler+0x10>)
 8000dc6:	f002 f817 	bl	8002df8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000dca:	bf00      	nop
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	20000204 	.word	0x20000204

08000dd4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
  return 1;
 8000dd8:	2301      	movs	r3, #1
}
 8000dda:	4618      	mov	r0, r3
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de2:	4770      	bx	lr

08000de4 <_kill>:

int _kill(int pid, int sig)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b082      	sub	sp, #8
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
 8000dec:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000dee:	f003 fad5 	bl	800439c <__errno>
 8000df2:	4603      	mov	r3, r0
 8000df4:	2216      	movs	r2, #22
 8000df6:	601a      	str	r2, [r3, #0]
  return -1;
 8000df8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	3708      	adds	r7, #8
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}

08000e04 <_exit>:

void _exit (int status)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b082      	sub	sp, #8
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000e0c:	f04f 31ff 	mov.w	r1, #4294967295
 8000e10:	6878      	ldr	r0, [r7, #4]
 8000e12:	f7ff ffe7 	bl	8000de4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000e16:	e7fe      	b.n	8000e16 <_exit+0x12>

08000e18 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b086      	sub	sp, #24
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	60f8      	str	r0, [r7, #12]
 8000e20:	60b9      	str	r1, [r7, #8]
 8000e22:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e24:	2300      	movs	r3, #0
 8000e26:	617b      	str	r3, [r7, #20]
 8000e28:	e00a      	b.n	8000e40 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000e2a:	f3af 8000 	nop.w
 8000e2e:	4601      	mov	r1, r0
 8000e30:	68bb      	ldr	r3, [r7, #8]
 8000e32:	1c5a      	adds	r2, r3, #1
 8000e34:	60ba      	str	r2, [r7, #8]
 8000e36:	b2ca      	uxtb	r2, r1
 8000e38:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e3a:	697b      	ldr	r3, [r7, #20]
 8000e3c:	3301      	adds	r3, #1
 8000e3e:	617b      	str	r3, [r7, #20]
 8000e40:	697a      	ldr	r2, [r7, #20]
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	429a      	cmp	r2, r3
 8000e46:	dbf0      	blt.n	8000e2a <_read+0x12>
  }

  return len;
 8000e48:	687b      	ldr	r3, [r7, #4]
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	3718      	adds	r7, #24
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}

08000e52 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e52:	b580      	push	{r7, lr}
 8000e54:	b086      	sub	sp, #24
 8000e56:	af00      	add	r7, sp, #0
 8000e58:	60f8      	str	r0, [r7, #12]
 8000e5a:	60b9      	str	r1, [r7, #8]
 8000e5c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e5e:	2300      	movs	r3, #0
 8000e60:	617b      	str	r3, [r7, #20]
 8000e62:	e009      	b.n	8000e78 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000e64:	68bb      	ldr	r3, [r7, #8]
 8000e66:	1c5a      	adds	r2, r3, #1
 8000e68:	60ba      	str	r2, [r7, #8]
 8000e6a:	781b      	ldrb	r3, [r3, #0]
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e72:	697b      	ldr	r3, [r7, #20]
 8000e74:	3301      	adds	r3, #1
 8000e76:	617b      	str	r3, [r7, #20]
 8000e78:	697a      	ldr	r2, [r7, #20]
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	429a      	cmp	r2, r3
 8000e7e:	dbf1      	blt.n	8000e64 <_write+0x12>
  }
  return len;
 8000e80:	687b      	ldr	r3, [r7, #4]
}
 8000e82:	4618      	mov	r0, r3
 8000e84:	3718      	adds	r7, #24
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}

08000e8a <_close>:

int _close(int file)
{
 8000e8a:	b480      	push	{r7}
 8000e8c:	b083      	sub	sp, #12
 8000e8e:	af00      	add	r7, sp, #0
 8000e90:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000e92:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e96:	4618      	mov	r0, r3
 8000e98:	370c      	adds	r7, #12
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea0:	4770      	bx	lr

08000ea2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ea2:	b480      	push	{r7}
 8000ea4:	b083      	sub	sp, #12
 8000ea6:	af00      	add	r7, sp, #0
 8000ea8:	6078      	str	r0, [r7, #4]
 8000eaa:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000eb2:	605a      	str	r2, [r3, #4]
  return 0;
 8000eb4:	2300      	movs	r3, #0
}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	370c      	adds	r7, #12
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr

08000ec2 <_isatty>:

int _isatty(int file)
{
 8000ec2:	b480      	push	{r7}
 8000ec4:	b083      	sub	sp, #12
 8000ec6:	af00      	add	r7, sp, #0
 8000ec8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000eca:	2301      	movs	r3, #1
}
 8000ecc:	4618      	mov	r0, r3
 8000ece:	370c      	adds	r7, #12
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed6:	4770      	bx	lr

08000ed8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b085      	sub	sp, #20
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	60f8      	str	r0, [r7, #12]
 8000ee0:	60b9      	str	r1, [r7, #8]
 8000ee2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000ee4:	2300      	movs	r3, #0
}
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	3714      	adds	r7, #20
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr
	...

08000ef4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b086      	sub	sp, #24
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000efc:	4a14      	ldr	r2, [pc, #80]	; (8000f50 <_sbrk+0x5c>)
 8000efe:	4b15      	ldr	r3, [pc, #84]	; (8000f54 <_sbrk+0x60>)
 8000f00:	1ad3      	subs	r3, r2, r3
 8000f02:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f04:	697b      	ldr	r3, [r7, #20]
 8000f06:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f08:	4b13      	ldr	r3, [pc, #76]	; (8000f58 <_sbrk+0x64>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d102      	bne.n	8000f16 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f10:	4b11      	ldr	r3, [pc, #68]	; (8000f58 <_sbrk+0x64>)
 8000f12:	4a12      	ldr	r2, [pc, #72]	; (8000f5c <_sbrk+0x68>)
 8000f14:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f16:	4b10      	ldr	r3, [pc, #64]	; (8000f58 <_sbrk+0x64>)
 8000f18:	681a      	ldr	r2, [r3, #0]
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	4413      	add	r3, r2
 8000f1e:	693a      	ldr	r2, [r7, #16]
 8000f20:	429a      	cmp	r2, r3
 8000f22:	d207      	bcs.n	8000f34 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f24:	f003 fa3a 	bl	800439c <__errno>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	220c      	movs	r2, #12
 8000f2c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f2e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f32:	e009      	b.n	8000f48 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f34:	4b08      	ldr	r3, [pc, #32]	; (8000f58 <_sbrk+0x64>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f3a:	4b07      	ldr	r3, [pc, #28]	; (8000f58 <_sbrk+0x64>)
 8000f3c:	681a      	ldr	r2, [r3, #0]
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	4413      	add	r3, r2
 8000f42:	4a05      	ldr	r2, [pc, #20]	; (8000f58 <_sbrk+0x64>)
 8000f44:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f46:	68fb      	ldr	r3, [r7, #12]
}
 8000f48:	4618      	mov	r0, r3
 8000f4a:	3718      	adds	r7, #24
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	20018000 	.word	0x20018000
 8000f54:	00000400 	.word	0x00000400
 8000f58:	200001b8 	.word	0x200001b8
 8000f5c:	200003e8 	.word	0x200003e8

08000f60 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f64:	4b06      	ldr	r3, [pc, #24]	; (8000f80 <SystemInit+0x20>)
 8000f66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f6a:	4a05      	ldr	r2, [pc, #20]	; (8000f80 <SystemInit+0x20>)
 8000f6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f70:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f74:	bf00      	nop
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop
 8000f80:	e000ed00 	.word	0xe000ed00

08000f84 <MX_TIM11_Init>:

TIM_HandleTypeDef htim11;

/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8000f88:	4b0e      	ldr	r3, [pc, #56]	; (8000fc4 <MX_TIM11_Init+0x40>)
 8000f8a:	4a0f      	ldr	r2, [pc, #60]	; (8000fc8 <MX_TIM11_Init+0x44>)
 8000f8c:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 84-1;
 8000f8e:	4b0d      	ldr	r3, [pc, #52]	; (8000fc4 <MX_TIM11_Init+0x40>)
 8000f90:	2253      	movs	r2, #83	; 0x53
 8000f92:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f94:	4b0b      	ldr	r3, [pc, #44]	; (8000fc4 <MX_TIM11_Init+0x40>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 1000-1;
 8000f9a:	4b0a      	ldr	r3, [pc, #40]	; (8000fc4 <MX_TIM11_Init+0x40>)
 8000f9c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000fa0:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fa2:	4b08      	ldr	r3, [pc, #32]	; (8000fc4 <MX_TIM11_Init+0x40>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fa8:	4b06      	ldr	r3, [pc, #24]	; (8000fc4 <MX_TIM11_Init+0x40>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8000fae:	4805      	ldr	r0, [pc, #20]	; (8000fc4 <MX_TIM11_Init+0x40>)
 8000fb0:	f001 fc9c 	bl	80028ec <HAL_TIM_Base_Init>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d001      	beq.n	8000fbe <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8000fba:	f7ff fea9 	bl	8000d10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8000fbe:	bf00      	nop
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	200001bc 	.word	0x200001bc
 8000fc8:	40014800 	.word	0x40014800

08000fcc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b085      	sub	sp, #20
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM11)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4a0b      	ldr	r2, [pc, #44]	; (8001008 <HAL_TIM_Base_MspInit+0x3c>)
 8000fda:	4293      	cmp	r3, r2
 8000fdc:	d10d      	bne.n	8000ffa <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM11_MspInit 0 */

  /* USER CODE END TIM11_MspInit 0 */
    /* TIM11 clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 8000fde:	2300      	movs	r3, #0
 8000fe0:	60fb      	str	r3, [r7, #12]
 8000fe2:	4b0a      	ldr	r3, [pc, #40]	; (800100c <HAL_TIM_Base_MspInit+0x40>)
 8000fe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fe6:	4a09      	ldr	r2, [pc, #36]	; (800100c <HAL_TIM_Base_MspInit+0x40>)
 8000fe8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fec:	6453      	str	r3, [r2, #68]	; 0x44
 8000fee:	4b07      	ldr	r3, [pc, #28]	; (800100c <HAL_TIM_Base_MspInit+0x40>)
 8000ff0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ff2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ff6:	60fb      	str	r3, [r7, #12]
 8000ff8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 8000ffa:	bf00      	nop
 8000ffc:	3714      	adds	r7, #20
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop
 8001008:	40014800 	.word	0x40014800
 800100c:	40023800 	.word	0x40023800

08001010 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001014:	4b11      	ldr	r3, [pc, #68]	; (800105c <MX_USART1_UART_Init+0x4c>)
 8001016:	4a12      	ldr	r2, [pc, #72]	; (8001060 <MX_USART1_UART_Init+0x50>)
 8001018:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800101a:	4b10      	ldr	r3, [pc, #64]	; (800105c <MX_USART1_UART_Init+0x4c>)
 800101c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001020:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001022:	4b0e      	ldr	r3, [pc, #56]	; (800105c <MX_USART1_UART_Init+0x4c>)
 8001024:	2200      	movs	r2, #0
 8001026:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001028:	4b0c      	ldr	r3, [pc, #48]	; (800105c <MX_USART1_UART_Init+0x4c>)
 800102a:	2200      	movs	r2, #0
 800102c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800102e:	4b0b      	ldr	r3, [pc, #44]	; (800105c <MX_USART1_UART_Init+0x4c>)
 8001030:	2200      	movs	r2, #0
 8001032:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001034:	4b09      	ldr	r3, [pc, #36]	; (800105c <MX_USART1_UART_Init+0x4c>)
 8001036:	220c      	movs	r2, #12
 8001038:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800103a:	4b08      	ldr	r3, [pc, #32]	; (800105c <MX_USART1_UART_Init+0x4c>)
 800103c:	2200      	movs	r2, #0
 800103e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001040:	4b06      	ldr	r3, [pc, #24]	; (800105c <MX_USART1_UART_Init+0x4c>)
 8001042:	2200      	movs	r2, #0
 8001044:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001046:	4805      	ldr	r0, [pc, #20]	; (800105c <MX_USART1_UART_Init+0x4c>)
 8001048:	f001 fd82 	bl	8002b50 <HAL_UART_Init>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d001      	beq.n	8001056 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001052:	f7ff fe5d 	bl	8000d10 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001056:	bf00      	nop
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	20000204 	.word	0x20000204
 8001060:	40011000 	.word	0x40011000

08001064 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001068:	4b11      	ldr	r3, [pc, #68]	; (80010b0 <MX_USART2_UART_Init+0x4c>)
 800106a:	4a12      	ldr	r2, [pc, #72]	; (80010b4 <MX_USART2_UART_Init+0x50>)
 800106c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800106e:	4b10      	ldr	r3, [pc, #64]	; (80010b0 <MX_USART2_UART_Init+0x4c>)
 8001070:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001074:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001076:	4b0e      	ldr	r3, [pc, #56]	; (80010b0 <MX_USART2_UART_Init+0x4c>)
 8001078:	2200      	movs	r2, #0
 800107a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800107c:	4b0c      	ldr	r3, [pc, #48]	; (80010b0 <MX_USART2_UART_Init+0x4c>)
 800107e:	2200      	movs	r2, #0
 8001080:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001082:	4b0b      	ldr	r3, [pc, #44]	; (80010b0 <MX_USART2_UART_Init+0x4c>)
 8001084:	2200      	movs	r2, #0
 8001086:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001088:	4b09      	ldr	r3, [pc, #36]	; (80010b0 <MX_USART2_UART_Init+0x4c>)
 800108a:	220c      	movs	r2, #12
 800108c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800108e:	4b08      	ldr	r3, [pc, #32]	; (80010b0 <MX_USART2_UART_Init+0x4c>)
 8001090:	2200      	movs	r2, #0
 8001092:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001094:	4b06      	ldr	r3, [pc, #24]	; (80010b0 <MX_USART2_UART_Init+0x4c>)
 8001096:	2200      	movs	r2, #0
 8001098:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800109a:	4805      	ldr	r0, [pc, #20]	; (80010b0 <MX_USART2_UART_Init+0x4c>)
 800109c:	f001 fd58 	bl	8002b50 <HAL_UART_Init>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d001      	beq.n	80010aa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80010a6:	f7ff fe33 	bl	8000d10 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80010aa:	bf00      	nop
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	20000248 	.word	0x20000248
 80010b4:	40004400 	.word	0x40004400

080010b8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b08c      	sub	sp, #48	; 0x30
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010c0:	f107 031c 	add.w	r3, r7, #28
 80010c4:	2200      	movs	r2, #0
 80010c6:	601a      	str	r2, [r3, #0]
 80010c8:	605a      	str	r2, [r3, #4]
 80010ca:	609a      	str	r2, [r3, #8]
 80010cc:	60da      	str	r2, [r3, #12]
 80010ce:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4a36      	ldr	r2, [pc, #216]	; (80011b0 <HAL_UART_MspInit+0xf8>)
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d135      	bne.n	8001146 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80010da:	2300      	movs	r3, #0
 80010dc:	61bb      	str	r3, [r7, #24]
 80010de:	4b35      	ldr	r3, [pc, #212]	; (80011b4 <HAL_UART_MspInit+0xfc>)
 80010e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010e2:	4a34      	ldr	r2, [pc, #208]	; (80011b4 <HAL_UART_MspInit+0xfc>)
 80010e4:	f043 0310 	orr.w	r3, r3, #16
 80010e8:	6453      	str	r3, [r2, #68]	; 0x44
 80010ea:	4b32      	ldr	r3, [pc, #200]	; (80011b4 <HAL_UART_MspInit+0xfc>)
 80010ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ee:	f003 0310 	and.w	r3, r3, #16
 80010f2:	61bb      	str	r3, [r7, #24]
 80010f4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010f6:	2300      	movs	r3, #0
 80010f8:	617b      	str	r3, [r7, #20]
 80010fa:	4b2e      	ldr	r3, [pc, #184]	; (80011b4 <HAL_UART_MspInit+0xfc>)
 80010fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fe:	4a2d      	ldr	r2, [pc, #180]	; (80011b4 <HAL_UART_MspInit+0xfc>)
 8001100:	f043 0301 	orr.w	r3, r3, #1
 8001104:	6313      	str	r3, [r2, #48]	; 0x30
 8001106:	4b2b      	ldr	r3, [pc, #172]	; (80011b4 <HAL_UART_MspInit+0xfc>)
 8001108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110a:	f003 0301 	and.w	r3, r3, #1
 800110e:	617b      	str	r3, [r7, #20]
 8001110:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001112:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001116:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001118:	2302      	movs	r3, #2
 800111a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111c:	2300      	movs	r3, #0
 800111e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001120:	2303      	movs	r3, #3
 8001122:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001124:	2307      	movs	r3, #7
 8001126:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001128:	f107 031c 	add.w	r3, r7, #28
 800112c:	4619      	mov	r1, r3
 800112e:	4822      	ldr	r0, [pc, #136]	; (80011b8 <HAL_UART_MspInit+0x100>)
 8001130:	f000 fda6 	bl	8001c80 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001134:	2200      	movs	r2, #0
 8001136:	2100      	movs	r1, #0
 8001138:	2025      	movs	r0, #37	; 0x25
 800113a:	f000 fcd8 	bl	8001aee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800113e:	2025      	movs	r0, #37	; 0x25
 8001140:	f000 fcf1 	bl	8001b26 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001144:	e030      	b.n	80011a8 <HAL_UART_MspInit+0xf0>
  else if(uartHandle->Instance==USART2)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	4a1c      	ldr	r2, [pc, #112]	; (80011bc <HAL_UART_MspInit+0x104>)
 800114c:	4293      	cmp	r3, r2
 800114e:	d12b      	bne.n	80011a8 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001150:	2300      	movs	r3, #0
 8001152:	613b      	str	r3, [r7, #16]
 8001154:	4b17      	ldr	r3, [pc, #92]	; (80011b4 <HAL_UART_MspInit+0xfc>)
 8001156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001158:	4a16      	ldr	r2, [pc, #88]	; (80011b4 <HAL_UART_MspInit+0xfc>)
 800115a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800115e:	6413      	str	r3, [r2, #64]	; 0x40
 8001160:	4b14      	ldr	r3, [pc, #80]	; (80011b4 <HAL_UART_MspInit+0xfc>)
 8001162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001164:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001168:	613b      	str	r3, [r7, #16]
 800116a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800116c:	2300      	movs	r3, #0
 800116e:	60fb      	str	r3, [r7, #12]
 8001170:	4b10      	ldr	r3, [pc, #64]	; (80011b4 <HAL_UART_MspInit+0xfc>)
 8001172:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001174:	4a0f      	ldr	r2, [pc, #60]	; (80011b4 <HAL_UART_MspInit+0xfc>)
 8001176:	f043 0301 	orr.w	r3, r3, #1
 800117a:	6313      	str	r3, [r2, #48]	; 0x30
 800117c:	4b0d      	ldr	r3, [pc, #52]	; (80011b4 <HAL_UART_MspInit+0xfc>)
 800117e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001180:	f003 0301 	and.w	r3, r3, #1
 8001184:	60fb      	str	r3, [r7, #12]
 8001186:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001188:	230c      	movs	r3, #12
 800118a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800118c:	2302      	movs	r3, #2
 800118e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001190:	2300      	movs	r3, #0
 8001192:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001194:	2300      	movs	r3, #0
 8001196:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001198:	2307      	movs	r3, #7
 800119a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800119c:	f107 031c 	add.w	r3, r7, #28
 80011a0:	4619      	mov	r1, r3
 80011a2:	4805      	ldr	r0, [pc, #20]	; (80011b8 <HAL_UART_MspInit+0x100>)
 80011a4:	f000 fd6c 	bl	8001c80 <HAL_GPIO_Init>
}
 80011a8:	bf00      	nop
 80011aa:	3730      	adds	r7, #48	; 0x30
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	40011000 	.word	0x40011000
 80011b4:	40023800 	.word	0x40023800
 80011b8:	40020000 	.word	0x40020000
 80011bc:	40004400 	.word	0x40004400

080011c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80011c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011f8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80011c4:	480d      	ldr	r0, [pc, #52]	; (80011fc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80011c6:	490e      	ldr	r1, [pc, #56]	; (8001200 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80011c8:	4a0e      	ldr	r2, [pc, #56]	; (8001204 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80011ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011cc:	e002      	b.n	80011d4 <LoopCopyDataInit>

080011ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011d2:	3304      	adds	r3, #4

080011d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011d8:	d3f9      	bcc.n	80011ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011da:	4a0b      	ldr	r2, [pc, #44]	; (8001208 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80011dc:	4c0b      	ldr	r4, [pc, #44]	; (800120c <LoopFillZerobss+0x26>)
  movs r3, #0
 80011de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011e0:	e001      	b.n	80011e6 <LoopFillZerobss>

080011e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011e4:	3204      	adds	r2, #4

080011e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011e8:	d3fb      	bcc.n	80011e2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80011ea:	f7ff feb9 	bl	8000f60 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011ee:	f003 f8db 	bl	80043a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011f2:	f7ff fd07 	bl	8000c04 <main>
  bx  lr    
 80011f6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80011f8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80011fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001200:	200000a4 	.word	0x200000a4
  ldr r2, =_sidata
 8001204:	08005488 	.word	0x08005488
  ldr r2, =_sbss
 8001208:	200000a4 	.word	0x200000a4
  ldr r4, =_ebss
 800120c:	200003e4 	.word	0x200003e4

08001210 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001210:	e7fe      	b.n	8001210 <ADC_IRQHandler>
	...

08001214 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001218:	4b0e      	ldr	r3, [pc, #56]	; (8001254 <HAL_Init+0x40>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4a0d      	ldr	r2, [pc, #52]	; (8001254 <HAL_Init+0x40>)
 800121e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001222:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001224:	4b0b      	ldr	r3, [pc, #44]	; (8001254 <HAL_Init+0x40>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4a0a      	ldr	r2, [pc, #40]	; (8001254 <HAL_Init+0x40>)
 800122a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800122e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001230:	4b08      	ldr	r3, [pc, #32]	; (8001254 <HAL_Init+0x40>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4a07      	ldr	r2, [pc, #28]	; (8001254 <HAL_Init+0x40>)
 8001236:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800123a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800123c:	2003      	movs	r0, #3
 800123e:	f000 fc4b 	bl	8001ad8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001242:	2000      	movs	r0, #0
 8001244:	f000 f808 	bl	8001258 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001248:	f7ff fd68 	bl	8000d1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800124c:	2300      	movs	r3, #0
}
 800124e:	4618      	mov	r0, r3
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	40023c00 	.word	0x40023c00

08001258 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b082      	sub	sp, #8
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001260:	4b12      	ldr	r3, [pc, #72]	; (80012ac <HAL_InitTick+0x54>)
 8001262:	681a      	ldr	r2, [r3, #0]
 8001264:	4b12      	ldr	r3, [pc, #72]	; (80012b0 <HAL_InitTick+0x58>)
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	4619      	mov	r1, r3
 800126a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800126e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001272:	fbb2 f3f3 	udiv	r3, r2, r3
 8001276:	4618      	mov	r0, r3
 8001278:	f000 fc63 	bl	8001b42 <HAL_SYSTICK_Config>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d001      	beq.n	8001286 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001282:	2301      	movs	r3, #1
 8001284:	e00e      	b.n	80012a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	2b0f      	cmp	r3, #15
 800128a:	d80a      	bhi.n	80012a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800128c:	2200      	movs	r2, #0
 800128e:	6879      	ldr	r1, [r7, #4]
 8001290:	f04f 30ff 	mov.w	r0, #4294967295
 8001294:	f000 fc2b 	bl	8001aee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001298:	4a06      	ldr	r2, [pc, #24]	; (80012b4 <HAL_InitTick+0x5c>)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800129e:	2300      	movs	r3, #0
 80012a0:	e000      	b.n	80012a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012a2:	2301      	movs	r3, #1
}
 80012a4:	4618      	mov	r0, r3
 80012a6:	3708      	adds	r7, #8
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	2000003c 	.word	0x2000003c
 80012b0:	20000044 	.word	0x20000044
 80012b4:	20000040 	.word	0x20000040

080012b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012bc:	4b06      	ldr	r3, [pc, #24]	; (80012d8 <HAL_IncTick+0x20>)
 80012be:	781b      	ldrb	r3, [r3, #0]
 80012c0:	461a      	mov	r2, r3
 80012c2:	4b06      	ldr	r3, [pc, #24]	; (80012dc <HAL_IncTick+0x24>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4413      	add	r3, r2
 80012c8:	4a04      	ldr	r2, [pc, #16]	; (80012dc <HAL_IncTick+0x24>)
 80012ca:	6013      	str	r3, [r2, #0]
}
 80012cc:	bf00      	nop
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr
 80012d6:	bf00      	nop
 80012d8:	20000044 	.word	0x20000044
 80012dc:	2000028c 	.word	0x2000028c

080012e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0
  return uwTick;
 80012e4:	4b03      	ldr	r3, [pc, #12]	; (80012f4 <HAL_GetTick+0x14>)
 80012e6:	681b      	ldr	r3, [r3, #0]
}
 80012e8:	4618      	mov	r0, r3
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr
 80012f2:	bf00      	nop
 80012f4:	2000028c 	.word	0x2000028c

080012f8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b084      	sub	sp, #16
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001300:	2300      	movs	r3, #0
 8001302:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d101      	bne.n	800130e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800130a:	2301      	movs	r3, #1
 800130c:	e033      	b.n	8001376 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001312:	2b00      	cmp	r3, #0
 8001314:	d109      	bne.n	800132a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001316:	6878      	ldr	r0, [r7, #4]
 8001318:	f7ff fbc2 	bl	8000aa0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	2200      	movs	r2, #0
 8001320:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	2200      	movs	r2, #0
 8001326:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800132e:	f003 0310 	and.w	r3, r3, #16
 8001332:	2b00      	cmp	r3, #0
 8001334:	d118      	bne.n	8001368 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800133a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800133e:	f023 0302 	bic.w	r3, r3, #2
 8001342:	f043 0202 	orr.w	r2, r3, #2
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800134a:	6878      	ldr	r0, [r7, #4]
 800134c:	f000 f9f8 	bl	8001740 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	2200      	movs	r2, #0
 8001354:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800135a:	f023 0303 	bic.w	r3, r3, #3
 800135e:	f043 0201 	orr.w	r2, r3, #1
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	641a      	str	r2, [r3, #64]	; 0x40
 8001366:	e001      	b.n	800136c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001368:	2301      	movs	r3, #1
 800136a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	2200      	movs	r2, #0
 8001370:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001374:	7bfb      	ldrb	r3, [r7, #15]
}
 8001376:	4618      	mov	r0, r3
 8001378:	3710      	adds	r7, #16
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
	...

08001380 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8001380:	b480      	push	{r7}
 8001382:	b085      	sub	sp, #20
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001388:	2300      	movs	r3, #0
 800138a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001392:	2b01      	cmp	r3, #1
 8001394:	d101      	bne.n	800139a <HAL_ADC_Start_IT+0x1a>
 8001396:	2302      	movs	r3, #2
 8001398:	e0a1      	b.n	80014de <HAL_ADC_Start_IT+0x15e>
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	2201      	movs	r2, #1
 800139e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	689b      	ldr	r3, [r3, #8]
 80013a8:	f003 0301 	and.w	r3, r3, #1
 80013ac:	2b01      	cmp	r3, #1
 80013ae:	d018      	beq.n	80013e2 <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	689a      	ldr	r2, [r3, #8]
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f042 0201 	orr.w	r2, r2, #1
 80013be:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80013c0:	4b4a      	ldr	r3, [pc, #296]	; (80014ec <HAL_ADC_Start_IT+0x16c>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4a4a      	ldr	r2, [pc, #296]	; (80014f0 <HAL_ADC_Start_IT+0x170>)
 80013c6:	fba2 2303 	umull	r2, r3, r2, r3
 80013ca:	0c9a      	lsrs	r2, r3, #18
 80013cc:	4613      	mov	r3, r2
 80013ce:	005b      	lsls	r3, r3, #1
 80013d0:	4413      	add	r3, r2
 80013d2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80013d4:	e002      	b.n	80013dc <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 80013d6:	68bb      	ldr	r3, [r7, #8]
 80013d8:	3b01      	subs	r3, #1
 80013da:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80013dc:	68bb      	ldr	r3, [r7, #8]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d1f9      	bne.n	80013d6 <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	689b      	ldr	r3, [r3, #8]
 80013e8:	f003 0301 	and.w	r3, r3, #1
 80013ec:	2b01      	cmp	r3, #1
 80013ee:	d169      	bne.n	80014c4 <HAL_ADC_Start_IT+0x144>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80013f8:	f023 0301 	bic.w	r3, r3, #1
 80013fc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800140e:	2b00      	cmp	r3, #0
 8001410:	d007      	beq.n	8001422 <HAL_ADC_Start_IT+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001416:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800141a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001426:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800142a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800142e:	d106      	bne.n	800143e <HAL_ADC_Start_IT+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001434:	f023 0206 	bic.w	r2, r3, #6
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	645a      	str	r2, [r3, #68]	; 0x44
 800143c:	e002      	b.n	8001444 <HAL_ADC_Start_IT+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	2200      	movs	r2, #0
 8001442:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	2200      	movs	r2, #0
 8001448:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800144c:	4b29      	ldr	r3, [pc, #164]	; (80014f4 <HAL_ADC_Start_IT+0x174>)
 800144e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001458:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	687a      	ldr	r2, [r7, #4]
 8001462:	6812      	ldr	r2, [r2, #0]
 8001464:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001468:	f043 0320 	orr.w	r3, r3, #32
 800146c:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	f003 031f 	and.w	r3, r3, #31
 8001476:	2b00      	cmp	r3, #0
 8001478:	d10f      	bne.n	800149a <HAL_ADC_Start_IT+0x11a>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	689b      	ldr	r3, [r3, #8]
 8001480:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001484:	2b00      	cmp	r3, #0
 8001486:	d129      	bne.n	80014dc <HAL_ADC_Start_IT+0x15c>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	689a      	ldr	r2, [r3, #8]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001496:	609a      	str	r2, [r3, #8]
 8001498:	e020      	b.n	80014dc <HAL_ADC_Start_IT+0x15c>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4a16      	ldr	r2, [pc, #88]	; (80014f8 <HAL_ADC_Start_IT+0x178>)
 80014a0:	4293      	cmp	r3, r2
 80014a2:	d11b      	bne.n	80014dc <HAL_ADC_Start_IT+0x15c>
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	689b      	ldr	r3, [r3, #8]
 80014aa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d114      	bne.n	80014dc <HAL_ADC_Start_IT+0x15c>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	689a      	ldr	r2, [r3, #8]
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80014c0:	609a      	str	r2, [r3, #8]
 80014c2:	e00b      	b.n	80014dc <HAL_ADC_Start_IT+0x15c>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c8:	f043 0210 	orr.w	r2, r3, #16
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014d4:	f043 0201 	orr.w	r2, r3, #1
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80014dc:	2300      	movs	r3, #0
}
 80014de:	4618      	mov	r0, r3
 80014e0:	3714      	adds	r7, #20
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr
 80014ea:	bf00      	nop
 80014ec:	2000003c 	.word	0x2000003c
 80014f0:	431bde83 	.word	0x431bde83
 80014f4:	40012300 	.word	0x40012300
 80014f8:	40012000 	.word	0x40012000

080014fc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b085      	sub	sp, #20
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
 8001504:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001506:	2300      	movs	r3, #0
 8001508:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001510:	2b01      	cmp	r3, #1
 8001512:	d101      	bne.n	8001518 <HAL_ADC_ConfigChannel+0x1c>
 8001514:	2302      	movs	r3, #2
 8001516:	e105      	b.n	8001724 <HAL_ADC_ConfigChannel+0x228>
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	2201      	movs	r2, #1
 800151c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	2b09      	cmp	r3, #9
 8001526:	d925      	bls.n	8001574 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	68d9      	ldr	r1, [r3, #12]
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	b29b      	uxth	r3, r3
 8001534:	461a      	mov	r2, r3
 8001536:	4613      	mov	r3, r2
 8001538:	005b      	lsls	r3, r3, #1
 800153a:	4413      	add	r3, r2
 800153c:	3b1e      	subs	r3, #30
 800153e:	2207      	movs	r2, #7
 8001540:	fa02 f303 	lsl.w	r3, r2, r3
 8001544:	43da      	mvns	r2, r3
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	400a      	ands	r2, r1
 800154c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	68d9      	ldr	r1, [r3, #12]
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	689a      	ldr	r2, [r3, #8]
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	b29b      	uxth	r3, r3
 800155e:	4618      	mov	r0, r3
 8001560:	4603      	mov	r3, r0
 8001562:	005b      	lsls	r3, r3, #1
 8001564:	4403      	add	r3, r0
 8001566:	3b1e      	subs	r3, #30
 8001568:	409a      	lsls	r2, r3
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	430a      	orrs	r2, r1
 8001570:	60da      	str	r2, [r3, #12]
 8001572:	e022      	b.n	80015ba <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	6919      	ldr	r1, [r3, #16]
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	b29b      	uxth	r3, r3
 8001580:	461a      	mov	r2, r3
 8001582:	4613      	mov	r3, r2
 8001584:	005b      	lsls	r3, r3, #1
 8001586:	4413      	add	r3, r2
 8001588:	2207      	movs	r2, #7
 800158a:	fa02 f303 	lsl.w	r3, r2, r3
 800158e:	43da      	mvns	r2, r3
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	400a      	ands	r2, r1
 8001596:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	6919      	ldr	r1, [r3, #16]
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	689a      	ldr	r2, [r3, #8]
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	b29b      	uxth	r3, r3
 80015a8:	4618      	mov	r0, r3
 80015aa:	4603      	mov	r3, r0
 80015ac:	005b      	lsls	r3, r3, #1
 80015ae:	4403      	add	r3, r0
 80015b0:	409a      	lsls	r2, r3
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	430a      	orrs	r2, r1
 80015b8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	2b06      	cmp	r3, #6
 80015c0:	d824      	bhi.n	800160c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	685a      	ldr	r2, [r3, #4]
 80015cc:	4613      	mov	r3, r2
 80015ce:	009b      	lsls	r3, r3, #2
 80015d0:	4413      	add	r3, r2
 80015d2:	3b05      	subs	r3, #5
 80015d4:	221f      	movs	r2, #31
 80015d6:	fa02 f303 	lsl.w	r3, r2, r3
 80015da:	43da      	mvns	r2, r3
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	400a      	ands	r2, r1
 80015e2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	b29b      	uxth	r3, r3
 80015f0:	4618      	mov	r0, r3
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	685a      	ldr	r2, [r3, #4]
 80015f6:	4613      	mov	r3, r2
 80015f8:	009b      	lsls	r3, r3, #2
 80015fa:	4413      	add	r3, r2
 80015fc:	3b05      	subs	r3, #5
 80015fe:	fa00 f203 	lsl.w	r2, r0, r3
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	430a      	orrs	r2, r1
 8001608:	635a      	str	r2, [r3, #52]	; 0x34
 800160a:	e04c      	b.n	80016a6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	2b0c      	cmp	r3, #12
 8001612:	d824      	bhi.n	800165e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	685a      	ldr	r2, [r3, #4]
 800161e:	4613      	mov	r3, r2
 8001620:	009b      	lsls	r3, r3, #2
 8001622:	4413      	add	r3, r2
 8001624:	3b23      	subs	r3, #35	; 0x23
 8001626:	221f      	movs	r2, #31
 8001628:	fa02 f303 	lsl.w	r3, r2, r3
 800162c:	43da      	mvns	r2, r3
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	400a      	ands	r2, r1
 8001634:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	b29b      	uxth	r3, r3
 8001642:	4618      	mov	r0, r3
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	685a      	ldr	r2, [r3, #4]
 8001648:	4613      	mov	r3, r2
 800164a:	009b      	lsls	r3, r3, #2
 800164c:	4413      	add	r3, r2
 800164e:	3b23      	subs	r3, #35	; 0x23
 8001650:	fa00 f203 	lsl.w	r2, r0, r3
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	430a      	orrs	r2, r1
 800165a:	631a      	str	r2, [r3, #48]	; 0x30
 800165c:	e023      	b.n	80016a6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	685a      	ldr	r2, [r3, #4]
 8001668:	4613      	mov	r3, r2
 800166a:	009b      	lsls	r3, r3, #2
 800166c:	4413      	add	r3, r2
 800166e:	3b41      	subs	r3, #65	; 0x41
 8001670:	221f      	movs	r2, #31
 8001672:	fa02 f303 	lsl.w	r3, r2, r3
 8001676:	43da      	mvns	r2, r3
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	400a      	ands	r2, r1
 800167e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	b29b      	uxth	r3, r3
 800168c:	4618      	mov	r0, r3
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	685a      	ldr	r2, [r3, #4]
 8001692:	4613      	mov	r3, r2
 8001694:	009b      	lsls	r3, r3, #2
 8001696:	4413      	add	r3, r2
 8001698:	3b41      	subs	r3, #65	; 0x41
 800169a:	fa00 f203 	lsl.w	r2, r0, r3
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	430a      	orrs	r2, r1
 80016a4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80016a6:	4b22      	ldr	r3, [pc, #136]	; (8001730 <HAL_ADC_ConfigChannel+0x234>)
 80016a8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4a21      	ldr	r2, [pc, #132]	; (8001734 <HAL_ADC_ConfigChannel+0x238>)
 80016b0:	4293      	cmp	r3, r2
 80016b2:	d109      	bne.n	80016c8 <HAL_ADC_ConfigChannel+0x1cc>
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	2b12      	cmp	r3, #18
 80016ba:	d105      	bne.n	80016c8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4a19      	ldr	r2, [pc, #100]	; (8001734 <HAL_ADC_ConfigChannel+0x238>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d123      	bne.n	800171a <HAL_ADC_ConfigChannel+0x21e>
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	2b10      	cmp	r3, #16
 80016d8:	d003      	beq.n	80016e2 <HAL_ADC_ConfigChannel+0x1e6>
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	2b11      	cmp	r3, #17
 80016e0:	d11b      	bne.n	800171a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	2b10      	cmp	r3, #16
 80016f4:	d111      	bne.n	800171a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80016f6:	4b10      	ldr	r3, [pc, #64]	; (8001738 <HAL_ADC_ConfigChannel+0x23c>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4a10      	ldr	r2, [pc, #64]	; (800173c <HAL_ADC_ConfigChannel+0x240>)
 80016fc:	fba2 2303 	umull	r2, r3, r2, r3
 8001700:	0c9a      	lsrs	r2, r3, #18
 8001702:	4613      	mov	r3, r2
 8001704:	009b      	lsls	r3, r3, #2
 8001706:	4413      	add	r3, r2
 8001708:	005b      	lsls	r3, r3, #1
 800170a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800170c:	e002      	b.n	8001714 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800170e:	68bb      	ldr	r3, [r7, #8]
 8001710:	3b01      	subs	r3, #1
 8001712:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001714:	68bb      	ldr	r3, [r7, #8]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d1f9      	bne.n	800170e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2200      	movs	r2, #0
 800171e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001722:	2300      	movs	r3, #0
}
 8001724:	4618      	mov	r0, r3
 8001726:	3714      	adds	r7, #20
 8001728:	46bd      	mov	sp, r7
 800172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172e:	4770      	bx	lr
 8001730:	40012300 	.word	0x40012300
 8001734:	40012000 	.word	0x40012000
 8001738:	2000003c 	.word	0x2000003c
 800173c:	431bde83 	.word	0x431bde83

08001740 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001740:	b480      	push	{r7}
 8001742:	b085      	sub	sp, #20
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001748:	4b79      	ldr	r3, [pc, #484]	; (8001930 <ADC_Init+0x1f0>)
 800174a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	685a      	ldr	r2, [r3, #4]
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	431a      	orrs	r2, r3
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	685a      	ldr	r2, [r3, #4]
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001774:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	6859      	ldr	r1, [r3, #4]
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	691b      	ldr	r3, [r3, #16]
 8001780:	021a      	lsls	r2, r3, #8
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	430a      	orrs	r2, r1
 8001788:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	685a      	ldr	r2, [r3, #4]
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001798:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	6859      	ldr	r1, [r3, #4]
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	689a      	ldr	r2, [r3, #8]
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	430a      	orrs	r2, r1
 80017aa:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	689a      	ldr	r2, [r3, #8]
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80017ba:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	6899      	ldr	r1, [r3, #8]
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	68da      	ldr	r2, [r3, #12]
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	430a      	orrs	r2, r1
 80017cc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017d2:	4a58      	ldr	r2, [pc, #352]	; (8001934 <ADC_Init+0x1f4>)
 80017d4:	4293      	cmp	r3, r2
 80017d6:	d022      	beq.n	800181e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	689a      	ldr	r2, [r3, #8]
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80017e6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	6899      	ldr	r1, [r3, #8]
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	430a      	orrs	r2, r1
 80017f8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	689a      	ldr	r2, [r3, #8]
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001808:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	6899      	ldr	r1, [r3, #8]
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	430a      	orrs	r2, r1
 800181a:	609a      	str	r2, [r3, #8]
 800181c:	e00f      	b.n	800183e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	689a      	ldr	r2, [r3, #8]
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800182c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	689a      	ldr	r2, [r3, #8]
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800183c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	689a      	ldr	r2, [r3, #8]
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f022 0202 	bic.w	r2, r2, #2
 800184c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	6899      	ldr	r1, [r3, #8]
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	7e1b      	ldrb	r3, [r3, #24]
 8001858:	005a      	lsls	r2, r3, #1
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	430a      	orrs	r2, r1
 8001860:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d01b      	beq.n	80018a4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	685a      	ldr	r2, [r3, #4]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800187a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	685a      	ldr	r2, [r3, #4]
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800188a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	6859      	ldr	r1, [r3, #4]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001896:	3b01      	subs	r3, #1
 8001898:	035a      	lsls	r2, r3, #13
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	430a      	orrs	r2, r1
 80018a0:	605a      	str	r2, [r3, #4]
 80018a2:	e007      	b.n	80018b4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	685a      	ldr	r2, [r3, #4]
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80018b2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80018c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	69db      	ldr	r3, [r3, #28]
 80018ce:	3b01      	subs	r3, #1
 80018d0:	051a      	lsls	r2, r3, #20
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	430a      	orrs	r2, r1
 80018d8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	689a      	ldr	r2, [r3, #8]
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80018e8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	6899      	ldr	r1, [r3, #8]
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80018f6:	025a      	lsls	r2, r3, #9
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	430a      	orrs	r2, r1
 80018fe:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	689a      	ldr	r2, [r3, #8]
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800190e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	6899      	ldr	r1, [r3, #8]
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	695b      	ldr	r3, [r3, #20]
 800191a:	029a      	lsls	r2, r3, #10
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	430a      	orrs	r2, r1
 8001922:	609a      	str	r2, [r3, #8]
}
 8001924:	bf00      	nop
 8001926:	3714      	adds	r7, #20
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr
 8001930:	40012300 	.word	0x40012300
 8001934:	0f000001 	.word	0x0f000001

08001938 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001938:	b480      	push	{r7}
 800193a:	b085      	sub	sp, #20
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	f003 0307 	and.w	r3, r3, #7
 8001946:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001948:	4b0c      	ldr	r3, [pc, #48]	; (800197c <__NVIC_SetPriorityGrouping+0x44>)
 800194a:	68db      	ldr	r3, [r3, #12]
 800194c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800194e:	68ba      	ldr	r2, [r7, #8]
 8001950:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001954:	4013      	ands	r3, r2
 8001956:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800195c:	68bb      	ldr	r3, [r7, #8]
 800195e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001960:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001964:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001968:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800196a:	4a04      	ldr	r2, [pc, #16]	; (800197c <__NVIC_SetPriorityGrouping+0x44>)
 800196c:	68bb      	ldr	r3, [r7, #8]
 800196e:	60d3      	str	r3, [r2, #12]
}
 8001970:	bf00      	nop
 8001972:	3714      	adds	r7, #20
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr
 800197c:	e000ed00 	.word	0xe000ed00

08001980 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001980:	b480      	push	{r7}
 8001982:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001984:	4b04      	ldr	r3, [pc, #16]	; (8001998 <__NVIC_GetPriorityGrouping+0x18>)
 8001986:	68db      	ldr	r3, [r3, #12]
 8001988:	0a1b      	lsrs	r3, r3, #8
 800198a:	f003 0307 	and.w	r3, r3, #7
}
 800198e:	4618      	mov	r0, r3
 8001990:	46bd      	mov	sp, r7
 8001992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001996:	4770      	bx	lr
 8001998:	e000ed00 	.word	0xe000ed00

0800199c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800199c:	b480      	push	{r7}
 800199e:	b083      	sub	sp, #12
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	4603      	mov	r3, r0
 80019a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	db0b      	blt.n	80019c6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019ae:	79fb      	ldrb	r3, [r7, #7]
 80019b0:	f003 021f 	and.w	r2, r3, #31
 80019b4:	4907      	ldr	r1, [pc, #28]	; (80019d4 <__NVIC_EnableIRQ+0x38>)
 80019b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ba:	095b      	lsrs	r3, r3, #5
 80019bc:	2001      	movs	r0, #1
 80019be:	fa00 f202 	lsl.w	r2, r0, r2
 80019c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80019c6:	bf00      	nop
 80019c8:	370c      	adds	r7, #12
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr
 80019d2:	bf00      	nop
 80019d4:	e000e100 	.word	0xe000e100

080019d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019d8:	b480      	push	{r7}
 80019da:	b083      	sub	sp, #12
 80019dc:	af00      	add	r7, sp, #0
 80019de:	4603      	mov	r3, r0
 80019e0:	6039      	str	r1, [r7, #0]
 80019e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	db0a      	blt.n	8001a02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	b2da      	uxtb	r2, r3
 80019f0:	490c      	ldr	r1, [pc, #48]	; (8001a24 <__NVIC_SetPriority+0x4c>)
 80019f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019f6:	0112      	lsls	r2, r2, #4
 80019f8:	b2d2      	uxtb	r2, r2
 80019fa:	440b      	add	r3, r1
 80019fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a00:	e00a      	b.n	8001a18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	b2da      	uxtb	r2, r3
 8001a06:	4908      	ldr	r1, [pc, #32]	; (8001a28 <__NVIC_SetPriority+0x50>)
 8001a08:	79fb      	ldrb	r3, [r7, #7]
 8001a0a:	f003 030f 	and.w	r3, r3, #15
 8001a0e:	3b04      	subs	r3, #4
 8001a10:	0112      	lsls	r2, r2, #4
 8001a12:	b2d2      	uxtb	r2, r2
 8001a14:	440b      	add	r3, r1
 8001a16:	761a      	strb	r2, [r3, #24]
}
 8001a18:	bf00      	nop
 8001a1a:	370c      	adds	r7, #12
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a22:	4770      	bx	lr
 8001a24:	e000e100 	.word	0xe000e100
 8001a28:	e000ed00 	.word	0xe000ed00

08001a2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b089      	sub	sp, #36	; 0x24
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	60f8      	str	r0, [r7, #12]
 8001a34:	60b9      	str	r1, [r7, #8]
 8001a36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	f003 0307 	and.w	r3, r3, #7
 8001a3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a40:	69fb      	ldr	r3, [r7, #28]
 8001a42:	f1c3 0307 	rsb	r3, r3, #7
 8001a46:	2b04      	cmp	r3, #4
 8001a48:	bf28      	it	cs
 8001a4a:	2304      	movcs	r3, #4
 8001a4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a4e:	69fb      	ldr	r3, [r7, #28]
 8001a50:	3304      	adds	r3, #4
 8001a52:	2b06      	cmp	r3, #6
 8001a54:	d902      	bls.n	8001a5c <NVIC_EncodePriority+0x30>
 8001a56:	69fb      	ldr	r3, [r7, #28]
 8001a58:	3b03      	subs	r3, #3
 8001a5a:	e000      	b.n	8001a5e <NVIC_EncodePriority+0x32>
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a60:	f04f 32ff 	mov.w	r2, #4294967295
 8001a64:	69bb      	ldr	r3, [r7, #24]
 8001a66:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6a:	43da      	mvns	r2, r3
 8001a6c:	68bb      	ldr	r3, [r7, #8]
 8001a6e:	401a      	ands	r2, r3
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a74:	f04f 31ff 	mov.w	r1, #4294967295
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a7e:	43d9      	mvns	r1, r3
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a84:	4313      	orrs	r3, r2
         );
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	3724      	adds	r7, #36	; 0x24
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr
	...

08001a94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b082      	sub	sp, #8
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	3b01      	subs	r3, #1
 8001aa0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001aa4:	d301      	bcc.n	8001aaa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	e00f      	b.n	8001aca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001aaa:	4a0a      	ldr	r2, [pc, #40]	; (8001ad4 <SysTick_Config+0x40>)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	3b01      	subs	r3, #1
 8001ab0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ab2:	210f      	movs	r1, #15
 8001ab4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ab8:	f7ff ff8e 	bl	80019d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001abc:	4b05      	ldr	r3, [pc, #20]	; (8001ad4 <SysTick_Config+0x40>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ac2:	4b04      	ldr	r3, [pc, #16]	; (8001ad4 <SysTick_Config+0x40>)
 8001ac4:	2207      	movs	r2, #7
 8001ac6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ac8:	2300      	movs	r3, #0
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	3708      	adds	r7, #8
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	e000e010 	.word	0xe000e010

08001ad8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b082      	sub	sp, #8
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ae0:	6878      	ldr	r0, [r7, #4]
 8001ae2:	f7ff ff29 	bl	8001938 <__NVIC_SetPriorityGrouping>
}
 8001ae6:	bf00      	nop
 8001ae8:	3708      	adds	r7, #8
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}

08001aee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001aee:	b580      	push	{r7, lr}
 8001af0:	b086      	sub	sp, #24
 8001af2:	af00      	add	r7, sp, #0
 8001af4:	4603      	mov	r3, r0
 8001af6:	60b9      	str	r1, [r7, #8]
 8001af8:	607a      	str	r2, [r7, #4]
 8001afa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001afc:	2300      	movs	r3, #0
 8001afe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b00:	f7ff ff3e 	bl	8001980 <__NVIC_GetPriorityGrouping>
 8001b04:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b06:	687a      	ldr	r2, [r7, #4]
 8001b08:	68b9      	ldr	r1, [r7, #8]
 8001b0a:	6978      	ldr	r0, [r7, #20]
 8001b0c:	f7ff ff8e 	bl	8001a2c <NVIC_EncodePriority>
 8001b10:	4602      	mov	r2, r0
 8001b12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b16:	4611      	mov	r1, r2
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f7ff ff5d 	bl	80019d8 <__NVIC_SetPriority>
}
 8001b1e:	bf00      	nop
 8001b20:	3718      	adds	r7, #24
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}

08001b26 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b26:	b580      	push	{r7, lr}
 8001b28:	b082      	sub	sp, #8
 8001b2a:	af00      	add	r7, sp, #0
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b34:	4618      	mov	r0, r3
 8001b36:	f7ff ff31 	bl	800199c <__NVIC_EnableIRQ>
}
 8001b3a:	bf00      	nop
 8001b3c:	3708      	adds	r7, #8
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}

08001b42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b42:	b580      	push	{r7, lr}
 8001b44:	b082      	sub	sp, #8
 8001b46:	af00      	add	r7, sp, #0
 8001b48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b4a:	6878      	ldr	r0, [r7, #4]
 8001b4c:	f7ff ffa2 	bl	8001a94 <SysTick_Config>
 8001b50:	4603      	mov	r3, r0
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	3708      	adds	r7, #8
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}

08001b5a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001b5a:	b580      	push	{r7, lr}
 8001b5c:	b084      	sub	sp, #16
 8001b5e:	af00      	add	r7, sp, #0
 8001b60:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b66:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001b68:	f7ff fbba 	bl	80012e0 <HAL_GetTick>
 8001b6c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b74:	b2db      	uxtb	r3, r3
 8001b76:	2b02      	cmp	r3, #2
 8001b78:	d008      	beq.n	8001b8c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2280      	movs	r2, #128	; 0x80
 8001b7e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2200      	movs	r2, #0
 8001b84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	e052      	b.n	8001c32 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	681a      	ldr	r2, [r3, #0]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f022 0216 	bic.w	r2, r2, #22
 8001b9a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	695a      	ldr	r2, [r3, #20]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001baa:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d103      	bne.n	8001bbc <HAL_DMA_Abort+0x62>
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d007      	beq.n	8001bcc <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	681a      	ldr	r2, [r3, #0]
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f022 0208 	bic.w	r2, r2, #8
 8001bca:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	681a      	ldr	r2, [r3, #0]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f022 0201 	bic.w	r2, r2, #1
 8001bda:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001bdc:	e013      	b.n	8001c06 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001bde:	f7ff fb7f 	bl	80012e0 <HAL_GetTick>
 8001be2:	4602      	mov	r2, r0
 8001be4:	68bb      	ldr	r3, [r7, #8]
 8001be6:	1ad3      	subs	r3, r2, r3
 8001be8:	2b05      	cmp	r3, #5
 8001bea:	d90c      	bls.n	8001c06 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2220      	movs	r2, #32
 8001bf0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2203      	movs	r2, #3
 8001bf6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001c02:	2303      	movs	r3, #3
 8001c04:	e015      	b.n	8001c32 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f003 0301 	and.w	r3, r3, #1
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d1e4      	bne.n	8001bde <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c18:	223f      	movs	r2, #63	; 0x3f
 8001c1a:	409a      	lsls	r2, r3
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2201      	movs	r2, #1
 8001c24:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001c30:	2300      	movs	r3, #0
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	3710      	adds	r7, #16
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}

08001c3a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001c3a:	b480      	push	{r7}
 8001c3c:	b083      	sub	sp, #12
 8001c3e:	af00      	add	r7, sp, #0
 8001c40:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c48:	b2db      	uxtb	r3, r3
 8001c4a:	2b02      	cmp	r3, #2
 8001c4c:	d004      	beq.n	8001c58 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2280      	movs	r2, #128	; 0x80
 8001c52:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001c54:	2301      	movs	r3, #1
 8001c56:	e00c      	b.n	8001c72 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2205      	movs	r2, #5
 8001c5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	681a      	ldr	r2, [r3, #0]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f022 0201 	bic.w	r2, r2, #1
 8001c6e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001c70:	2300      	movs	r3, #0
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	370c      	adds	r7, #12
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr
	...

08001c80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b089      	sub	sp, #36	; 0x24
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
 8001c88:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c92:	2300      	movs	r3, #0
 8001c94:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c96:	2300      	movs	r3, #0
 8001c98:	61fb      	str	r3, [r7, #28]
 8001c9a:	e159      	b.n	8001f50 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c9c:	2201      	movs	r2, #1
 8001c9e:	69fb      	ldr	r3, [r7, #28]
 8001ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	697a      	ldr	r2, [r7, #20]
 8001cac:	4013      	ands	r3, r2
 8001cae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001cb0:	693a      	ldr	r2, [r7, #16]
 8001cb2:	697b      	ldr	r3, [r7, #20]
 8001cb4:	429a      	cmp	r2, r3
 8001cb6:	f040 8148 	bne.w	8001f4a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	f003 0303 	and.w	r3, r3, #3
 8001cc2:	2b01      	cmp	r3, #1
 8001cc4:	d005      	beq.n	8001cd2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001cce:	2b02      	cmp	r3, #2
 8001cd0:	d130      	bne.n	8001d34 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	689b      	ldr	r3, [r3, #8]
 8001cd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001cd8:	69fb      	ldr	r3, [r7, #28]
 8001cda:	005b      	lsls	r3, r3, #1
 8001cdc:	2203      	movs	r2, #3
 8001cde:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce2:	43db      	mvns	r3, r3
 8001ce4:	69ba      	ldr	r2, [r7, #24]
 8001ce6:	4013      	ands	r3, r2
 8001ce8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	68da      	ldr	r2, [r3, #12]
 8001cee:	69fb      	ldr	r3, [r7, #28]
 8001cf0:	005b      	lsls	r3, r3, #1
 8001cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf6:	69ba      	ldr	r2, [r7, #24]
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	69ba      	ldr	r2, [r7, #24]
 8001d00:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d08:	2201      	movs	r2, #1
 8001d0a:	69fb      	ldr	r3, [r7, #28]
 8001d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d10:	43db      	mvns	r3, r3
 8001d12:	69ba      	ldr	r2, [r7, #24]
 8001d14:	4013      	ands	r3, r2
 8001d16:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	091b      	lsrs	r3, r3, #4
 8001d1e:	f003 0201 	and.w	r2, r3, #1
 8001d22:	69fb      	ldr	r3, [r7, #28]
 8001d24:	fa02 f303 	lsl.w	r3, r2, r3
 8001d28:	69ba      	ldr	r2, [r7, #24]
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	69ba      	ldr	r2, [r7, #24]
 8001d32:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	f003 0303 	and.w	r3, r3, #3
 8001d3c:	2b03      	cmp	r3, #3
 8001d3e:	d017      	beq.n	8001d70 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	68db      	ldr	r3, [r3, #12]
 8001d44:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d46:	69fb      	ldr	r3, [r7, #28]
 8001d48:	005b      	lsls	r3, r3, #1
 8001d4a:	2203      	movs	r2, #3
 8001d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d50:	43db      	mvns	r3, r3
 8001d52:	69ba      	ldr	r2, [r7, #24]
 8001d54:	4013      	ands	r3, r2
 8001d56:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	689a      	ldr	r2, [r3, #8]
 8001d5c:	69fb      	ldr	r3, [r7, #28]
 8001d5e:	005b      	lsls	r3, r3, #1
 8001d60:	fa02 f303 	lsl.w	r3, r2, r3
 8001d64:	69ba      	ldr	r2, [r7, #24]
 8001d66:	4313      	orrs	r3, r2
 8001d68:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	69ba      	ldr	r2, [r7, #24]
 8001d6e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	f003 0303 	and.w	r3, r3, #3
 8001d78:	2b02      	cmp	r3, #2
 8001d7a:	d123      	bne.n	8001dc4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d7c:	69fb      	ldr	r3, [r7, #28]
 8001d7e:	08da      	lsrs	r2, r3, #3
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	3208      	adds	r2, #8
 8001d84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d88:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d8a:	69fb      	ldr	r3, [r7, #28]
 8001d8c:	f003 0307 	and.w	r3, r3, #7
 8001d90:	009b      	lsls	r3, r3, #2
 8001d92:	220f      	movs	r2, #15
 8001d94:	fa02 f303 	lsl.w	r3, r2, r3
 8001d98:	43db      	mvns	r3, r3
 8001d9a:	69ba      	ldr	r2, [r7, #24]
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	691a      	ldr	r2, [r3, #16]
 8001da4:	69fb      	ldr	r3, [r7, #28]
 8001da6:	f003 0307 	and.w	r3, r3, #7
 8001daa:	009b      	lsls	r3, r3, #2
 8001dac:	fa02 f303 	lsl.w	r3, r2, r3
 8001db0:	69ba      	ldr	r2, [r7, #24]
 8001db2:	4313      	orrs	r3, r2
 8001db4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001db6:	69fb      	ldr	r3, [r7, #28]
 8001db8:	08da      	lsrs	r2, r3, #3
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	3208      	adds	r2, #8
 8001dbe:	69b9      	ldr	r1, [r7, #24]
 8001dc0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001dca:	69fb      	ldr	r3, [r7, #28]
 8001dcc:	005b      	lsls	r3, r3, #1
 8001dce:	2203      	movs	r2, #3
 8001dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd4:	43db      	mvns	r3, r3
 8001dd6:	69ba      	ldr	r2, [r7, #24]
 8001dd8:	4013      	ands	r3, r2
 8001dda:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	f003 0203 	and.w	r2, r3, #3
 8001de4:	69fb      	ldr	r3, [r7, #28]
 8001de6:	005b      	lsls	r3, r3, #1
 8001de8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dec:	69ba      	ldr	r2, [r7, #24]
 8001dee:	4313      	orrs	r3, r2
 8001df0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	69ba      	ldr	r2, [r7, #24]
 8001df6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	f000 80a2 	beq.w	8001f4a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e06:	2300      	movs	r3, #0
 8001e08:	60fb      	str	r3, [r7, #12]
 8001e0a:	4b57      	ldr	r3, [pc, #348]	; (8001f68 <HAL_GPIO_Init+0x2e8>)
 8001e0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e0e:	4a56      	ldr	r2, [pc, #344]	; (8001f68 <HAL_GPIO_Init+0x2e8>)
 8001e10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e14:	6453      	str	r3, [r2, #68]	; 0x44
 8001e16:	4b54      	ldr	r3, [pc, #336]	; (8001f68 <HAL_GPIO_Init+0x2e8>)
 8001e18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e1e:	60fb      	str	r3, [r7, #12]
 8001e20:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e22:	4a52      	ldr	r2, [pc, #328]	; (8001f6c <HAL_GPIO_Init+0x2ec>)
 8001e24:	69fb      	ldr	r3, [r7, #28]
 8001e26:	089b      	lsrs	r3, r3, #2
 8001e28:	3302      	adds	r3, #2
 8001e2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e30:	69fb      	ldr	r3, [r7, #28]
 8001e32:	f003 0303 	and.w	r3, r3, #3
 8001e36:	009b      	lsls	r3, r3, #2
 8001e38:	220f      	movs	r2, #15
 8001e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3e:	43db      	mvns	r3, r3
 8001e40:	69ba      	ldr	r2, [r7, #24]
 8001e42:	4013      	ands	r3, r2
 8001e44:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	4a49      	ldr	r2, [pc, #292]	; (8001f70 <HAL_GPIO_Init+0x2f0>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d019      	beq.n	8001e82 <HAL_GPIO_Init+0x202>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	4a48      	ldr	r2, [pc, #288]	; (8001f74 <HAL_GPIO_Init+0x2f4>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d013      	beq.n	8001e7e <HAL_GPIO_Init+0x1fe>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	4a47      	ldr	r2, [pc, #284]	; (8001f78 <HAL_GPIO_Init+0x2f8>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d00d      	beq.n	8001e7a <HAL_GPIO_Init+0x1fa>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	4a46      	ldr	r2, [pc, #280]	; (8001f7c <HAL_GPIO_Init+0x2fc>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d007      	beq.n	8001e76 <HAL_GPIO_Init+0x1f6>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	4a45      	ldr	r2, [pc, #276]	; (8001f80 <HAL_GPIO_Init+0x300>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d101      	bne.n	8001e72 <HAL_GPIO_Init+0x1f2>
 8001e6e:	2304      	movs	r3, #4
 8001e70:	e008      	b.n	8001e84 <HAL_GPIO_Init+0x204>
 8001e72:	2307      	movs	r3, #7
 8001e74:	e006      	b.n	8001e84 <HAL_GPIO_Init+0x204>
 8001e76:	2303      	movs	r3, #3
 8001e78:	e004      	b.n	8001e84 <HAL_GPIO_Init+0x204>
 8001e7a:	2302      	movs	r3, #2
 8001e7c:	e002      	b.n	8001e84 <HAL_GPIO_Init+0x204>
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e000      	b.n	8001e84 <HAL_GPIO_Init+0x204>
 8001e82:	2300      	movs	r3, #0
 8001e84:	69fa      	ldr	r2, [r7, #28]
 8001e86:	f002 0203 	and.w	r2, r2, #3
 8001e8a:	0092      	lsls	r2, r2, #2
 8001e8c:	4093      	lsls	r3, r2
 8001e8e:	69ba      	ldr	r2, [r7, #24]
 8001e90:	4313      	orrs	r3, r2
 8001e92:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e94:	4935      	ldr	r1, [pc, #212]	; (8001f6c <HAL_GPIO_Init+0x2ec>)
 8001e96:	69fb      	ldr	r3, [r7, #28]
 8001e98:	089b      	lsrs	r3, r3, #2
 8001e9a:	3302      	adds	r3, #2
 8001e9c:	69ba      	ldr	r2, [r7, #24]
 8001e9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ea2:	4b38      	ldr	r3, [pc, #224]	; (8001f84 <HAL_GPIO_Init+0x304>)
 8001ea4:	689b      	ldr	r3, [r3, #8]
 8001ea6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ea8:	693b      	ldr	r3, [r7, #16]
 8001eaa:	43db      	mvns	r3, r3
 8001eac:	69ba      	ldr	r2, [r7, #24]
 8001eae:	4013      	ands	r3, r2
 8001eb0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d003      	beq.n	8001ec6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001ebe:	69ba      	ldr	r2, [r7, #24]
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ec6:	4a2f      	ldr	r2, [pc, #188]	; (8001f84 <HAL_GPIO_Init+0x304>)
 8001ec8:	69bb      	ldr	r3, [r7, #24]
 8001eca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ecc:	4b2d      	ldr	r3, [pc, #180]	; (8001f84 <HAL_GPIO_Init+0x304>)
 8001ece:	68db      	ldr	r3, [r3, #12]
 8001ed0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ed2:	693b      	ldr	r3, [r7, #16]
 8001ed4:	43db      	mvns	r3, r3
 8001ed6:	69ba      	ldr	r2, [r7, #24]
 8001ed8:	4013      	ands	r3, r2
 8001eda:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d003      	beq.n	8001ef0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001ee8:	69ba      	ldr	r2, [r7, #24]
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	4313      	orrs	r3, r2
 8001eee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ef0:	4a24      	ldr	r2, [pc, #144]	; (8001f84 <HAL_GPIO_Init+0x304>)
 8001ef2:	69bb      	ldr	r3, [r7, #24]
 8001ef4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001ef6:	4b23      	ldr	r3, [pc, #140]	; (8001f84 <HAL_GPIO_Init+0x304>)
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001efc:	693b      	ldr	r3, [r7, #16]
 8001efe:	43db      	mvns	r3, r3
 8001f00:	69ba      	ldr	r2, [r7, #24]
 8001f02:	4013      	ands	r3, r2
 8001f04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d003      	beq.n	8001f1a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001f12:	69ba      	ldr	r2, [r7, #24]
 8001f14:	693b      	ldr	r3, [r7, #16]
 8001f16:	4313      	orrs	r3, r2
 8001f18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f1a:	4a1a      	ldr	r2, [pc, #104]	; (8001f84 <HAL_GPIO_Init+0x304>)
 8001f1c:	69bb      	ldr	r3, [r7, #24]
 8001f1e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f20:	4b18      	ldr	r3, [pc, #96]	; (8001f84 <HAL_GPIO_Init+0x304>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f26:	693b      	ldr	r3, [r7, #16]
 8001f28:	43db      	mvns	r3, r3
 8001f2a:	69ba      	ldr	r2, [r7, #24]
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d003      	beq.n	8001f44 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001f3c:	69ba      	ldr	r2, [r7, #24]
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	4313      	orrs	r3, r2
 8001f42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f44:	4a0f      	ldr	r2, [pc, #60]	; (8001f84 <HAL_GPIO_Init+0x304>)
 8001f46:	69bb      	ldr	r3, [r7, #24]
 8001f48:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f4a:	69fb      	ldr	r3, [r7, #28]
 8001f4c:	3301      	adds	r3, #1
 8001f4e:	61fb      	str	r3, [r7, #28]
 8001f50:	69fb      	ldr	r3, [r7, #28]
 8001f52:	2b0f      	cmp	r3, #15
 8001f54:	f67f aea2 	bls.w	8001c9c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f58:	bf00      	nop
 8001f5a:	bf00      	nop
 8001f5c:	3724      	adds	r7, #36	; 0x24
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr
 8001f66:	bf00      	nop
 8001f68:	40023800 	.word	0x40023800
 8001f6c:	40013800 	.word	0x40013800
 8001f70:	40020000 	.word	0x40020000
 8001f74:	40020400 	.word	0x40020400
 8001f78:	40020800 	.word	0x40020800
 8001f7c:	40020c00 	.word	0x40020c00
 8001f80:	40021000 	.word	0x40021000
 8001f84:	40013c00 	.word	0x40013c00

08001f88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b083      	sub	sp, #12
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
 8001f90:	460b      	mov	r3, r1
 8001f92:	807b      	strh	r3, [r7, #2]
 8001f94:	4613      	mov	r3, r2
 8001f96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f98:	787b      	ldrb	r3, [r7, #1]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d003      	beq.n	8001fa6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f9e:	887a      	ldrh	r2, [r7, #2]
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001fa4:	e003      	b.n	8001fae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001fa6:	887b      	ldrh	r3, [r7, #2]
 8001fa8:	041a      	lsls	r2, r3, #16
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	619a      	str	r2, [r3, #24]
}
 8001fae:	bf00      	nop
 8001fb0:	370c      	adds	r7, #12
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb8:	4770      	bx	lr
	...

08001fbc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b086      	sub	sp, #24
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d101      	bne.n	8001fce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e267      	b.n	800249e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f003 0301 	and.w	r3, r3, #1
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d075      	beq.n	80020c6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001fda:	4b88      	ldr	r3, [pc, #544]	; (80021fc <HAL_RCC_OscConfig+0x240>)
 8001fdc:	689b      	ldr	r3, [r3, #8]
 8001fde:	f003 030c 	and.w	r3, r3, #12
 8001fe2:	2b04      	cmp	r3, #4
 8001fe4:	d00c      	beq.n	8002000 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001fe6:	4b85      	ldr	r3, [pc, #532]	; (80021fc <HAL_RCC_OscConfig+0x240>)
 8001fe8:	689b      	ldr	r3, [r3, #8]
 8001fea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001fee:	2b08      	cmp	r3, #8
 8001ff0:	d112      	bne.n	8002018 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ff2:	4b82      	ldr	r3, [pc, #520]	; (80021fc <HAL_RCC_OscConfig+0x240>)
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ffa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001ffe:	d10b      	bne.n	8002018 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002000:	4b7e      	ldr	r3, [pc, #504]	; (80021fc <HAL_RCC_OscConfig+0x240>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002008:	2b00      	cmp	r3, #0
 800200a:	d05b      	beq.n	80020c4 <HAL_RCC_OscConfig+0x108>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d157      	bne.n	80020c4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002014:	2301      	movs	r3, #1
 8002016:	e242      	b.n	800249e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002020:	d106      	bne.n	8002030 <HAL_RCC_OscConfig+0x74>
 8002022:	4b76      	ldr	r3, [pc, #472]	; (80021fc <HAL_RCC_OscConfig+0x240>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a75      	ldr	r2, [pc, #468]	; (80021fc <HAL_RCC_OscConfig+0x240>)
 8002028:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800202c:	6013      	str	r3, [r2, #0]
 800202e:	e01d      	b.n	800206c <HAL_RCC_OscConfig+0xb0>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002038:	d10c      	bne.n	8002054 <HAL_RCC_OscConfig+0x98>
 800203a:	4b70      	ldr	r3, [pc, #448]	; (80021fc <HAL_RCC_OscConfig+0x240>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4a6f      	ldr	r2, [pc, #444]	; (80021fc <HAL_RCC_OscConfig+0x240>)
 8002040:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002044:	6013      	str	r3, [r2, #0]
 8002046:	4b6d      	ldr	r3, [pc, #436]	; (80021fc <HAL_RCC_OscConfig+0x240>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4a6c      	ldr	r2, [pc, #432]	; (80021fc <HAL_RCC_OscConfig+0x240>)
 800204c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002050:	6013      	str	r3, [r2, #0]
 8002052:	e00b      	b.n	800206c <HAL_RCC_OscConfig+0xb0>
 8002054:	4b69      	ldr	r3, [pc, #420]	; (80021fc <HAL_RCC_OscConfig+0x240>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a68      	ldr	r2, [pc, #416]	; (80021fc <HAL_RCC_OscConfig+0x240>)
 800205a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800205e:	6013      	str	r3, [r2, #0]
 8002060:	4b66      	ldr	r3, [pc, #408]	; (80021fc <HAL_RCC_OscConfig+0x240>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a65      	ldr	r2, [pc, #404]	; (80021fc <HAL_RCC_OscConfig+0x240>)
 8002066:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800206a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d013      	beq.n	800209c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002074:	f7ff f934 	bl	80012e0 <HAL_GetTick>
 8002078:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800207a:	e008      	b.n	800208e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800207c:	f7ff f930 	bl	80012e0 <HAL_GetTick>
 8002080:	4602      	mov	r2, r0
 8002082:	693b      	ldr	r3, [r7, #16]
 8002084:	1ad3      	subs	r3, r2, r3
 8002086:	2b64      	cmp	r3, #100	; 0x64
 8002088:	d901      	bls.n	800208e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800208a:	2303      	movs	r3, #3
 800208c:	e207      	b.n	800249e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800208e:	4b5b      	ldr	r3, [pc, #364]	; (80021fc <HAL_RCC_OscConfig+0x240>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002096:	2b00      	cmp	r3, #0
 8002098:	d0f0      	beq.n	800207c <HAL_RCC_OscConfig+0xc0>
 800209a:	e014      	b.n	80020c6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800209c:	f7ff f920 	bl	80012e0 <HAL_GetTick>
 80020a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020a2:	e008      	b.n	80020b6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020a4:	f7ff f91c 	bl	80012e0 <HAL_GetTick>
 80020a8:	4602      	mov	r2, r0
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	1ad3      	subs	r3, r2, r3
 80020ae:	2b64      	cmp	r3, #100	; 0x64
 80020b0:	d901      	bls.n	80020b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80020b2:	2303      	movs	r3, #3
 80020b4:	e1f3      	b.n	800249e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020b6:	4b51      	ldr	r3, [pc, #324]	; (80021fc <HAL_RCC_OscConfig+0x240>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d1f0      	bne.n	80020a4 <HAL_RCC_OscConfig+0xe8>
 80020c2:	e000      	b.n	80020c6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f003 0302 	and.w	r3, r3, #2
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d063      	beq.n	800219a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80020d2:	4b4a      	ldr	r3, [pc, #296]	; (80021fc <HAL_RCC_OscConfig+0x240>)
 80020d4:	689b      	ldr	r3, [r3, #8]
 80020d6:	f003 030c 	and.w	r3, r3, #12
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d00b      	beq.n	80020f6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80020de:	4b47      	ldr	r3, [pc, #284]	; (80021fc <HAL_RCC_OscConfig+0x240>)
 80020e0:	689b      	ldr	r3, [r3, #8]
 80020e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80020e6:	2b08      	cmp	r3, #8
 80020e8:	d11c      	bne.n	8002124 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80020ea:	4b44      	ldr	r3, [pc, #272]	; (80021fc <HAL_RCC_OscConfig+0x240>)
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d116      	bne.n	8002124 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020f6:	4b41      	ldr	r3, [pc, #260]	; (80021fc <HAL_RCC_OscConfig+0x240>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f003 0302 	and.w	r3, r3, #2
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d005      	beq.n	800210e <HAL_RCC_OscConfig+0x152>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	68db      	ldr	r3, [r3, #12]
 8002106:	2b01      	cmp	r3, #1
 8002108:	d001      	beq.n	800210e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	e1c7      	b.n	800249e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800210e:	4b3b      	ldr	r3, [pc, #236]	; (80021fc <HAL_RCC_OscConfig+0x240>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	691b      	ldr	r3, [r3, #16]
 800211a:	00db      	lsls	r3, r3, #3
 800211c:	4937      	ldr	r1, [pc, #220]	; (80021fc <HAL_RCC_OscConfig+0x240>)
 800211e:	4313      	orrs	r3, r2
 8002120:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002122:	e03a      	b.n	800219a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	68db      	ldr	r3, [r3, #12]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d020      	beq.n	800216e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800212c:	4b34      	ldr	r3, [pc, #208]	; (8002200 <HAL_RCC_OscConfig+0x244>)
 800212e:	2201      	movs	r2, #1
 8002130:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002132:	f7ff f8d5 	bl	80012e0 <HAL_GetTick>
 8002136:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002138:	e008      	b.n	800214c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800213a:	f7ff f8d1 	bl	80012e0 <HAL_GetTick>
 800213e:	4602      	mov	r2, r0
 8002140:	693b      	ldr	r3, [r7, #16]
 8002142:	1ad3      	subs	r3, r2, r3
 8002144:	2b02      	cmp	r3, #2
 8002146:	d901      	bls.n	800214c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002148:	2303      	movs	r3, #3
 800214a:	e1a8      	b.n	800249e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800214c:	4b2b      	ldr	r3, [pc, #172]	; (80021fc <HAL_RCC_OscConfig+0x240>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f003 0302 	and.w	r3, r3, #2
 8002154:	2b00      	cmp	r3, #0
 8002156:	d0f0      	beq.n	800213a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002158:	4b28      	ldr	r3, [pc, #160]	; (80021fc <HAL_RCC_OscConfig+0x240>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	691b      	ldr	r3, [r3, #16]
 8002164:	00db      	lsls	r3, r3, #3
 8002166:	4925      	ldr	r1, [pc, #148]	; (80021fc <HAL_RCC_OscConfig+0x240>)
 8002168:	4313      	orrs	r3, r2
 800216a:	600b      	str	r3, [r1, #0]
 800216c:	e015      	b.n	800219a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800216e:	4b24      	ldr	r3, [pc, #144]	; (8002200 <HAL_RCC_OscConfig+0x244>)
 8002170:	2200      	movs	r2, #0
 8002172:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002174:	f7ff f8b4 	bl	80012e0 <HAL_GetTick>
 8002178:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800217a:	e008      	b.n	800218e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800217c:	f7ff f8b0 	bl	80012e0 <HAL_GetTick>
 8002180:	4602      	mov	r2, r0
 8002182:	693b      	ldr	r3, [r7, #16]
 8002184:	1ad3      	subs	r3, r2, r3
 8002186:	2b02      	cmp	r3, #2
 8002188:	d901      	bls.n	800218e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800218a:	2303      	movs	r3, #3
 800218c:	e187      	b.n	800249e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800218e:	4b1b      	ldr	r3, [pc, #108]	; (80021fc <HAL_RCC_OscConfig+0x240>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f003 0302 	and.w	r3, r3, #2
 8002196:	2b00      	cmp	r3, #0
 8002198:	d1f0      	bne.n	800217c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f003 0308 	and.w	r3, r3, #8
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d036      	beq.n	8002214 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	695b      	ldr	r3, [r3, #20]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d016      	beq.n	80021dc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021ae:	4b15      	ldr	r3, [pc, #84]	; (8002204 <HAL_RCC_OscConfig+0x248>)
 80021b0:	2201      	movs	r2, #1
 80021b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021b4:	f7ff f894 	bl	80012e0 <HAL_GetTick>
 80021b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021ba:	e008      	b.n	80021ce <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021bc:	f7ff f890 	bl	80012e0 <HAL_GetTick>
 80021c0:	4602      	mov	r2, r0
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	1ad3      	subs	r3, r2, r3
 80021c6:	2b02      	cmp	r3, #2
 80021c8:	d901      	bls.n	80021ce <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80021ca:	2303      	movs	r3, #3
 80021cc:	e167      	b.n	800249e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021ce:	4b0b      	ldr	r3, [pc, #44]	; (80021fc <HAL_RCC_OscConfig+0x240>)
 80021d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021d2:	f003 0302 	and.w	r3, r3, #2
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d0f0      	beq.n	80021bc <HAL_RCC_OscConfig+0x200>
 80021da:	e01b      	b.n	8002214 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021dc:	4b09      	ldr	r3, [pc, #36]	; (8002204 <HAL_RCC_OscConfig+0x248>)
 80021de:	2200      	movs	r2, #0
 80021e0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021e2:	f7ff f87d 	bl	80012e0 <HAL_GetTick>
 80021e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021e8:	e00e      	b.n	8002208 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021ea:	f7ff f879 	bl	80012e0 <HAL_GetTick>
 80021ee:	4602      	mov	r2, r0
 80021f0:	693b      	ldr	r3, [r7, #16]
 80021f2:	1ad3      	subs	r3, r2, r3
 80021f4:	2b02      	cmp	r3, #2
 80021f6:	d907      	bls.n	8002208 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80021f8:	2303      	movs	r3, #3
 80021fa:	e150      	b.n	800249e <HAL_RCC_OscConfig+0x4e2>
 80021fc:	40023800 	.word	0x40023800
 8002200:	42470000 	.word	0x42470000
 8002204:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002208:	4b88      	ldr	r3, [pc, #544]	; (800242c <HAL_RCC_OscConfig+0x470>)
 800220a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800220c:	f003 0302 	and.w	r3, r3, #2
 8002210:	2b00      	cmp	r3, #0
 8002212:	d1ea      	bne.n	80021ea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f003 0304 	and.w	r3, r3, #4
 800221c:	2b00      	cmp	r3, #0
 800221e:	f000 8097 	beq.w	8002350 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002222:	2300      	movs	r3, #0
 8002224:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002226:	4b81      	ldr	r3, [pc, #516]	; (800242c <HAL_RCC_OscConfig+0x470>)
 8002228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800222a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800222e:	2b00      	cmp	r3, #0
 8002230:	d10f      	bne.n	8002252 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002232:	2300      	movs	r3, #0
 8002234:	60bb      	str	r3, [r7, #8]
 8002236:	4b7d      	ldr	r3, [pc, #500]	; (800242c <HAL_RCC_OscConfig+0x470>)
 8002238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800223a:	4a7c      	ldr	r2, [pc, #496]	; (800242c <HAL_RCC_OscConfig+0x470>)
 800223c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002240:	6413      	str	r3, [r2, #64]	; 0x40
 8002242:	4b7a      	ldr	r3, [pc, #488]	; (800242c <HAL_RCC_OscConfig+0x470>)
 8002244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002246:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800224a:	60bb      	str	r3, [r7, #8]
 800224c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800224e:	2301      	movs	r3, #1
 8002250:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002252:	4b77      	ldr	r3, [pc, #476]	; (8002430 <HAL_RCC_OscConfig+0x474>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800225a:	2b00      	cmp	r3, #0
 800225c:	d118      	bne.n	8002290 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800225e:	4b74      	ldr	r3, [pc, #464]	; (8002430 <HAL_RCC_OscConfig+0x474>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a73      	ldr	r2, [pc, #460]	; (8002430 <HAL_RCC_OscConfig+0x474>)
 8002264:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002268:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800226a:	f7ff f839 	bl	80012e0 <HAL_GetTick>
 800226e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002270:	e008      	b.n	8002284 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002272:	f7ff f835 	bl	80012e0 <HAL_GetTick>
 8002276:	4602      	mov	r2, r0
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	1ad3      	subs	r3, r2, r3
 800227c:	2b02      	cmp	r3, #2
 800227e:	d901      	bls.n	8002284 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002280:	2303      	movs	r3, #3
 8002282:	e10c      	b.n	800249e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002284:	4b6a      	ldr	r3, [pc, #424]	; (8002430 <HAL_RCC_OscConfig+0x474>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800228c:	2b00      	cmp	r3, #0
 800228e:	d0f0      	beq.n	8002272 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	689b      	ldr	r3, [r3, #8]
 8002294:	2b01      	cmp	r3, #1
 8002296:	d106      	bne.n	80022a6 <HAL_RCC_OscConfig+0x2ea>
 8002298:	4b64      	ldr	r3, [pc, #400]	; (800242c <HAL_RCC_OscConfig+0x470>)
 800229a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800229c:	4a63      	ldr	r2, [pc, #396]	; (800242c <HAL_RCC_OscConfig+0x470>)
 800229e:	f043 0301 	orr.w	r3, r3, #1
 80022a2:	6713      	str	r3, [r2, #112]	; 0x70
 80022a4:	e01c      	b.n	80022e0 <HAL_RCC_OscConfig+0x324>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	689b      	ldr	r3, [r3, #8]
 80022aa:	2b05      	cmp	r3, #5
 80022ac:	d10c      	bne.n	80022c8 <HAL_RCC_OscConfig+0x30c>
 80022ae:	4b5f      	ldr	r3, [pc, #380]	; (800242c <HAL_RCC_OscConfig+0x470>)
 80022b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022b2:	4a5e      	ldr	r2, [pc, #376]	; (800242c <HAL_RCC_OscConfig+0x470>)
 80022b4:	f043 0304 	orr.w	r3, r3, #4
 80022b8:	6713      	str	r3, [r2, #112]	; 0x70
 80022ba:	4b5c      	ldr	r3, [pc, #368]	; (800242c <HAL_RCC_OscConfig+0x470>)
 80022bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022be:	4a5b      	ldr	r2, [pc, #364]	; (800242c <HAL_RCC_OscConfig+0x470>)
 80022c0:	f043 0301 	orr.w	r3, r3, #1
 80022c4:	6713      	str	r3, [r2, #112]	; 0x70
 80022c6:	e00b      	b.n	80022e0 <HAL_RCC_OscConfig+0x324>
 80022c8:	4b58      	ldr	r3, [pc, #352]	; (800242c <HAL_RCC_OscConfig+0x470>)
 80022ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022cc:	4a57      	ldr	r2, [pc, #348]	; (800242c <HAL_RCC_OscConfig+0x470>)
 80022ce:	f023 0301 	bic.w	r3, r3, #1
 80022d2:	6713      	str	r3, [r2, #112]	; 0x70
 80022d4:	4b55      	ldr	r3, [pc, #340]	; (800242c <HAL_RCC_OscConfig+0x470>)
 80022d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022d8:	4a54      	ldr	r2, [pc, #336]	; (800242c <HAL_RCC_OscConfig+0x470>)
 80022da:	f023 0304 	bic.w	r3, r3, #4
 80022de:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	689b      	ldr	r3, [r3, #8]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d015      	beq.n	8002314 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022e8:	f7fe fffa 	bl	80012e0 <HAL_GetTick>
 80022ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022ee:	e00a      	b.n	8002306 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022f0:	f7fe fff6 	bl	80012e0 <HAL_GetTick>
 80022f4:	4602      	mov	r2, r0
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	1ad3      	subs	r3, r2, r3
 80022fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80022fe:	4293      	cmp	r3, r2
 8002300:	d901      	bls.n	8002306 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002302:	2303      	movs	r3, #3
 8002304:	e0cb      	b.n	800249e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002306:	4b49      	ldr	r3, [pc, #292]	; (800242c <HAL_RCC_OscConfig+0x470>)
 8002308:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800230a:	f003 0302 	and.w	r3, r3, #2
 800230e:	2b00      	cmp	r3, #0
 8002310:	d0ee      	beq.n	80022f0 <HAL_RCC_OscConfig+0x334>
 8002312:	e014      	b.n	800233e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002314:	f7fe ffe4 	bl	80012e0 <HAL_GetTick>
 8002318:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800231a:	e00a      	b.n	8002332 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800231c:	f7fe ffe0 	bl	80012e0 <HAL_GetTick>
 8002320:	4602      	mov	r2, r0
 8002322:	693b      	ldr	r3, [r7, #16]
 8002324:	1ad3      	subs	r3, r2, r3
 8002326:	f241 3288 	movw	r2, #5000	; 0x1388
 800232a:	4293      	cmp	r3, r2
 800232c:	d901      	bls.n	8002332 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800232e:	2303      	movs	r3, #3
 8002330:	e0b5      	b.n	800249e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002332:	4b3e      	ldr	r3, [pc, #248]	; (800242c <HAL_RCC_OscConfig+0x470>)
 8002334:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002336:	f003 0302 	and.w	r3, r3, #2
 800233a:	2b00      	cmp	r3, #0
 800233c:	d1ee      	bne.n	800231c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800233e:	7dfb      	ldrb	r3, [r7, #23]
 8002340:	2b01      	cmp	r3, #1
 8002342:	d105      	bne.n	8002350 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002344:	4b39      	ldr	r3, [pc, #228]	; (800242c <HAL_RCC_OscConfig+0x470>)
 8002346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002348:	4a38      	ldr	r2, [pc, #224]	; (800242c <HAL_RCC_OscConfig+0x470>)
 800234a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800234e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	699b      	ldr	r3, [r3, #24]
 8002354:	2b00      	cmp	r3, #0
 8002356:	f000 80a1 	beq.w	800249c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800235a:	4b34      	ldr	r3, [pc, #208]	; (800242c <HAL_RCC_OscConfig+0x470>)
 800235c:	689b      	ldr	r3, [r3, #8]
 800235e:	f003 030c 	and.w	r3, r3, #12
 8002362:	2b08      	cmp	r3, #8
 8002364:	d05c      	beq.n	8002420 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	699b      	ldr	r3, [r3, #24]
 800236a:	2b02      	cmp	r3, #2
 800236c:	d141      	bne.n	80023f2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800236e:	4b31      	ldr	r3, [pc, #196]	; (8002434 <HAL_RCC_OscConfig+0x478>)
 8002370:	2200      	movs	r2, #0
 8002372:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002374:	f7fe ffb4 	bl	80012e0 <HAL_GetTick>
 8002378:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800237a:	e008      	b.n	800238e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800237c:	f7fe ffb0 	bl	80012e0 <HAL_GetTick>
 8002380:	4602      	mov	r2, r0
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	1ad3      	subs	r3, r2, r3
 8002386:	2b02      	cmp	r3, #2
 8002388:	d901      	bls.n	800238e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800238a:	2303      	movs	r3, #3
 800238c:	e087      	b.n	800249e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800238e:	4b27      	ldr	r3, [pc, #156]	; (800242c <HAL_RCC_OscConfig+0x470>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002396:	2b00      	cmp	r3, #0
 8002398:	d1f0      	bne.n	800237c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	69da      	ldr	r2, [r3, #28]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6a1b      	ldr	r3, [r3, #32]
 80023a2:	431a      	orrs	r2, r3
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023a8:	019b      	lsls	r3, r3, #6
 80023aa:	431a      	orrs	r2, r3
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023b0:	085b      	lsrs	r3, r3, #1
 80023b2:	3b01      	subs	r3, #1
 80023b4:	041b      	lsls	r3, r3, #16
 80023b6:	431a      	orrs	r2, r3
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023bc:	061b      	lsls	r3, r3, #24
 80023be:	491b      	ldr	r1, [pc, #108]	; (800242c <HAL_RCC_OscConfig+0x470>)
 80023c0:	4313      	orrs	r3, r2
 80023c2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023c4:	4b1b      	ldr	r3, [pc, #108]	; (8002434 <HAL_RCC_OscConfig+0x478>)
 80023c6:	2201      	movs	r2, #1
 80023c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023ca:	f7fe ff89 	bl	80012e0 <HAL_GetTick>
 80023ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023d0:	e008      	b.n	80023e4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023d2:	f7fe ff85 	bl	80012e0 <HAL_GetTick>
 80023d6:	4602      	mov	r2, r0
 80023d8:	693b      	ldr	r3, [r7, #16]
 80023da:	1ad3      	subs	r3, r2, r3
 80023dc:	2b02      	cmp	r3, #2
 80023de:	d901      	bls.n	80023e4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80023e0:	2303      	movs	r3, #3
 80023e2:	e05c      	b.n	800249e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023e4:	4b11      	ldr	r3, [pc, #68]	; (800242c <HAL_RCC_OscConfig+0x470>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d0f0      	beq.n	80023d2 <HAL_RCC_OscConfig+0x416>
 80023f0:	e054      	b.n	800249c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023f2:	4b10      	ldr	r3, [pc, #64]	; (8002434 <HAL_RCC_OscConfig+0x478>)
 80023f4:	2200      	movs	r2, #0
 80023f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023f8:	f7fe ff72 	bl	80012e0 <HAL_GetTick>
 80023fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023fe:	e008      	b.n	8002412 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002400:	f7fe ff6e 	bl	80012e0 <HAL_GetTick>
 8002404:	4602      	mov	r2, r0
 8002406:	693b      	ldr	r3, [r7, #16]
 8002408:	1ad3      	subs	r3, r2, r3
 800240a:	2b02      	cmp	r3, #2
 800240c:	d901      	bls.n	8002412 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800240e:	2303      	movs	r3, #3
 8002410:	e045      	b.n	800249e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002412:	4b06      	ldr	r3, [pc, #24]	; (800242c <HAL_RCC_OscConfig+0x470>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800241a:	2b00      	cmp	r3, #0
 800241c:	d1f0      	bne.n	8002400 <HAL_RCC_OscConfig+0x444>
 800241e:	e03d      	b.n	800249c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	699b      	ldr	r3, [r3, #24]
 8002424:	2b01      	cmp	r3, #1
 8002426:	d107      	bne.n	8002438 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002428:	2301      	movs	r3, #1
 800242a:	e038      	b.n	800249e <HAL_RCC_OscConfig+0x4e2>
 800242c:	40023800 	.word	0x40023800
 8002430:	40007000 	.word	0x40007000
 8002434:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002438:	4b1b      	ldr	r3, [pc, #108]	; (80024a8 <HAL_RCC_OscConfig+0x4ec>)
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	699b      	ldr	r3, [r3, #24]
 8002442:	2b01      	cmp	r3, #1
 8002444:	d028      	beq.n	8002498 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002450:	429a      	cmp	r2, r3
 8002452:	d121      	bne.n	8002498 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800245e:	429a      	cmp	r2, r3
 8002460:	d11a      	bne.n	8002498 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002462:	68fa      	ldr	r2, [r7, #12]
 8002464:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002468:	4013      	ands	r3, r2
 800246a:	687a      	ldr	r2, [r7, #4]
 800246c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800246e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002470:	4293      	cmp	r3, r2
 8002472:	d111      	bne.n	8002498 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800247e:	085b      	lsrs	r3, r3, #1
 8002480:	3b01      	subs	r3, #1
 8002482:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002484:	429a      	cmp	r2, r3
 8002486:	d107      	bne.n	8002498 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002492:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002494:	429a      	cmp	r2, r3
 8002496:	d001      	beq.n	800249c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002498:	2301      	movs	r3, #1
 800249a:	e000      	b.n	800249e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800249c:	2300      	movs	r3, #0
}
 800249e:	4618      	mov	r0, r3
 80024a0:	3718      	adds	r7, #24
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	bf00      	nop
 80024a8:	40023800 	.word	0x40023800

080024ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b084      	sub	sp, #16
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
 80024b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d101      	bne.n	80024c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024bc:	2301      	movs	r3, #1
 80024be:	e0cc      	b.n	800265a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80024c0:	4b68      	ldr	r3, [pc, #416]	; (8002664 <HAL_RCC_ClockConfig+0x1b8>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f003 0307 	and.w	r3, r3, #7
 80024c8:	683a      	ldr	r2, [r7, #0]
 80024ca:	429a      	cmp	r2, r3
 80024cc:	d90c      	bls.n	80024e8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024ce:	4b65      	ldr	r3, [pc, #404]	; (8002664 <HAL_RCC_ClockConfig+0x1b8>)
 80024d0:	683a      	ldr	r2, [r7, #0]
 80024d2:	b2d2      	uxtb	r2, r2
 80024d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024d6:	4b63      	ldr	r3, [pc, #396]	; (8002664 <HAL_RCC_ClockConfig+0x1b8>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f003 0307 	and.w	r3, r3, #7
 80024de:	683a      	ldr	r2, [r7, #0]
 80024e0:	429a      	cmp	r2, r3
 80024e2:	d001      	beq.n	80024e8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80024e4:	2301      	movs	r3, #1
 80024e6:	e0b8      	b.n	800265a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f003 0302 	and.w	r3, r3, #2
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d020      	beq.n	8002536 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f003 0304 	and.w	r3, r3, #4
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d005      	beq.n	800250c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002500:	4b59      	ldr	r3, [pc, #356]	; (8002668 <HAL_RCC_ClockConfig+0x1bc>)
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	4a58      	ldr	r2, [pc, #352]	; (8002668 <HAL_RCC_ClockConfig+0x1bc>)
 8002506:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800250a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f003 0308 	and.w	r3, r3, #8
 8002514:	2b00      	cmp	r3, #0
 8002516:	d005      	beq.n	8002524 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002518:	4b53      	ldr	r3, [pc, #332]	; (8002668 <HAL_RCC_ClockConfig+0x1bc>)
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	4a52      	ldr	r2, [pc, #328]	; (8002668 <HAL_RCC_ClockConfig+0x1bc>)
 800251e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002522:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002524:	4b50      	ldr	r3, [pc, #320]	; (8002668 <HAL_RCC_ClockConfig+0x1bc>)
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	494d      	ldr	r1, [pc, #308]	; (8002668 <HAL_RCC_ClockConfig+0x1bc>)
 8002532:	4313      	orrs	r3, r2
 8002534:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f003 0301 	and.w	r3, r3, #1
 800253e:	2b00      	cmp	r3, #0
 8002540:	d044      	beq.n	80025cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	2b01      	cmp	r3, #1
 8002548:	d107      	bne.n	800255a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800254a:	4b47      	ldr	r3, [pc, #284]	; (8002668 <HAL_RCC_ClockConfig+0x1bc>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002552:	2b00      	cmp	r3, #0
 8002554:	d119      	bne.n	800258a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002556:	2301      	movs	r3, #1
 8002558:	e07f      	b.n	800265a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	2b02      	cmp	r3, #2
 8002560:	d003      	beq.n	800256a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002566:	2b03      	cmp	r3, #3
 8002568:	d107      	bne.n	800257a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800256a:	4b3f      	ldr	r3, [pc, #252]	; (8002668 <HAL_RCC_ClockConfig+0x1bc>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002572:	2b00      	cmp	r3, #0
 8002574:	d109      	bne.n	800258a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002576:	2301      	movs	r3, #1
 8002578:	e06f      	b.n	800265a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800257a:	4b3b      	ldr	r3, [pc, #236]	; (8002668 <HAL_RCC_ClockConfig+0x1bc>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f003 0302 	and.w	r3, r3, #2
 8002582:	2b00      	cmp	r3, #0
 8002584:	d101      	bne.n	800258a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002586:	2301      	movs	r3, #1
 8002588:	e067      	b.n	800265a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800258a:	4b37      	ldr	r3, [pc, #220]	; (8002668 <HAL_RCC_ClockConfig+0x1bc>)
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	f023 0203 	bic.w	r2, r3, #3
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	4934      	ldr	r1, [pc, #208]	; (8002668 <HAL_RCC_ClockConfig+0x1bc>)
 8002598:	4313      	orrs	r3, r2
 800259a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800259c:	f7fe fea0 	bl	80012e0 <HAL_GetTick>
 80025a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025a2:	e00a      	b.n	80025ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025a4:	f7fe fe9c 	bl	80012e0 <HAL_GetTick>
 80025a8:	4602      	mov	r2, r0
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	1ad3      	subs	r3, r2, r3
 80025ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d901      	bls.n	80025ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80025b6:	2303      	movs	r3, #3
 80025b8:	e04f      	b.n	800265a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025ba:	4b2b      	ldr	r3, [pc, #172]	; (8002668 <HAL_RCC_ClockConfig+0x1bc>)
 80025bc:	689b      	ldr	r3, [r3, #8]
 80025be:	f003 020c 	and.w	r2, r3, #12
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	009b      	lsls	r3, r3, #2
 80025c8:	429a      	cmp	r2, r3
 80025ca:	d1eb      	bne.n	80025a4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80025cc:	4b25      	ldr	r3, [pc, #148]	; (8002664 <HAL_RCC_ClockConfig+0x1b8>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f003 0307 	and.w	r3, r3, #7
 80025d4:	683a      	ldr	r2, [r7, #0]
 80025d6:	429a      	cmp	r2, r3
 80025d8:	d20c      	bcs.n	80025f4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025da:	4b22      	ldr	r3, [pc, #136]	; (8002664 <HAL_RCC_ClockConfig+0x1b8>)
 80025dc:	683a      	ldr	r2, [r7, #0]
 80025de:	b2d2      	uxtb	r2, r2
 80025e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025e2:	4b20      	ldr	r3, [pc, #128]	; (8002664 <HAL_RCC_ClockConfig+0x1b8>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f003 0307 	and.w	r3, r3, #7
 80025ea:	683a      	ldr	r2, [r7, #0]
 80025ec:	429a      	cmp	r2, r3
 80025ee:	d001      	beq.n	80025f4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80025f0:	2301      	movs	r3, #1
 80025f2:	e032      	b.n	800265a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f003 0304 	and.w	r3, r3, #4
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d008      	beq.n	8002612 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002600:	4b19      	ldr	r3, [pc, #100]	; (8002668 <HAL_RCC_ClockConfig+0x1bc>)
 8002602:	689b      	ldr	r3, [r3, #8]
 8002604:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	68db      	ldr	r3, [r3, #12]
 800260c:	4916      	ldr	r1, [pc, #88]	; (8002668 <HAL_RCC_ClockConfig+0x1bc>)
 800260e:	4313      	orrs	r3, r2
 8002610:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f003 0308 	and.w	r3, r3, #8
 800261a:	2b00      	cmp	r3, #0
 800261c:	d009      	beq.n	8002632 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800261e:	4b12      	ldr	r3, [pc, #72]	; (8002668 <HAL_RCC_ClockConfig+0x1bc>)
 8002620:	689b      	ldr	r3, [r3, #8]
 8002622:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	691b      	ldr	r3, [r3, #16]
 800262a:	00db      	lsls	r3, r3, #3
 800262c:	490e      	ldr	r1, [pc, #56]	; (8002668 <HAL_RCC_ClockConfig+0x1bc>)
 800262e:	4313      	orrs	r3, r2
 8002630:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002632:	f000 f821 	bl	8002678 <HAL_RCC_GetSysClockFreq>
 8002636:	4602      	mov	r2, r0
 8002638:	4b0b      	ldr	r3, [pc, #44]	; (8002668 <HAL_RCC_ClockConfig+0x1bc>)
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	091b      	lsrs	r3, r3, #4
 800263e:	f003 030f 	and.w	r3, r3, #15
 8002642:	490a      	ldr	r1, [pc, #40]	; (800266c <HAL_RCC_ClockConfig+0x1c0>)
 8002644:	5ccb      	ldrb	r3, [r1, r3]
 8002646:	fa22 f303 	lsr.w	r3, r2, r3
 800264a:	4a09      	ldr	r2, [pc, #36]	; (8002670 <HAL_RCC_ClockConfig+0x1c4>)
 800264c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800264e:	4b09      	ldr	r3, [pc, #36]	; (8002674 <HAL_RCC_ClockConfig+0x1c8>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4618      	mov	r0, r3
 8002654:	f7fe fe00 	bl	8001258 <HAL_InitTick>

  return HAL_OK;
 8002658:	2300      	movs	r3, #0
}
 800265a:	4618      	mov	r0, r3
 800265c:	3710      	adds	r7, #16
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}
 8002662:	bf00      	nop
 8002664:	40023c00 	.word	0x40023c00
 8002668:	40023800 	.word	0x40023800
 800266c:	0800527c 	.word	0x0800527c
 8002670:	2000003c 	.word	0x2000003c
 8002674:	20000040 	.word	0x20000040

08002678 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002678:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800267c:	b094      	sub	sp, #80	; 0x50
 800267e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002680:	2300      	movs	r3, #0
 8002682:	647b      	str	r3, [r7, #68]	; 0x44
 8002684:	2300      	movs	r3, #0
 8002686:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002688:	2300      	movs	r3, #0
 800268a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800268c:	2300      	movs	r3, #0
 800268e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002690:	4b79      	ldr	r3, [pc, #484]	; (8002878 <HAL_RCC_GetSysClockFreq+0x200>)
 8002692:	689b      	ldr	r3, [r3, #8]
 8002694:	f003 030c 	and.w	r3, r3, #12
 8002698:	2b08      	cmp	r3, #8
 800269a:	d00d      	beq.n	80026b8 <HAL_RCC_GetSysClockFreq+0x40>
 800269c:	2b08      	cmp	r3, #8
 800269e:	f200 80e1 	bhi.w	8002864 <HAL_RCC_GetSysClockFreq+0x1ec>
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d002      	beq.n	80026ac <HAL_RCC_GetSysClockFreq+0x34>
 80026a6:	2b04      	cmp	r3, #4
 80026a8:	d003      	beq.n	80026b2 <HAL_RCC_GetSysClockFreq+0x3a>
 80026aa:	e0db      	b.n	8002864 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80026ac:	4b73      	ldr	r3, [pc, #460]	; (800287c <HAL_RCC_GetSysClockFreq+0x204>)
 80026ae:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80026b0:	e0db      	b.n	800286a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80026b2:	4b73      	ldr	r3, [pc, #460]	; (8002880 <HAL_RCC_GetSysClockFreq+0x208>)
 80026b4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80026b6:	e0d8      	b.n	800286a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80026b8:	4b6f      	ldr	r3, [pc, #444]	; (8002878 <HAL_RCC_GetSysClockFreq+0x200>)
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80026c0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80026c2:	4b6d      	ldr	r3, [pc, #436]	; (8002878 <HAL_RCC_GetSysClockFreq+0x200>)
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d063      	beq.n	8002796 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026ce:	4b6a      	ldr	r3, [pc, #424]	; (8002878 <HAL_RCC_GetSysClockFreq+0x200>)
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	099b      	lsrs	r3, r3, #6
 80026d4:	2200      	movs	r2, #0
 80026d6:	63bb      	str	r3, [r7, #56]	; 0x38
 80026d8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80026da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026e0:	633b      	str	r3, [r7, #48]	; 0x30
 80026e2:	2300      	movs	r3, #0
 80026e4:	637b      	str	r3, [r7, #52]	; 0x34
 80026e6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80026ea:	4622      	mov	r2, r4
 80026ec:	462b      	mov	r3, r5
 80026ee:	f04f 0000 	mov.w	r0, #0
 80026f2:	f04f 0100 	mov.w	r1, #0
 80026f6:	0159      	lsls	r1, r3, #5
 80026f8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80026fc:	0150      	lsls	r0, r2, #5
 80026fe:	4602      	mov	r2, r0
 8002700:	460b      	mov	r3, r1
 8002702:	4621      	mov	r1, r4
 8002704:	1a51      	subs	r1, r2, r1
 8002706:	6139      	str	r1, [r7, #16]
 8002708:	4629      	mov	r1, r5
 800270a:	eb63 0301 	sbc.w	r3, r3, r1
 800270e:	617b      	str	r3, [r7, #20]
 8002710:	f04f 0200 	mov.w	r2, #0
 8002714:	f04f 0300 	mov.w	r3, #0
 8002718:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800271c:	4659      	mov	r1, fp
 800271e:	018b      	lsls	r3, r1, #6
 8002720:	4651      	mov	r1, sl
 8002722:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002726:	4651      	mov	r1, sl
 8002728:	018a      	lsls	r2, r1, #6
 800272a:	4651      	mov	r1, sl
 800272c:	ebb2 0801 	subs.w	r8, r2, r1
 8002730:	4659      	mov	r1, fp
 8002732:	eb63 0901 	sbc.w	r9, r3, r1
 8002736:	f04f 0200 	mov.w	r2, #0
 800273a:	f04f 0300 	mov.w	r3, #0
 800273e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002742:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002746:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800274a:	4690      	mov	r8, r2
 800274c:	4699      	mov	r9, r3
 800274e:	4623      	mov	r3, r4
 8002750:	eb18 0303 	adds.w	r3, r8, r3
 8002754:	60bb      	str	r3, [r7, #8]
 8002756:	462b      	mov	r3, r5
 8002758:	eb49 0303 	adc.w	r3, r9, r3
 800275c:	60fb      	str	r3, [r7, #12]
 800275e:	f04f 0200 	mov.w	r2, #0
 8002762:	f04f 0300 	mov.w	r3, #0
 8002766:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800276a:	4629      	mov	r1, r5
 800276c:	024b      	lsls	r3, r1, #9
 800276e:	4621      	mov	r1, r4
 8002770:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002774:	4621      	mov	r1, r4
 8002776:	024a      	lsls	r2, r1, #9
 8002778:	4610      	mov	r0, r2
 800277a:	4619      	mov	r1, r3
 800277c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800277e:	2200      	movs	r2, #0
 8002780:	62bb      	str	r3, [r7, #40]	; 0x28
 8002782:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002784:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002788:	f7fd fd92 	bl	80002b0 <__aeabi_uldivmod>
 800278c:	4602      	mov	r2, r0
 800278e:	460b      	mov	r3, r1
 8002790:	4613      	mov	r3, r2
 8002792:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002794:	e058      	b.n	8002848 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002796:	4b38      	ldr	r3, [pc, #224]	; (8002878 <HAL_RCC_GetSysClockFreq+0x200>)
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	099b      	lsrs	r3, r3, #6
 800279c:	2200      	movs	r2, #0
 800279e:	4618      	mov	r0, r3
 80027a0:	4611      	mov	r1, r2
 80027a2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80027a6:	623b      	str	r3, [r7, #32]
 80027a8:	2300      	movs	r3, #0
 80027aa:	627b      	str	r3, [r7, #36]	; 0x24
 80027ac:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80027b0:	4642      	mov	r2, r8
 80027b2:	464b      	mov	r3, r9
 80027b4:	f04f 0000 	mov.w	r0, #0
 80027b8:	f04f 0100 	mov.w	r1, #0
 80027bc:	0159      	lsls	r1, r3, #5
 80027be:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80027c2:	0150      	lsls	r0, r2, #5
 80027c4:	4602      	mov	r2, r0
 80027c6:	460b      	mov	r3, r1
 80027c8:	4641      	mov	r1, r8
 80027ca:	ebb2 0a01 	subs.w	sl, r2, r1
 80027ce:	4649      	mov	r1, r9
 80027d0:	eb63 0b01 	sbc.w	fp, r3, r1
 80027d4:	f04f 0200 	mov.w	r2, #0
 80027d8:	f04f 0300 	mov.w	r3, #0
 80027dc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80027e0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80027e4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80027e8:	ebb2 040a 	subs.w	r4, r2, sl
 80027ec:	eb63 050b 	sbc.w	r5, r3, fp
 80027f0:	f04f 0200 	mov.w	r2, #0
 80027f4:	f04f 0300 	mov.w	r3, #0
 80027f8:	00eb      	lsls	r3, r5, #3
 80027fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80027fe:	00e2      	lsls	r2, r4, #3
 8002800:	4614      	mov	r4, r2
 8002802:	461d      	mov	r5, r3
 8002804:	4643      	mov	r3, r8
 8002806:	18e3      	adds	r3, r4, r3
 8002808:	603b      	str	r3, [r7, #0]
 800280a:	464b      	mov	r3, r9
 800280c:	eb45 0303 	adc.w	r3, r5, r3
 8002810:	607b      	str	r3, [r7, #4]
 8002812:	f04f 0200 	mov.w	r2, #0
 8002816:	f04f 0300 	mov.w	r3, #0
 800281a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800281e:	4629      	mov	r1, r5
 8002820:	028b      	lsls	r3, r1, #10
 8002822:	4621      	mov	r1, r4
 8002824:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002828:	4621      	mov	r1, r4
 800282a:	028a      	lsls	r2, r1, #10
 800282c:	4610      	mov	r0, r2
 800282e:	4619      	mov	r1, r3
 8002830:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002832:	2200      	movs	r2, #0
 8002834:	61bb      	str	r3, [r7, #24]
 8002836:	61fa      	str	r2, [r7, #28]
 8002838:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800283c:	f7fd fd38 	bl	80002b0 <__aeabi_uldivmod>
 8002840:	4602      	mov	r2, r0
 8002842:	460b      	mov	r3, r1
 8002844:	4613      	mov	r3, r2
 8002846:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002848:	4b0b      	ldr	r3, [pc, #44]	; (8002878 <HAL_RCC_GetSysClockFreq+0x200>)
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	0c1b      	lsrs	r3, r3, #16
 800284e:	f003 0303 	and.w	r3, r3, #3
 8002852:	3301      	adds	r3, #1
 8002854:	005b      	lsls	r3, r3, #1
 8002856:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002858:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800285a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800285c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002860:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002862:	e002      	b.n	800286a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002864:	4b05      	ldr	r3, [pc, #20]	; (800287c <HAL_RCC_GetSysClockFreq+0x204>)
 8002866:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002868:	bf00      	nop
    }
  }
  return sysclockfreq;
 800286a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800286c:	4618      	mov	r0, r3
 800286e:	3750      	adds	r7, #80	; 0x50
 8002870:	46bd      	mov	sp, r7
 8002872:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002876:	bf00      	nop
 8002878:	40023800 	.word	0x40023800
 800287c:	00f42400 	.word	0x00f42400
 8002880:	007a1200 	.word	0x007a1200

08002884 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002884:	b480      	push	{r7}
 8002886:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002888:	4b03      	ldr	r3, [pc, #12]	; (8002898 <HAL_RCC_GetHCLKFreq+0x14>)
 800288a:	681b      	ldr	r3, [r3, #0]
}
 800288c:	4618      	mov	r0, r3
 800288e:	46bd      	mov	sp, r7
 8002890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002894:	4770      	bx	lr
 8002896:	bf00      	nop
 8002898:	2000003c 	.word	0x2000003c

0800289c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80028a0:	f7ff fff0 	bl	8002884 <HAL_RCC_GetHCLKFreq>
 80028a4:	4602      	mov	r2, r0
 80028a6:	4b05      	ldr	r3, [pc, #20]	; (80028bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80028a8:	689b      	ldr	r3, [r3, #8]
 80028aa:	0a9b      	lsrs	r3, r3, #10
 80028ac:	f003 0307 	and.w	r3, r3, #7
 80028b0:	4903      	ldr	r1, [pc, #12]	; (80028c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80028b2:	5ccb      	ldrb	r3, [r1, r3]
 80028b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	bd80      	pop	{r7, pc}
 80028bc:	40023800 	.word	0x40023800
 80028c0:	0800528c 	.word	0x0800528c

080028c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80028c8:	f7ff ffdc 	bl	8002884 <HAL_RCC_GetHCLKFreq>
 80028cc:	4602      	mov	r2, r0
 80028ce:	4b05      	ldr	r3, [pc, #20]	; (80028e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80028d0:	689b      	ldr	r3, [r3, #8]
 80028d2:	0b5b      	lsrs	r3, r3, #13
 80028d4:	f003 0307 	and.w	r3, r3, #7
 80028d8:	4903      	ldr	r1, [pc, #12]	; (80028e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80028da:	5ccb      	ldrb	r3, [r1, r3]
 80028dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028e0:	4618      	mov	r0, r3
 80028e2:	bd80      	pop	{r7, pc}
 80028e4:	40023800 	.word	0x40023800
 80028e8:	0800528c 	.word	0x0800528c

080028ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b082      	sub	sp, #8
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d101      	bne.n	80028fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80028fa:	2301      	movs	r3, #1
 80028fc:	e041      	b.n	8002982 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002904:	b2db      	uxtb	r3, r3
 8002906:	2b00      	cmp	r3, #0
 8002908:	d106      	bne.n	8002918 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2200      	movs	r2, #0
 800290e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002912:	6878      	ldr	r0, [r7, #4]
 8002914:	f7fe fb5a 	bl	8000fcc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2202      	movs	r2, #2
 800291c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681a      	ldr	r2, [r3, #0]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	3304      	adds	r3, #4
 8002928:	4619      	mov	r1, r3
 800292a:	4610      	mov	r0, r2
 800292c:	f000 f890 	bl	8002a50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2201      	movs	r2, #1
 8002934:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2201      	movs	r2, #1
 800293c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2201      	movs	r2, #1
 8002944:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2201      	movs	r2, #1
 800294c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2201      	movs	r2, #1
 8002954:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2201      	movs	r2, #1
 800295c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2201      	movs	r2, #1
 8002964:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2201      	movs	r2, #1
 800296c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2201      	movs	r2, #1
 8002974:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2201      	movs	r2, #1
 800297c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002980:	2300      	movs	r3, #0
}
 8002982:	4618      	mov	r0, r3
 8002984:	3708      	adds	r7, #8
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}
	...

0800298c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800298c:	b480      	push	{r7}
 800298e:	b085      	sub	sp, #20
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800299a:	b2db      	uxtb	r3, r3
 800299c:	2b01      	cmp	r3, #1
 800299e:	d001      	beq.n	80029a4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80029a0:	2301      	movs	r3, #1
 80029a2:	e044      	b.n	8002a2e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2202      	movs	r2, #2
 80029a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	68da      	ldr	r2, [r3, #12]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f042 0201 	orr.w	r2, r2, #1
 80029ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a1e      	ldr	r2, [pc, #120]	; (8002a3c <HAL_TIM_Base_Start_IT+0xb0>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d018      	beq.n	80029f8 <HAL_TIM_Base_Start_IT+0x6c>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029ce:	d013      	beq.n	80029f8 <HAL_TIM_Base_Start_IT+0x6c>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a1a      	ldr	r2, [pc, #104]	; (8002a40 <HAL_TIM_Base_Start_IT+0xb4>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d00e      	beq.n	80029f8 <HAL_TIM_Base_Start_IT+0x6c>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a19      	ldr	r2, [pc, #100]	; (8002a44 <HAL_TIM_Base_Start_IT+0xb8>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d009      	beq.n	80029f8 <HAL_TIM_Base_Start_IT+0x6c>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a17      	ldr	r2, [pc, #92]	; (8002a48 <HAL_TIM_Base_Start_IT+0xbc>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d004      	beq.n	80029f8 <HAL_TIM_Base_Start_IT+0x6c>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4a16      	ldr	r2, [pc, #88]	; (8002a4c <HAL_TIM_Base_Start_IT+0xc0>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d111      	bne.n	8002a1c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	689b      	ldr	r3, [r3, #8]
 80029fe:	f003 0307 	and.w	r3, r3, #7
 8002a02:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	2b06      	cmp	r3, #6
 8002a08:	d010      	beq.n	8002a2c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	681a      	ldr	r2, [r3, #0]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f042 0201 	orr.w	r2, r2, #1
 8002a18:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a1a:	e007      	b.n	8002a2c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	681a      	ldr	r2, [r3, #0]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f042 0201 	orr.w	r2, r2, #1
 8002a2a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a2c:	2300      	movs	r3, #0
}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	3714      	adds	r7, #20
 8002a32:	46bd      	mov	sp, r7
 8002a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a38:	4770      	bx	lr
 8002a3a:	bf00      	nop
 8002a3c:	40010000 	.word	0x40010000
 8002a40:	40000400 	.word	0x40000400
 8002a44:	40000800 	.word	0x40000800
 8002a48:	40000c00 	.word	0x40000c00
 8002a4c:	40014000 	.word	0x40014000

08002a50 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b085      	sub	sp, #20
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
 8002a58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	4a34      	ldr	r2, [pc, #208]	; (8002b34 <TIM_Base_SetConfig+0xe4>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d00f      	beq.n	8002a88 <TIM_Base_SetConfig+0x38>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a6e:	d00b      	beq.n	8002a88 <TIM_Base_SetConfig+0x38>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	4a31      	ldr	r2, [pc, #196]	; (8002b38 <TIM_Base_SetConfig+0xe8>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d007      	beq.n	8002a88 <TIM_Base_SetConfig+0x38>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	4a30      	ldr	r2, [pc, #192]	; (8002b3c <TIM_Base_SetConfig+0xec>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d003      	beq.n	8002a88 <TIM_Base_SetConfig+0x38>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	4a2f      	ldr	r2, [pc, #188]	; (8002b40 <TIM_Base_SetConfig+0xf0>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d108      	bne.n	8002a9a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a8e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	68fa      	ldr	r2, [r7, #12]
 8002a96:	4313      	orrs	r3, r2
 8002a98:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	4a25      	ldr	r2, [pc, #148]	; (8002b34 <TIM_Base_SetConfig+0xe4>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d01b      	beq.n	8002ada <TIM_Base_SetConfig+0x8a>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002aa8:	d017      	beq.n	8002ada <TIM_Base_SetConfig+0x8a>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	4a22      	ldr	r2, [pc, #136]	; (8002b38 <TIM_Base_SetConfig+0xe8>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d013      	beq.n	8002ada <TIM_Base_SetConfig+0x8a>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	4a21      	ldr	r2, [pc, #132]	; (8002b3c <TIM_Base_SetConfig+0xec>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d00f      	beq.n	8002ada <TIM_Base_SetConfig+0x8a>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	4a20      	ldr	r2, [pc, #128]	; (8002b40 <TIM_Base_SetConfig+0xf0>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d00b      	beq.n	8002ada <TIM_Base_SetConfig+0x8a>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	4a1f      	ldr	r2, [pc, #124]	; (8002b44 <TIM_Base_SetConfig+0xf4>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d007      	beq.n	8002ada <TIM_Base_SetConfig+0x8a>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	4a1e      	ldr	r2, [pc, #120]	; (8002b48 <TIM_Base_SetConfig+0xf8>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d003      	beq.n	8002ada <TIM_Base_SetConfig+0x8a>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	4a1d      	ldr	r2, [pc, #116]	; (8002b4c <TIM_Base_SetConfig+0xfc>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d108      	bne.n	8002aec <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ae0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	68db      	ldr	r3, [r3, #12]
 8002ae6:	68fa      	ldr	r2, [r7, #12]
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	695b      	ldr	r3, [r3, #20]
 8002af6:	4313      	orrs	r3, r2
 8002af8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	68fa      	ldr	r2, [r7, #12]
 8002afe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	689a      	ldr	r2, [r3, #8]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	681a      	ldr	r2, [r3, #0]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	4a08      	ldr	r2, [pc, #32]	; (8002b34 <TIM_Base_SetConfig+0xe4>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d103      	bne.n	8002b20 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	691a      	ldr	r2, [r3, #16]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2201      	movs	r2, #1
 8002b24:	615a      	str	r2, [r3, #20]
}
 8002b26:	bf00      	nop
 8002b28:	3714      	adds	r7, #20
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b30:	4770      	bx	lr
 8002b32:	bf00      	nop
 8002b34:	40010000 	.word	0x40010000
 8002b38:	40000400 	.word	0x40000400
 8002b3c:	40000800 	.word	0x40000800
 8002b40:	40000c00 	.word	0x40000c00
 8002b44:	40014000 	.word	0x40014000
 8002b48:	40014400 	.word	0x40014400
 8002b4c:	40014800 	.word	0x40014800

08002b50 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b082      	sub	sp, #8
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d101      	bne.n	8002b62 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e03f      	b.n	8002be2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b68:	b2db      	uxtb	r3, r3
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d106      	bne.n	8002b7c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2200      	movs	r2, #0
 8002b72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b76:	6878      	ldr	r0, [r7, #4]
 8002b78:	f7fe fa9e 	bl	80010b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2224      	movs	r2, #36	; 0x24
 8002b80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	68da      	ldr	r2, [r3, #12]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002b92:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002b94:	6878      	ldr	r0, [r7, #4]
 8002b96:	f000 fe23 	bl	80037e0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	691a      	ldr	r2, [r3, #16]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002ba8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	695a      	ldr	r2, [r3, #20]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002bb8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	68da      	ldr	r2, [r3, #12]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002bc8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2200      	movs	r2, #0
 8002bce:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2220      	movs	r2, #32
 8002bd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2220      	movs	r2, #32
 8002bdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002be0:	2300      	movs	r3, #0
}
 8002be2:	4618      	mov	r0, r3
 8002be4:	3708      	adds	r7, #8
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}

08002bea <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bea:	b580      	push	{r7, lr}
 8002bec:	b08a      	sub	sp, #40	; 0x28
 8002bee:	af02      	add	r7, sp, #8
 8002bf0:	60f8      	str	r0, [r7, #12]
 8002bf2:	60b9      	str	r1, [r7, #8]
 8002bf4:	603b      	str	r3, [r7, #0]
 8002bf6:	4613      	mov	r3, r2
 8002bf8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c04:	b2db      	uxtb	r3, r3
 8002c06:	2b20      	cmp	r3, #32
 8002c08:	d17c      	bne.n	8002d04 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d002      	beq.n	8002c16 <HAL_UART_Transmit+0x2c>
 8002c10:	88fb      	ldrh	r3, [r7, #6]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d101      	bne.n	8002c1a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002c16:	2301      	movs	r3, #1
 8002c18:	e075      	b.n	8002d06 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c20:	2b01      	cmp	r3, #1
 8002c22:	d101      	bne.n	8002c28 <HAL_UART_Transmit+0x3e>
 8002c24:	2302      	movs	r3, #2
 8002c26:	e06e      	b.n	8002d06 <HAL_UART_Transmit+0x11c>
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	2201      	movs	r2, #1
 8002c2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	2200      	movs	r2, #0
 8002c34:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	2221      	movs	r2, #33	; 0x21
 8002c3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002c3e:	f7fe fb4f 	bl	80012e0 <HAL_GetTick>
 8002c42:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	88fa      	ldrh	r2, [r7, #6]
 8002c48:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	88fa      	ldrh	r2, [r7, #6]
 8002c4e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	689b      	ldr	r3, [r3, #8]
 8002c54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c58:	d108      	bne.n	8002c6c <HAL_UART_Transmit+0x82>
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	691b      	ldr	r3, [r3, #16]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d104      	bne.n	8002c6c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002c62:	2300      	movs	r3, #0
 8002c64:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002c66:	68bb      	ldr	r3, [r7, #8]
 8002c68:	61bb      	str	r3, [r7, #24]
 8002c6a:	e003      	b.n	8002c74 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002c6c:	68bb      	ldr	r3, [r7, #8]
 8002c6e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002c70:	2300      	movs	r3, #0
 8002c72:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	2200      	movs	r2, #0
 8002c78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002c7c:	e02a      	b.n	8002cd4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	9300      	str	r3, [sp, #0]
 8002c82:	697b      	ldr	r3, [r7, #20]
 8002c84:	2200      	movs	r2, #0
 8002c86:	2180      	movs	r1, #128	; 0x80
 8002c88:	68f8      	ldr	r0, [r7, #12]
 8002c8a:	f000 fb63 	bl	8003354 <UART_WaitOnFlagUntilTimeout>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d001      	beq.n	8002c98 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002c94:	2303      	movs	r3, #3
 8002c96:	e036      	b.n	8002d06 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002c98:	69fb      	ldr	r3, [r7, #28]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d10b      	bne.n	8002cb6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002c9e:	69bb      	ldr	r3, [r7, #24]
 8002ca0:	881b      	ldrh	r3, [r3, #0]
 8002ca2:	461a      	mov	r2, r3
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002cac:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002cae:	69bb      	ldr	r3, [r7, #24]
 8002cb0:	3302      	adds	r3, #2
 8002cb2:	61bb      	str	r3, [r7, #24]
 8002cb4:	e007      	b.n	8002cc6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002cb6:	69fb      	ldr	r3, [r7, #28]
 8002cb8:	781a      	ldrb	r2, [r3, #0]
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002cc0:	69fb      	ldr	r3, [r7, #28]
 8002cc2:	3301      	adds	r3, #1
 8002cc4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002cca:	b29b      	uxth	r3, r3
 8002ccc:	3b01      	subs	r3, #1
 8002cce:	b29a      	uxth	r2, r3
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002cd8:	b29b      	uxth	r3, r3
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d1cf      	bne.n	8002c7e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	9300      	str	r3, [sp, #0]
 8002ce2:	697b      	ldr	r3, [r7, #20]
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	2140      	movs	r1, #64	; 0x40
 8002ce8:	68f8      	ldr	r0, [r7, #12]
 8002cea:	f000 fb33 	bl	8003354 <UART_WaitOnFlagUntilTimeout>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d001      	beq.n	8002cf8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002cf4:	2303      	movs	r3, #3
 8002cf6:	e006      	b.n	8002d06 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	2220      	movs	r2, #32
 8002cfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002d00:	2300      	movs	r3, #0
 8002d02:	e000      	b.n	8002d06 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002d04:	2302      	movs	r3, #2
  }
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	3720      	adds	r7, #32
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}

08002d0e <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8002d0e:	b480      	push	{r7}
 8002d10:	b085      	sub	sp, #20
 8002d12:	af00      	add	r7, sp, #0
 8002d14:	60f8      	str	r0, [r7, #12]
 8002d16:	60b9      	str	r1, [r7, #8]
 8002d18:	4613      	mov	r3, r2
 8002d1a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d22:	b2db      	uxtb	r3, r3
 8002d24:	2b20      	cmp	r3, #32
 8002d26:	d130      	bne.n	8002d8a <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d28:	68bb      	ldr	r3, [r7, #8]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d002      	beq.n	8002d34 <HAL_UART_Transmit_IT+0x26>
 8002d2e:	88fb      	ldrh	r3, [r7, #6]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d101      	bne.n	8002d38 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8002d34:	2301      	movs	r3, #1
 8002d36:	e029      	b.n	8002d8c <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d3e:	2b01      	cmp	r3, #1
 8002d40:	d101      	bne.n	8002d46 <HAL_UART_Transmit_IT+0x38>
 8002d42:	2302      	movs	r3, #2
 8002d44:	e022      	b.n	8002d8c <HAL_UART_Transmit_IT+0x7e>
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	2201      	movs	r2, #1
 8002d4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	68ba      	ldr	r2, [r7, #8]
 8002d52:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	88fa      	ldrh	r2, [r7, #6]
 8002d58:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	88fa      	ldrh	r2, [r7, #6]
 8002d5e:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	2200      	movs	r2, #0
 8002d64:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	2221      	movs	r2, #33	; 0x21
 8002d6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	2200      	movs	r2, #0
 8002d72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	68da      	ldr	r2, [r3, #12]
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002d84:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8002d86:	2300      	movs	r3, #0
 8002d88:	e000      	b.n	8002d8c <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8002d8a:	2302      	movs	r3, #2
  }
}
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	3714      	adds	r7, #20
 8002d90:	46bd      	mov	sp, r7
 8002d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d96:	4770      	bx	lr

08002d98 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b084      	sub	sp, #16
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	60f8      	str	r0, [r7, #12]
 8002da0:	60b9      	str	r1, [r7, #8]
 8002da2:	4613      	mov	r3, r2
 8002da4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002dac:	b2db      	uxtb	r3, r3
 8002dae:	2b20      	cmp	r3, #32
 8002db0:	d11d      	bne.n	8002dee <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002db2:	68bb      	ldr	r3, [r7, #8]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d002      	beq.n	8002dbe <HAL_UART_Receive_IT+0x26>
 8002db8:	88fb      	ldrh	r3, [r7, #6]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d101      	bne.n	8002dc2 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e016      	b.n	8002df0 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002dc8:	2b01      	cmp	r3, #1
 8002dca:	d101      	bne.n	8002dd0 <HAL_UART_Receive_IT+0x38>
 8002dcc:	2302      	movs	r3, #2
 8002dce:	e00f      	b.n	8002df0 <HAL_UART_Receive_IT+0x58>
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002dde:	88fb      	ldrh	r3, [r7, #6]
 8002de0:	461a      	mov	r2, r3
 8002de2:	68b9      	ldr	r1, [r7, #8]
 8002de4:	68f8      	ldr	r0, [r7, #12]
 8002de6:	f000 fb23 	bl	8003430 <UART_Start_Receive_IT>
 8002dea:	4603      	mov	r3, r0
 8002dec:	e000      	b.n	8002df0 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8002dee:	2302      	movs	r3, #2
  }
}
 8002df0:	4618      	mov	r0, r3
 8002df2:	3710      	adds	r7, #16
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd80      	pop	{r7, pc}

08002df8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b0ba      	sub	sp, #232	; 0xe8
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	68db      	ldr	r3, [r3, #12]
 8002e10:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	695b      	ldr	r3, [r3, #20]
 8002e1a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002e24:	2300      	movs	r3, #0
 8002e26:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002e2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e2e:	f003 030f 	and.w	r3, r3, #15
 8002e32:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002e36:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d10f      	bne.n	8002e5e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002e3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e42:	f003 0320 	and.w	r3, r3, #32
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d009      	beq.n	8002e5e <HAL_UART_IRQHandler+0x66>
 8002e4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e4e:	f003 0320 	and.w	r3, r3, #32
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d003      	beq.n	8002e5e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002e56:	6878      	ldr	r0, [r7, #4]
 8002e58:	f000 fc07 	bl	800366a <UART_Receive_IT>
      return;
 8002e5c:	e256      	b.n	800330c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002e5e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	f000 80de 	beq.w	8003024 <HAL_UART_IRQHandler+0x22c>
 8002e68:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002e6c:	f003 0301 	and.w	r3, r3, #1
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d106      	bne.n	8002e82 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002e74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e78:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	f000 80d1 	beq.w	8003024 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002e82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e86:	f003 0301 	and.w	r3, r3, #1
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d00b      	beq.n	8002ea6 <HAL_UART_IRQHandler+0xae>
 8002e8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d005      	beq.n	8002ea6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e9e:	f043 0201 	orr.w	r2, r3, #1
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002ea6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002eaa:	f003 0304 	and.w	r3, r3, #4
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d00b      	beq.n	8002eca <HAL_UART_IRQHandler+0xd2>
 8002eb2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002eb6:	f003 0301 	and.w	r3, r3, #1
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d005      	beq.n	8002eca <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec2:	f043 0202 	orr.w	r2, r3, #2
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002eca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ece:	f003 0302 	and.w	r3, r3, #2
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d00b      	beq.n	8002eee <HAL_UART_IRQHandler+0xf6>
 8002ed6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002eda:	f003 0301 	and.w	r3, r3, #1
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d005      	beq.n	8002eee <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee6:	f043 0204 	orr.w	r2, r3, #4
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002eee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ef2:	f003 0308 	and.w	r3, r3, #8
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d011      	beq.n	8002f1e <HAL_UART_IRQHandler+0x126>
 8002efa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002efe:	f003 0320 	and.w	r3, r3, #32
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d105      	bne.n	8002f12 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002f06:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002f0a:	f003 0301 	and.w	r3, r3, #1
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d005      	beq.n	8002f1e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f16:	f043 0208 	orr.w	r2, r3, #8
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	f000 81ed 	beq.w	8003302 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002f28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f2c:	f003 0320 	and.w	r3, r3, #32
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d008      	beq.n	8002f46 <HAL_UART_IRQHandler+0x14e>
 8002f34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f38:	f003 0320 	and.w	r3, r3, #32
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d002      	beq.n	8002f46 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002f40:	6878      	ldr	r0, [r7, #4]
 8002f42:	f000 fb92 	bl	800366a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	695b      	ldr	r3, [r3, #20]
 8002f4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f50:	2b40      	cmp	r3, #64	; 0x40
 8002f52:	bf0c      	ite	eq
 8002f54:	2301      	moveq	r3, #1
 8002f56:	2300      	movne	r3, #0
 8002f58:	b2db      	uxtb	r3, r3
 8002f5a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f62:	f003 0308 	and.w	r3, r3, #8
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d103      	bne.n	8002f72 <HAL_UART_IRQHandler+0x17a>
 8002f6a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d04f      	beq.n	8003012 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002f72:	6878      	ldr	r0, [r7, #4]
 8002f74:	f000 fa9a 	bl	80034ac <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	695b      	ldr	r3, [r3, #20]
 8002f7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f82:	2b40      	cmp	r3, #64	; 0x40
 8002f84:	d141      	bne.n	800300a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	3314      	adds	r3, #20
 8002f8c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f90:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002f94:	e853 3f00 	ldrex	r3, [r3]
 8002f98:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002f9c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002fa0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002fa4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	3314      	adds	r3, #20
 8002fae:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002fb2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002fb6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fba:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002fbe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002fc2:	e841 2300 	strex	r3, r2, [r1]
 8002fc6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002fca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d1d9      	bne.n	8002f86 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d013      	beq.n	8003002 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fde:	4a7d      	ldr	r2, [pc, #500]	; (80031d4 <HAL_UART_IRQHandler+0x3dc>)
 8002fe0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f7fe fe27 	bl	8001c3a <HAL_DMA_Abort_IT>
 8002fec:	4603      	mov	r3, r0
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d016      	beq.n	8003020 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ff6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ff8:	687a      	ldr	r2, [r7, #4]
 8002ffa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002ffc:	4610      	mov	r0, r2
 8002ffe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003000:	e00e      	b.n	8003020 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003002:	6878      	ldr	r0, [r7, #4]
 8003004:	f000 f990 	bl	8003328 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003008:	e00a      	b.n	8003020 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800300a:	6878      	ldr	r0, [r7, #4]
 800300c:	f000 f98c 	bl	8003328 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003010:	e006      	b.n	8003020 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003012:	6878      	ldr	r0, [r7, #4]
 8003014:	f000 f988 	bl	8003328 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2200      	movs	r2, #0
 800301c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800301e:	e170      	b.n	8003302 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003020:	bf00      	nop
    return;
 8003022:	e16e      	b.n	8003302 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003028:	2b01      	cmp	r3, #1
 800302a:	f040 814a 	bne.w	80032c2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800302e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003032:	f003 0310 	and.w	r3, r3, #16
 8003036:	2b00      	cmp	r3, #0
 8003038:	f000 8143 	beq.w	80032c2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800303c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003040:	f003 0310 	and.w	r3, r3, #16
 8003044:	2b00      	cmp	r3, #0
 8003046:	f000 813c 	beq.w	80032c2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800304a:	2300      	movs	r3, #0
 800304c:	60bb      	str	r3, [r7, #8]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	60bb      	str	r3, [r7, #8]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	60bb      	str	r3, [r7, #8]
 800305e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	695b      	ldr	r3, [r3, #20]
 8003066:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800306a:	2b40      	cmp	r3, #64	; 0x40
 800306c:	f040 80b4 	bne.w	80031d8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800307c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003080:	2b00      	cmp	r3, #0
 8003082:	f000 8140 	beq.w	8003306 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800308a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800308e:	429a      	cmp	r2, r3
 8003090:	f080 8139 	bcs.w	8003306 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800309a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030a0:	69db      	ldr	r3, [r3, #28]
 80030a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030a6:	f000 8088 	beq.w	80031ba <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	330c      	adds	r3, #12
 80030b0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030b4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80030b8:	e853 3f00 	ldrex	r3, [r3]
 80030bc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80030c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80030c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80030c8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	330c      	adds	r3, #12
 80030d2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80030d6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80030da:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030de:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80030e2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80030e6:	e841 2300 	strex	r3, r2, [r1]
 80030ea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80030ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d1d9      	bne.n	80030aa <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	3314      	adds	r3, #20
 80030fc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003100:	e853 3f00 	ldrex	r3, [r3]
 8003104:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003106:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003108:	f023 0301 	bic.w	r3, r3, #1
 800310c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	3314      	adds	r3, #20
 8003116:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800311a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800311e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003120:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003122:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003126:	e841 2300 	strex	r3, r2, [r1]
 800312a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800312c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800312e:	2b00      	cmp	r3, #0
 8003130:	d1e1      	bne.n	80030f6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	3314      	adds	r3, #20
 8003138:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800313a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800313c:	e853 3f00 	ldrex	r3, [r3]
 8003140:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003142:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003144:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003148:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	3314      	adds	r3, #20
 8003152:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003156:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003158:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800315a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800315c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800315e:	e841 2300 	strex	r3, r2, [r1]
 8003162:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003164:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003166:	2b00      	cmp	r3, #0
 8003168:	d1e3      	bne.n	8003132 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2220      	movs	r2, #32
 800316e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2200      	movs	r2, #0
 8003176:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	330c      	adds	r3, #12
 800317e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003180:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003182:	e853 3f00 	ldrex	r3, [r3]
 8003186:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003188:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800318a:	f023 0310 	bic.w	r3, r3, #16
 800318e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	330c      	adds	r3, #12
 8003198:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800319c:	65ba      	str	r2, [r7, #88]	; 0x58
 800319e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031a0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80031a2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80031a4:	e841 2300 	strex	r3, r2, [r1]
 80031a8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80031aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d1e3      	bne.n	8003178 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031b4:	4618      	mov	r0, r3
 80031b6:	f7fe fcd0 	bl	8001b5a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80031c2:	b29b      	uxth	r3, r3
 80031c4:	1ad3      	subs	r3, r2, r3
 80031c6:	b29b      	uxth	r3, r3
 80031c8:	4619      	mov	r1, r3
 80031ca:	6878      	ldr	r0, [r7, #4]
 80031cc:	f000 f8b6 	bl	800333c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80031d0:	e099      	b.n	8003306 <HAL_UART_IRQHandler+0x50e>
 80031d2:	bf00      	nop
 80031d4:	08003573 	.word	0x08003573
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80031e0:	b29b      	uxth	r3, r3
 80031e2:	1ad3      	subs	r3, r2, r3
 80031e4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80031ec:	b29b      	uxth	r3, r3
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	f000 808b 	beq.w	800330a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80031f4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	f000 8086 	beq.w	800330a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	330c      	adds	r3, #12
 8003204:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003206:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003208:	e853 3f00 	ldrex	r3, [r3]
 800320c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800320e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003210:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003214:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	330c      	adds	r3, #12
 800321e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003222:	647a      	str	r2, [r7, #68]	; 0x44
 8003224:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003226:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003228:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800322a:	e841 2300 	strex	r3, r2, [r1]
 800322e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003230:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003232:	2b00      	cmp	r3, #0
 8003234:	d1e3      	bne.n	80031fe <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	3314      	adds	r3, #20
 800323c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800323e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003240:	e853 3f00 	ldrex	r3, [r3]
 8003244:	623b      	str	r3, [r7, #32]
   return(result);
 8003246:	6a3b      	ldr	r3, [r7, #32]
 8003248:	f023 0301 	bic.w	r3, r3, #1
 800324c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	3314      	adds	r3, #20
 8003256:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800325a:	633a      	str	r2, [r7, #48]	; 0x30
 800325c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800325e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003260:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003262:	e841 2300 	strex	r3, r2, [r1]
 8003266:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800326a:	2b00      	cmp	r3, #0
 800326c:	d1e3      	bne.n	8003236 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2220      	movs	r2, #32
 8003272:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2200      	movs	r2, #0
 800327a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	330c      	adds	r3, #12
 8003282:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	e853 3f00 	ldrex	r3, [r3]
 800328a:	60fb      	str	r3, [r7, #12]
   return(result);
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	f023 0310 	bic.w	r3, r3, #16
 8003292:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	330c      	adds	r3, #12
 800329c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80032a0:	61fa      	str	r2, [r7, #28]
 80032a2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032a4:	69b9      	ldr	r1, [r7, #24]
 80032a6:	69fa      	ldr	r2, [r7, #28]
 80032a8:	e841 2300 	strex	r3, r2, [r1]
 80032ac:	617b      	str	r3, [r7, #20]
   return(result);
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d1e3      	bne.n	800327c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80032b4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80032b8:	4619      	mov	r1, r3
 80032ba:	6878      	ldr	r0, [r7, #4]
 80032bc:	f000 f83e 	bl	800333c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80032c0:	e023      	b.n	800330a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80032c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d009      	beq.n	80032e2 <HAL_UART_IRQHandler+0x4ea>
 80032ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80032d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d003      	beq.n	80032e2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80032da:	6878      	ldr	r0, [r7, #4]
 80032dc:	f000 f95d 	bl	800359a <UART_Transmit_IT>
    return;
 80032e0:	e014      	b.n	800330c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80032e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d00e      	beq.n	800330c <HAL_UART_IRQHandler+0x514>
 80032ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80032f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d008      	beq.n	800330c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80032fa:	6878      	ldr	r0, [r7, #4]
 80032fc:	f000 f99d 	bl	800363a <UART_EndTransmit_IT>
    return;
 8003300:	e004      	b.n	800330c <HAL_UART_IRQHandler+0x514>
    return;
 8003302:	bf00      	nop
 8003304:	e002      	b.n	800330c <HAL_UART_IRQHandler+0x514>
      return;
 8003306:	bf00      	nop
 8003308:	e000      	b.n	800330c <HAL_UART_IRQHandler+0x514>
      return;
 800330a:	bf00      	nop
  }
}
 800330c:	37e8      	adds	r7, #232	; 0xe8
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}
 8003312:	bf00      	nop

08003314 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003314:	b480      	push	{r7}
 8003316:	b083      	sub	sp, #12
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800331c:	bf00      	nop
 800331e:	370c      	adds	r7, #12
 8003320:	46bd      	mov	sp, r7
 8003322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003326:	4770      	bx	lr

08003328 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003328:	b480      	push	{r7}
 800332a:	b083      	sub	sp, #12
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003330:	bf00      	nop
 8003332:	370c      	adds	r7, #12
 8003334:	46bd      	mov	sp, r7
 8003336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333a:	4770      	bx	lr

0800333c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800333c:	b480      	push	{r7}
 800333e:	b083      	sub	sp, #12
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
 8003344:	460b      	mov	r3, r1
 8003346:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003348:	bf00      	nop
 800334a:	370c      	adds	r7, #12
 800334c:	46bd      	mov	sp, r7
 800334e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003352:	4770      	bx	lr

08003354 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b090      	sub	sp, #64	; 0x40
 8003358:	af00      	add	r7, sp, #0
 800335a:	60f8      	str	r0, [r7, #12]
 800335c:	60b9      	str	r1, [r7, #8]
 800335e:	603b      	str	r3, [r7, #0]
 8003360:	4613      	mov	r3, r2
 8003362:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003364:	e050      	b.n	8003408 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003366:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003368:	f1b3 3fff 	cmp.w	r3, #4294967295
 800336c:	d04c      	beq.n	8003408 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800336e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003370:	2b00      	cmp	r3, #0
 8003372:	d007      	beq.n	8003384 <UART_WaitOnFlagUntilTimeout+0x30>
 8003374:	f7fd ffb4 	bl	80012e0 <HAL_GetTick>
 8003378:	4602      	mov	r2, r0
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	1ad3      	subs	r3, r2, r3
 800337e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003380:	429a      	cmp	r2, r3
 8003382:	d241      	bcs.n	8003408 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	330c      	adds	r3, #12
 800338a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800338c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800338e:	e853 3f00 	ldrex	r3, [r3]
 8003392:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003396:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800339a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	330c      	adds	r3, #12
 80033a2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80033a4:	637a      	str	r2, [r7, #52]	; 0x34
 80033a6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033a8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80033aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80033ac:	e841 2300 	strex	r3, r2, [r1]
 80033b0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80033b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d1e5      	bne.n	8003384 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	3314      	adds	r3, #20
 80033be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033c0:	697b      	ldr	r3, [r7, #20]
 80033c2:	e853 3f00 	ldrex	r3, [r3]
 80033c6:	613b      	str	r3, [r7, #16]
   return(result);
 80033c8:	693b      	ldr	r3, [r7, #16]
 80033ca:	f023 0301 	bic.w	r3, r3, #1
 80033ce:	63bb      	str	r3, [r7, #56]	; 0x38
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	3314      	adds	r3, #20
 80033d6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80033d8:	623a      	str	r2, [r7, #32]
 80033da:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033dc:	69f9      	ldr	r1, [r7, #28]
 80033de:	6a3a      	ldr	r2, [r7, #32]
 80033e0:	e841 2300 	strex	r3, r2, [r1]
 80033e4:	61bb      	str	r3, [r7, #24]
   return(result);
 80033e6:	69bb      	ldr	r3, [r7, #24]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d1e5      	bne.n	80033b8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	2220      	movs	r2, #32
 80033f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	2220      	movs	r2, #32
 80033f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	2200      	movs	r2, #0
 8003400:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003404:	2303      	movs	r3, #3
 8003406:	e00f      	b.n	8003428 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	681a      	ldr	r2, [r3, #0]
 800340e:	68bb      	ldr	r3, [r7, #8]
 8003410:	4013      	ands	r3, r2
 8003412:	68ba      	ldr	r2, [r7, #8]
 8003414:	429a      	cmp	r2, r3
 8003416:	bf0c      	ite	eq
 8003418:	2301      	moveq	r3, #1
 800341a:	2300      	movne	r3, #0
 800341c:	b2db      	uxtb	r3, r3
 800341e:	461a      	mov	r2, r3
 8003420:	79fb      	ldrb	r3, [r7, #7]
 8003422:	429a      	cmp	r2, r3
 8003424:	d09f      	beq.n	8003366 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003426:	2300      	movs	r3, #0
}
 8003428:	4618      	mov	r0, r3
 800342a:	3740      	adds	r7, #64	; 0x40
 800342c:	46bd      	mov	sp, r7
 800342e:	bd80      	pop	{r7, pc}

08003430 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003430:	b480      	push	{r7}
 8003432:	b085      	sub	sp, #20
 8003434:	af00      	add	r7, sp, #0
 8003436:	60f8      	str	r0, [r7, #12]
 8003438:	60b9      	str	r1, [r7, #8]
 800343a:	4613      	mov	r3, r2
 800343c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	68ba      	ldr	r2, [r7, #8]
 8003442:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	88fa      	ldrh	r2, [r7, #6]
 8003448:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	88fa      	ldrh	r2, [r7, #6]
 800344e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	2200      	movs	r2, #0
 8003454:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	2222      	movs	r2, #34	; 0x22
 800345a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	2200      	movs	r2, #0
 8003462:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	691b      	ldr	r3, [r3, #16]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d007      	beq.n	800347e <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	68da      	ldr	r2, [r3, #12]
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800347c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	695a      	ldr	r2, [r3, #20]
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f042 0201 	orr.w	r2, r2, #1
 800348c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	68da      	ldr	r2, [r3, #12]
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f042 0220 	orr.w	r2, r2, #32
 800349c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800349e:	2300      	movs	r3, #0
}
 80034a0:	4618      	mov	r0, r3
 80034a2:	3714      	adds	r7, #20
 80034a4:	46bd      	mov	sp, r7
 80034a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034aa:	4770      	bx	lr

080034ac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80034ac:	b480      	push	{r7}
 80034ae:	b095      	sub	sp, #84	; 0x54
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	330c      	adds	r3, #12
 80034ba:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034be:	e853 3f00 	ldrex	r3, [r3]
 80034c2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80034c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034c6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80034ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	330c      	adds	r3, #12
 80034d2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80034d4:	643a      	str	r2, [r7, #64]	; 0x40
 80034d6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034d8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80034da:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80034dc:	e841 2300 	strex	r3, r2, [r1]
 80034e0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80034e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d1e5      	bne.n	80034b4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	3314      	adds	r3, #20
 80034ee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034f0:	6a3b      	ldr	r3, [r7, #32]
 80034f2:	e853 3f00 	ldrex	r3, [r3]
 80034f6:	61fb      	str	r3, [r7, #28]
   return(result);
 80034f8:	69fb      	ldr	r3, [r7, #28]
 80034fa:	f023 0301 	bic.w	r3, r3, #1
 80034fe:	64bb      	str	r3, [r7, #72]	; 0x48
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	3314      	adds	r3, #20
 8003506:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003508:	62fa      	str	r2, [r7, #44]	; 0x2c
 800350a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800350c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800350e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003510:	e841 2300 	strex	r3, r2, [r1]
 8003514:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003518:	2b00      	cmp	r3, #0
 800351a:	d1e5      	bne.n	80034e8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003520:	2b01      	cmp	r3, #1
 8003522:	d119      	bne.n	8003558 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	330c      	adds	r3, #12
 800352a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	e853 3f00 	ldrex	r3, [r3]
 8003532:	60bb      	str	r3, [r7, #8]
   return(result);
 8003534:	68bb      	ldr	r3, [r7, #8]
 8003536:	f023 0310 	bic.w	r3, r3, #16
 800353a:	647b      	str	r3, [r7, #68]	; 0x44
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	330c      	adds	r3, #12
 8003542:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003544:	61ba      	str	r2, [r7, #24]
 8003546:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003548:	6979      	ldr	r1, [r7, #20]
 800354a:	69ba      	ldr	r2, [r7, #24]
 800354c:	e841 2300 	strex	r3, r2, [r1]
 8003550:	613b      	str	r3, [r7, #16]
   return(result);
 8003552:	693b      	ldr	r3, [r7, #16]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d1e5      	bne.n	8003524 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2220      	movs	r2, #32
 800355c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2200      	movs	r2, #0
 8003564:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003566:	bf00      	nop
 8003568:	3754      	adds	r7, #84	; 0x54
 800356a:	46bd      	mov	sp, r7
 800356c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003570:	4770      	bx	lr

08003572 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003572:	b580      	push	{r7, lr}
 8003574:	b084      	sub	sp, #16
 8003576:	af00      	add	r7, sp, #0
 8003578:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800357e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	2200      	movs	r2, #0
 8003584:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	2200      	movs	r2, #0
 800358a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800358c:	68f8      	ldr	r0, [r7, #12]
 800358e:	f7ff fecb 	bl	8003328 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003592:	bf00      	nop
 8003594:	3710      	adds	r7, #16
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}

0800359a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800359a:	b480      	push	{r7}
 800359c:	b085      	sub	sp, #20
 800359e:	af00      	add	r7, sp, #0
 80035a0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035a8:	b2db      	uxtb	r3, r3
 80035aa:	2b21      	cmp	r3, #33	; 0x21
 80035ac:	d13e      	bne.n	800362c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	689b      	ldr	r3, [r3, #8]
 80035b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035b6:	d114      	bne.n	80035e2 <UART_Transmit_IT+0x48>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	691b      	ldr	r3, [r3, #16]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d110      	bne.n	80035e2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6a1b      	ldr	r3, [r3, #32]
 80035c4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	881b      	ldrh	r3, [r3, #0]
 80035ca:	461a      	mov	r2, r3
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80035d4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6a1b      	ldr	r3, [r3, #32]
 80035da:	1c9a      	adds	r2, r3, #2
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	621a      	str	r2, [r3, #32]
 80035e0:	e008      	b.n	80035f4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6a1b      	ldr	r3, [r3, #32]
 80035e6:	1c59      	adds	r1, r3, #1
 80035e8:	687a      	ldr	r2, [r7, #4]
 80035ea:	6211      	str	r1, [r2, #32]
 80035ec:	781a      	ldrb	r2, [r3, #0]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80035f8:	b29b      	uxth	r3, r3
 80035fa:	3b01      	subs	r3, #1
 80035fc:	b29b      	uxth	r3, r3
 80035fe:	687a      	ldr	r2, [r7, #4]
 8003600:	4619      	mov	r1, r3
 8003602:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003604:	2b00      	cmp	r3, #0
 8003606:	d10f      	bne.n	8003628 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	68da      	ldr	r2, [r3, #12]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003616:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	68da      	ldr	r2, [r3, #12]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003626:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003628:	2300      	movs	r3, #0
 800362a:	e000      	b.n	800362e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800362c:	2302      	movs	r3, #2
  }
}
 800362e:	4618      	mov	r0, r3
 8003630:	3714      	adds	r7, #20
 8003632:	46bd      	mov	sp, r7
 8003634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003638:	4770      	bx	lr

0800363a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800363a:	b580      	push	{r7, lr}
 800363c:	b082      	sub	sp, #8
 800363e:	af00      	add	r7, sp, #0
 8003640:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	68da      	ldr	r2, [r3, #12]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003650:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2220      	movs	r2, #32
 8003656:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800365a:	6878      	ldr	r0, [r7, #4]
 800365c:	f7ff fe5a 	bl	8003314 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003660:	2300      	movs	r3, #0
}
 8003662:	4618      	mov	r0, r3
 8003664:	3708      	adds	r7, #8
 8003666:	46bd      	mov	sp, r7
 8003668:	bd80      	pop	{r7, pc}

0800366a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800366a:	b580      	push	{r7, lr}
 800366c:	b08c      	sub	sp, #48	; 0x30
 800366e:	af00      	add	r7, sp, #0
 8003670:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003678:	b2db      	uxtb	r3, r3
 800367a:	2b22      	cmp	r3, #34	; 0x22
 800367c:	f040 80ab 	bne.w	80037d6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	689b      	ldr	r3, [r3, #8]
 8003684:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003688:	d117      	bne.n	80036ba <UART_Receive_IT+0x50>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	691b      	ldr	r3, [r3, #16]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d113      	bne.n	80036ba <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003692:	2300      	movs	r3, #0
 8003694:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800369a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	b29b      	uxth	r3, r3
 80036a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036a8:	b29a      	uxth	r2, r3
 80036aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036ac:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036b2:	1c9a      	adds	r2, r3, #2
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	629a      	str	r2, [r3, #40]	; 0x28
 80036b8:	e026      	b.n	8003708 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036be:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80036c0:	2300      	movs	r3, #0
 80036c2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	689b      	ldr	r3, [r3, #8]
 80036c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036cc:	d007      	beq.n	80036de <UART_Receive_IT+0x74>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	689b      	ldr	r3, [r3, #8]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d10a      	bne.n	80036ec <UART_Receive_IT+0x82>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	691b      	ldr	r3, [r3, #16]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d106      	bne.n	80036ec <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	b2da      	uxtb	r2, r3
 80036e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036e8:	701a      	strb	r2, [r3, #0]
 80036ea:	e008      	b.n	80036fe <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	b2db      	uxtb	r3, r3
 80036f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80036f8:	b2da      	uxtb	r2, r3
 80036fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036fc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003702:	1c5a      	adds	r2, r3, #1
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800370c:	b29b      	uxth	r3, r3
 800370e:	3b01      	subs	r3, #1
 8003710:	b29b      	uxth	r3, r3
 8003712:	687a      	ldr	r2, [r7, #4]
 8003714:	4619      	mov	r1, r3
 8003716:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003718:	2b00      	cmp	r3, #0
 800371a:	d15a      	bne.n	80037d2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	68da      	ldr	r2, [r3, #12]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f022 0220 	bic.w	r2, r2, #32
 800372a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	68da      	ldr	r2, [r3, #12]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800373a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	695a      	ldr	r2, [r3, #20]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f022 0201 	bic.w	r2, r2, #1
 800374a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2220      	movs	r2, #32
 8003750:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003758:	2b01      	cmp	r3, #1
 800375a:	d135      	bne.n	80037c8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2200      	movs	r2, #0
 8003760:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	330c      	adds	r3, #12
 8003768:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800376a:	697b      	ldr	r3, [r7, #20]
 800376c:	e853 3f00 	ldrex	r3, [r3]
 8003770:	613b      	str	r3, [r7, #16]
   return(result);
 8003772:	693b      	ldr	r3, [r7, #16]
 8003774:	f023 0310 	bic.w	r3, r3, #16
 8003778:	627b      	str	r3, [r7, #36]	; 0x24
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	330c      	adds	r3, #12
 8003780:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003782:	623a      	str	r2, [r7, #32]
 8003784:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003786:	69f9      	ldr	r1, [r7, #28]
 8003788:	6a3a      	ldr	r2, [r7, #32]
 800378a:	e841 2300 	strex	r3, r2, [r1]
 800378e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003790:	69bb      	ldr	r3, [r7, #24]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d1e5      	bne.n	8003762 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f003 0310 	and.w	r3, r3, #16
 80037a0:	2b10      	cmp	r3, #16
 80037a2:	d10a      	bne.n	80037ba <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80037a4:	2300      	movs	r3, #0
 80037a6:	60fb      	str	r3, [r7, #12]
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	60fb      	str	r3, [r7, #12]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	60fb      	str	r3, [r7, #12]
 80037b8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80037be:	4619      	mov	r1, r3
 80037c0:	6878      	ldr	r0, [r7, #4]
 80037c2:	f7ff fdbb 	bl	800333c <HAL_UARTEx_RxEventCallback>
 80037c6:	e002      	b.n	80037ce <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80037c8:	6878      	ldr	r0, [r7, #4]
 80037ca:	f000 faa5 	bl	8003d18 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80037ce:	2300      	movs	r3, #0
 80037d0:	e002      	b.n	80037d8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80037d2:	2300      	movs	r3, #0
 80037d4:	e000      	b.n	80037d8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80037d6:	2302      	movs	r3, #2
  }
}
 80037d8:	4618      	mov	r0, r3
 80037da:	3730      	adds	r7, #48	; 0x30
 80037dc:	46bd      	mov	sp, r7
 80037de:	bd80      	pop	{r7, pc}

080037e0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80037e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80037e4:	b0c0      	sub	sp, #256	; 0x100
 80037e6:	af00      	add	r7, sp, #0
 80037e8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80037ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	691b      	ldr	r3, [r3, #16]
 80037f4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80037f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037fc:	68d9      	ldr	r1, [r3, #12]
 80037fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003802:	681a      	ldr	r2, [r3, #0]
 8003804:	ea40 0301 	orr.w	r3, r0, r1
 8003808:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800380a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800380e:	689a      	ldr	r2, [r3, #8]
 8003810:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003814:	691b      	ldr	r3, [r3, #16]
 8003816:	431a      	orrs	r2, r3
 8003818:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800381c:	695b      	ldr	r3, [r3, #20]
 800381e:	431a      	orrs	r2, r3
 8003820:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003824:	69db      	ldr	r3, [r3, #28]
 8003826:	4313      	orrs	r3, r2
 8003828:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800382c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	68db      	ldr	r3, [r3, #12]
 8003834:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003838:	f021 010c 	bic.w	r1, r1, #12
 800383c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003840:	681a      	ldr	r2, [r3, #0]
 8003842:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003846:	430b      	orrs	r3, r1
 8003848:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800384a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	695b      	ldr	r3, [r3, #20]
 8003852:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003856:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800385a:	6999      	ldr	r1, [r3, #24]
 800385c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003860:	681a      	ldr	r2, [r3, #0]
 8003862:	ea40 0301 	orr.w	r3, r0, r1
 8003866:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003868:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800386c:	681a      	ldr	r2, [r3, #0]
 800386e:	4b8f      	ldr	r3, [pc, #572]	; (8003aac <UART_SetConfig+0x2cc>)
 8003870:	429a      	cmp	r2, r3
 8003872:	d005      	beq.n	8003880 <UART_SetConfig+0xa0>
 8003874:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003878:	681a      	ldr	r2, [r3, #0]
 800387a:	4b8d      	ldr	r3, [pc, #564]	; (8003ab0 <UART_SetConfig+0x2d0>)
 800387c:	429a      	cmp	r2, r3
 800387e:	d104      	bne.n	800388a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003880:	f7ff f820 	bl	80028c4 <HAL_RCC_GetPCLK2Freq>
 8003884:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003888:	e003      	b.n	8003892 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800388a:	f7ff f807 	bl	800289c <HAL_RCC_GetPCLK1Freq>
 800388e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003892:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003896:	69db      	ldr	r3, [r3, #28]
 8003898:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800389c:	f040 810c 	bne.w	8003ab8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80038a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80038a4:	2200      	movs	r2, #0
 80038a6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80038aa:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80038ae:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80038b2:	4622      	mov	r2, r4
 80038b4:	462b      	mov	r3, r5
 80038b6:	1891      	adds	r1, r2, r2
 80038b8:	65b9      	str	r1, [r7, #88]	; 0x58
 80038ba:	415b      	adcs	r3, r3
 80038bc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80038be:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80038c2:	4621      	mov	r1, r4
 80038c4:	eb12 0801 	adds.w	r8, r2, r1
 80038c8:	4629      	mov	r1, r5
 80038ca:	eb43 0901 	adc.w	r9, r3, r1
 80038ce:	f04f 0200 	mov.w	r2, #0
 80038d2:	f04f 0300 	mov.w	r3, #0
 80038d6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80038da:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80038de:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80038e2:	4690      	mov	r8, r2
 80038e4:	4699      	mov	r9, r3
 80038e6:	4623      	mov	r3, r4
 80038e8:	eb18 0303 	adds.w	r3, r8, r3
 80038ec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80038f0:	462b      	mov	r3, r5
 80038f2:	eb49 0303 	adc.w	r3, r9, r3
 80038f6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80038fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	2200      	movs	r2, #0
 8003902:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003906:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800390a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800390e:	460b      	mov	r3, r1
 8003910:	18db      	adds	r3, r3, r3
 8003912:	653b      	str	r3, [r7, #80]	; 0x50
 8003914:	4613      	mov	r3, r2
 8003916:	eb42 0303 	adc.w	r3, r2, r3
 800391a:	657b      	str	r3, [r7, #84]	; 0x54
 800391c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003920:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003924:	f7fc fcc4 	bl	80002b0 <__aeabi_uldivmod>
 8003928:	4602      	mov	r2, r0
 800392a:	460b      	mov	r3, r1
 800392c:	4b61      	ldr	r3, [pc, #388]	; (8003ab4 <UART_SetConfig+0x2d4>)
 800392e:	fba3 2302 	umull	r2, r3, r3, r2
 8003932:	095b      	lsrs	r3, r3, #5
 8003934:	011c      	lsls	r4, r3, #4
 8003936:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800393a:	2200      	movs	r2, #0
 800393c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003940:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003944:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003948:	4642      	mov	r2, r8
 800394a:	464b      	mov	r3, r9
 800394c:	1891      	adds	r1, r2, r2
 800394e:	64b9      	str	r1, [r7, #72]	; 0x48
 8003950:	415b      	adcs	r3, r3
 8003952:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003954:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003958:	4641      	mov	r1, r8
 800395a:	eb12 0a01 	adds.w	sl, r2, r1
 800395e:	4649      	mov	r1, r9
 8003960:	eb43 0b01 	adc.w	fp, r3, r1
 8003964:	f04f 0200 	mov.w	r2, #0
 8003968:	f04f 0300 	mov.w	r3, #0
 800396c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003970:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003974:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003978:	4692      	mov	sl, r2
 800397a:	469b      	mov	fp, r3
 800397c:	4643      	mov	r3, r8
 800397e:	eb1a 0303 	adds.w	r3, sl, r3
 8003982:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003986:	464b      	mov	r3, r9
 8003988:	eb4b 0303 	adc.w	r3, fp, r3
 800398c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003990:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	2200      	movs	r2, #0
 8003998:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800399c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80039a0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80039a4:	460b      	mov	r3, r1
 80039a6:	18db      	adds	r3, r3, r3
 80039a8:	643b      	str	r3, [r7, #64]	; 0x40
 80039aa:	4613      	mov	r3, r2
 80039ac:	eb42 0303 	adc.w	r3, r2, r3
 80039b0:	647b      	str	r3, [r7, #68]	; 0x44
 80039b2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80039b6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80039ba:	f7fc fc79 	bl	80002b0 <__aeabi_uldivmod>
 80039be:	4602      	mov	r2, r0
 80039c0:	460b      	mov	r3, r1
 80039c2:	4611      	mov	r1, r2
 80039c4:	4b3b      	ldr	r3, [pc, #236]	; (8003ab4 <UART_SetConfig+0x2d4>)
 80039c6:	fba3 2301 	umull	r2, r3, r3, r1
 80039ca:	095b      	lsrs	r3, r3, #5
 80039cc:	2264      	movs	r2, #100	; 0x64
 80039ce:	fb02 f303 	mul.w	r3, r2, r3
 80039d2:	1acb      	subs	r3, r1, r3
 80039d4:	00db      	lsls	r3, r3, #3
 80039d6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80039da:	4b36      	ldr	r3, [pc, #216]	; (8003ab4 <UART_SetConfig+0x2d4>)
 80039dc:	fba3 2302 	umull	r2, r3, r3, r2
 80039e0:	095b      	lsrs	r3, r3, #5
 80039e2:	005b      	lsls	r3, r3, #1
 80039e4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80039e8:	441c      	add	r4, r3
 80039ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80039ee:	2200      	movs	r2, #0
 80039f0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80039f4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80039f8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80039fc:	4642      	mov	r2, r8
 80039fe:	464b      	mov	r3, r9
 8003a00:	1891      	adds	r1, r2, r2
 8003a02:	63b9      	str	r1, [r7, #56]	; 0x38
 8003a04:	415b      	adcs	r3, r3
 8003a06:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a08:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003a0c:	4641      	mov	r1, r8
 8003a0e:	1851      	adds	r1, r2, r1
 8003a10:	6339      	str	r1, [r7, #48]	; 0x30
 8003a12:	4649      	mov	r1, r9
 8003a14:	414b      	adcs	r3, r1
 8003a16:	637b      	str	r3, [r7, #52]	; 0x34
 8003a18:	f04f 0200 	mov.w	r2, #0
 8003a1c:	f04f 0300 	mov.w	r3, #0
 8003a20:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003a24:	4659      	mov	r1, fp
 8003a26:	00cb      	lsls	r3, r1, #3
 8003a28:	4651      	mov	r1, sl
 8003a2a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003a2e:	4651      	mov	r1, sl
 8003a30:	00ca      	lsls	r2, r1, #3
 8003a32:	4610      	mov	r0, r2
 8003a34:	4619      	mov	r1, r3
 8003a36:	4603      	mov	r3, r0
 8003a38:	4642      	mov	r2, r8
 8003a3a:	189b      	adds	r3, r3, r2
 8003a3c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003a40:	464b      	mov	r3, r9
 8003a42:	460a      	mov	r2, r1
 8003a44:	eb42 0303 	adc.w	r3, r2, r3
 8003a48:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003a4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	2200      	movs	r2, #0
 8003a54:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003a58:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003a5c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003a60:	460b      	mov	r3, r1
 8003a62:	18db      	adds	r3, r3, r3
 8003a64:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a66:	4613      	mov	r3, r2
 8003a68:	eb42 0303 	adc.w	r3, r2, r3
 8003a6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a6e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003a72:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003a76:	f7fc fc1b 	bl	80002b0 <__aeabi_uldivmod>
 8003a7a:	4602      	mov	r2, r0
 8003a7c:	460b      	mov	r3, r1
 8003a7e:	4b0d      	ldr	r3, [pc, #52]	; (8003ab4 <UART_SetConfig+0x2d4>)
 8003a80:	fba3 1302 	umull	r1, r3, r3, r2
 8003a84:	095b      	lsrs	r3, r3, #5
 8003a86:	2164      	movs	r1, #100	; 0x64
 8003a88:	fb01 f303 	mul.w	r3, r1, r3
 8003a8c:	1ad3      	subs	r3, r2, r3
 8003a8e:	00db      	lsls	r3, r3, #3
 8003a90:	3332      	adds	r3, #50	; 0x32
 8003a92:	4a08      	ldr	r2, [pc, #32]	; (8003ab4 <UART_SetConfig+0x2d4>)
 8003a94:	fba2 2303 	umull	r2, r3, r2, r3
 8003a98:	095b      	lsrs	r3, r3, #5
 8003a9a:	f003 0207 	and.w	r2, r3, #7
 8003a9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4422      	add	r2, r4
 8003aa6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003aa8:	e106      	b.n	8003cb8 <UART_SetConfig+0x4d8>
 8003aaa:	bf00      	nop
 8003aac:	40011000 	.word	0x40011000
 8003ab0:	40011400 	.word	0x40011400
 8003ab4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003ab8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003abc:	2200      	movs	r2, #0
 8003abe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003ac2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003ac6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003aca:	4642      	mov	r2, r8
 8003acc:	464b      	mov	r3, r9
 8003ace:	1891      	adds	r1, r2, r2
 8003ad0:	6239      	str	r1, [r7, #32]
 8003ad2:	415b      	adcs	r3, r3
 8003ad4:	627b      	str	r3, [r7, #36]	; 0x24
 8003ad6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003ada:	4641      	mov	r1, r8
 8003adc:	1854      	adds	r4, r2, r1
 8003ade:	4649      	mov	r1, r9
 8003ae0:	eb43 0501 	adc.w	r5, r3, r1
 8003ae4:	f04f 0200 	mov.w	r2, #0
 8003ae8:	f04f 0300 	mov.w	r3, #0
 8003aec:	00eb      	lsls	r3, r5, #3
 8003aee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003af2:	00e2      	lsls	r2, r4, #3
 8003af4:	4614      	mov	r4, r2
 8003af6:	461d      	mov	r5, r3
 8003af8:	4643      	mov	r3, r8
 8003afa:	18e3      	adds	r3, r4, r3
 8003afc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003b00:	464b      	mov	r3, r9
 8003b02:	eb45 0303 	adc.w	r3, r5, r3
 8003b06:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003b0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	2200      	movs	r2, #0
 8003b12:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003b16:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003b1a:	f04f 0200 	mov.w	r2, #0
 8003b1e:	f04f 0300 	mov.w	r3, #0
 8003b22:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003b26:	4629      	mov	r1, r5
 8003b28:	008b      	lsls	r3, r1, #2
 8003b2a:	4621      	mov	r1, r4
 8003b2c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003b30:	4621      	mov	r1, r4
 8003b32:	008a      	lsls	r2, r1, #2
 8003b34:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003b38:	f7fc fbba 	bl	80002b0 <__aeabi_uldivmod>
 8003b3c:	4602      	mov	r2, r0
 8003b3e:	460b      	mov	r3, r1
 8003b40:	4b60      	ldr	r3, [pc, #384]	; (8003cc4 <UART_SetConfig+0x4e4>)
 8003b42:	fba3 2302 	umull	r2, r3, r3, r2
 8003b46:	095b      	lsrs	r3, r3, #5
 8003b48:	011c      	lsls	r4, r3, #4
 8003b4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b4e:	2200      	movs	r2, #0
 8003b50:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003b54:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003b58:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003b5c:	4642      	mov	r2, r8
 8003b5e:	464b      	mov	r3, r9
 8003b60:	1891      	adds	r1, r2, r2
 8003b62:	61b9      	str	r1, [r7, #24]
 8003b64:	415b      	adcs	r3, r3
 8003b66:	61fb      	str	r3, [r7, #28]
 8003b68:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b6c:	4641      	mov	r1, r8
 8003b6e:	1851      	adds	r1, r2, r1
 8003b70:	6139      	str	r1, [r7, #16]
 8003b72:	4649      	mov	r1, r9
 8003b74:	414b      	adcs	r3, r1
 8003b76:	617b      	str	r3, [r7, #20]
 8003b78:	f04f 0200 	mov.w	r2, #0
 8003b7c:	f04f 0300 	mov.w	r3, #0
 8003b80:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003b84:	4659      	mov	r1, fp
 8003b86:	00cb      	lsls	r3, r1, #3
 8003b88:	4651      	mov	r1, sl
 8003b8a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b8e:	4651      	mov	r1, sl
 8003b90:	00ca      	lsls	r2, r1, #3
 8003b92:	4610      	mov	r0, r2
 8003b94:	4619      	mov	r1, r3
 8003b96:	4603      	mov	r3, r0
 8003b98:	4642      	mov	r2, r8
 8003b9a:	189b      	adds	r3, r3, r2
 8003b9c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003ba0:	464b      	mov	r3, r9
 8003ba2:	460a      	mov	r2, r1
 8003ba4:	eb42 0303 	adc.w	r3, r2, r3
 8003ba8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003bac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	67bb      	str	r3, [r7, #120]	; 0x78
 8003bb6:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003bb8:	f04f 0200 	mov.w	r2, #0
 8003bbc:	f04f 0300 	mov.w	r3, #0
 8003bc0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003bc4:	4649      	mov	r1, r9
 8003bc6:	008b      	lsls	r3, r1, #2
 8003bc8:	4641      	mov	r1, r8
 8003bca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003bce:	4641      	mov	r1, r8
 8003bd0:	008a      	lsls	r2, r1, #2
 8003bd2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003bd6:	f7fc fb6b 	bl	80002b0 <__aeabi_uldivmod>
 8003bda:	4602      	mov	r2, r0
 8003bdc:	460b      	mov	r3, r1
 8003bde:	4611      	mov	r1, r2
 8003be0:	4b38      	ldr	r3, [pc, #224]	; (8003cc4 <UART_SetConfig+0x4e4>)
 8003be2:	fba3 2301 	umull	r2, r3, r3, r1
 8003be6:	095b      	lsrs	r3, r3, #5
 8003be8:	2264      	movs	r2, #100	; 0x64
 8003bea:	fb02 f303 	mul.w	r3, r2, r3
 8003bee:	1acb      	subs	r3, r1, r3
 8003bf0:	011b      	lsls	r3, r3, #4
 8003bf2:	3332      	adds	r3, #50	; 0x32
 8003bf4:	4a33      	ldr	r2, [pc, #204]	; (8003cc4 <UART_SetConfig+0x4e4>)
 8003bf6:	fba2 2303 	umull	r2, r3, r2, r3
 8003bfa:	095b      	lsrs	r3, r3, #5
 8003bfc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c00:	441c      	add	r4, r3
 8003c02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c06:	2200      	movs	r2, #0
 8003c08:	673b      	str	r3, [r7, #112]	; 0x70
 8003c0a:	677a      	str	r2, [r7, #116]	; 0x74
 8003c0c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003c10:	4642      	mov	r2, r8
 8003c12:	464b      	mov	r3, r9
 8003c14:	1891      	adds	r1, r2, r2
 8003c16:	60b9      	str	r1, [r7, #8]
 8003c18:	415b      	adcs	r3, r3
 8003c1a:	60fb      	str	r3, [r7, #12]
 8003c1c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003c20:	4641      	mov	r1, r8
 8003c22:	1851      	adds	r1, r2, r1
 8003c24:	6039      	str	r1, [r7, #0]
 8003c26:	4649      	mov	r1, r9
 8003c28:	414b      	adcs	r3, r1
 8003c2a:	607b      	str	r3, [r7, #4]
 8003c2c:	f04f 0200 	mov.w	r2, #0
 8003c30:	f04f 0300 	mov.w	r3, #0
 8003c34:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003c38:	4659      	mov	r1, fp
 8003c3a:	00cb      	lsls	r3, r1, #3
 8003c3c:	4651      	mov	r1, sl
 8003c3e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c42:	4651      	mov	r1, sl
 8003c44:	00ca      	lsls	r2, r1, #3
 8003c46:	4610      	mov	r0, r2
 8003c48:	4619      	mov	r1, r3
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	4642      	mov	r2, r8
 8003c4e:	189b      	adds	r3, r3, r2
 8003c50:	66bb      	str	r3, [r7, #104]	; 0x68
 8003c52:	464b      	mov	r3, r9
 8003c54:	460a      	mov	r2, r1
 8003c56:	eb42 0303 	adc.w	r3, r2, r3
 8003c5a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003c5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	2200      	movs	r2, #0
 8003c64:	663b      	str	r3, [r7, #96]	; 0x60
 8003c66:	667a      	str	r2, [r7, #100]	; 0x64
 8003c68:	f04f 0200 	mov.w	r2, #0
 8003c6c:	f04f 0300 	mov.w	r3, #0
 8003c70:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003c74:	4649      	mov	r1, r9
 8003c76:	008b      	lsls	r3, r1, #2
 8003c78:	4641      	mov	r1, r8
 8003c7a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003c7e:	4641      	mov	r1, r8
 8003c80:	008a      	lsls	r2, r1, #2
 8003c82:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003c86:	f7fc fb13 	bl	80002b0 <__aeabi_uldivmod>
 8003c8a:	4602      	mov	r2, r0
 8003c8c:	460b      	mov	r3, r1
 8003c8e:	4b0d      	ldr	r3, [pc, #52]	; (8003cc4 <UART_SetConfig+0x4e4>)
 8003c90:	fba3 1302 	umull	r1, r3, r3, r2
 8003c94:	095b      	lsrs	r3, r3, #5
 8003c96:	2164      	movs	r1, #100	; 0x64
 8003c98:	fb01 f303 	mul.w	r3, r1, r3
 8003c9c:	1ad3      	subs	r3, r2, r3
 8003c9e:	011b      	lsls	r3, r3, #4
 8003ca0:	3332      	adds	r3, #50	; 0x32
 8003ca2:	4a08      	ldr	r2, [pc, #32]	; (8003cc4 <UART_SetConfig+0x4e4>)
 8003ca4:	fba2 2303 	umull	r2, r3, r2, r3
 8003ca8:	095b      	lsrs	r3, r3, #5
 8003caa:	f003 020f 	and.w	r2, r3, #15
 8003cae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4422      	add	r2, r4
 8003cb6:	609a      	str	r2, [r3, #8]
}
 8003cb8:	bf00      	nop
 8003cba:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003cc4:	51eb851f 	.word	0x51eb851f

08003cc8 <adc_init>:
 */

#include <ADC_INT/adc_driver.h>
static uint32_t adc_val;

void adc_init(){
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	af00      	add	r7, sp, #0
	HAL_ADC_Start_IT(&hadc1);
 8003ccc:	4802      	ldr	r0, [pc, #8]	; (8003cd8 <adc_init+0x10>)
 8003cce:	f7fd fb57 	bl	8001380 <HAL_ADC_Start_IT>
}
 8003cd2:	bf00      	nop
 8003cd4:	bd80      	pop	{r7, pc}
 8003cd6:	bf00      	nop
 8003cd8:	20000170 	.word	0x20000170

08003cdc <start_timer>:


#include "timer_inits.h"

static int SEC_COUNT = 0;
void start_timer(){
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim11);
 8003ce0:	4804      	ldr	r0, [pc, #16]	; (8003cf4 <start_timer+0x18>)
 8003ce2:	f7fe fe53 	bl	800298c <HAL_TIM_Base_Start_IT>
	SEC_COUNT = get_timer_count();
 8003ce6:	f7fc fe7d 	bl	80009e4 <get_timer_count>
 8003cea:	4603      	mov	r3, r0
 8003cec:	4a02      	ldr	r2, [pc, #8]	; (8003cf8 <start_timer+0x1c>)
 8003cee:	6013      	str	r3, [r2, #0]
}
 8003cf0:	bf00      	nop
 8003cf2:	bd80      	pop	{r7, pc}
 8003cf4:	200001bc 	.word	0x200001bc
 8003cf8:	20000290 	.word	0x20000290

08003cfc <Rx_UART_Intrpt>:
 */
#include "uart_handler.h"

char Temp_Rx_String[1];

void Rx_UART_Intrpt(){
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart1,(uint8_t*)Temp_Rx_String, sizeof(Temp_Rx_String));
 8003d00:	2201      	movs	r2, #1
 8003d02:	4903      	ldr	r1, [pc, #12]	; (8003d10 <Rx_UART_Intrpt+0x14>)
 8003d04:	4803      	ldr	r0, [pc, #12]	; (8003d14 <Rx_UART_Intrpt+0x18>)
 8003d06:	f7ff f847 	bl	8002d98 <HAL_UART_Receive_IT>
}
 8003d0a:	bf00      	nop
 8003d0c:	bd80      	pop	{r7, pc}
 8003d0e:	bf00      	nop
 8003d10:	20000294 	.word	0x20000294
 8003d14:	20000204 	.word	0x20000204

08003d18 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart1){
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b084      	sub	sp, #16
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]

	int cbuff_flag = get_cbuff_flag();
 8003d20:	f7fc fdc2 	bl	80008a8 <get_cbuff_flag>
 8003d24:	60f8      	str	r0, [r7, #12]
	if (1 == cbuff_flag){
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	2b01      	cmp	r3, #1
 8003d2a:	d107      	bne.n	8003d3c <HAL_UART_RxCpltCallback+0x24>
		CircularBuffer *cb_addr = get_cb_addr();
 8003d2c:	f7fc fd10 	bl	8000750 <get_cb_addr>
 8003d30:	60b8      	str	r0, [r7, #8]
		cbuff_Enqueue(&Temp_Rx_String[0],cb_addr);
 8003d32:	68b9      	ldr	r1, [r7, #8]
 8003d34:	4805      	ldr	r0, [pc, #20]	; (8003d4c <HAL_UART_RxCpltCallback+0x34>)
 8003d36:	f7fc fc73 	bl	8000620 <cbuff_Enqueue>
	}

	else{
		addtobuffer(&Temp_Rx_String[0]);
	}
}
 8003d3a:	e002      	b.n	8003d42 <HAL_UART_RxCpltCallback+0x2a>
		addtobuffer(&Temp_Rx_String[0]);
 8003d3c:	4803      	ldr	r0, [pc, #12]	; (8003d4c <HAL_UART_RxCpltCallback+0x34>)
 8003d3e:	f7fc fdbf 	bl	80008c0 <addtobuffer>
}
 8003d42:	bf00      	nop
 8003d44:	3710      	adds	r7, #16
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bd80      	pop	{r7, pc}
 8003d4a:	bf00      	nop
 8003d4c:	20000294 	.word	0x20000294

08003d50 <Tx_UART>:

void Tx_UART(char message[MESSAGE_SIZE]){
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b082      	sub	sp, #8
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1,(uint8_t*)&message[0],(uint16_t)strlen(message),100);
 8003d58:	6878      	ldr	r0, [r7, #4]
 8003d5a:	f7fc fa4b 	bl	80001f4 <strlen>
 8003d5e:	4603      	mov	r3, r0
 8003d60:	b29a      	uxth	r2, r3
 8003d62:	2364      	movs	r3, #100	; 0x64
 8003d64:	6879      	ldr	r1, [r7, #4]
 8003d66:	4803      	ldr	r0, [pc, #12]	; (8003d74 <Tx_UART+0x24>)
 8003d68:	f7fe ff3f 	bl	8002bea <HAL_UART_Transmit>
}
 8003d6c:	bf00      	nop
 8003d6e:	3708      	adds	r7, #8
 8003d70:	46bd      	mov	sp, r7
 8003d72:	bd80      	pop	{r7, pc}
 8003d74:	20000204 	.word	0x20000204

08003d78 <atoi>:
 8003d78:	220a      	movs	r2, #10
 8003d7a:	2100      	movs	r1, #0
 8003d7c:	f000 b936 	b.w	8003fec <strtol>

08003d80 <malloc>:
 8003d80:	4b02      	ldr	r3, [pc, #8]	; (8003d8c <malloc+0xc>)
 8003d82:	4601      	mov	r1, r0
 8003d84:	6818      	ldr	r0, [r3, #0]
 8003d86:	f000 b823 	b.w	8003dd0 <_malloc_r>
 8003d8a:	bf00      	nop
 8003d8c:	200000a0 	.word	0x200000a0

08003d90 <sbrk_aligned>:
 8003d90:	b570      	push	{r4, r5, r6, lr}
 8003d92:	4e0e      	ldr	r6, [pc, #56]	; (8003dcc <sbrk_aligned+0x3c>)
 8003d94:	460c      	mov	r4, r1
 8003d96:	6831      	ldr	r1, [r6, #0]
 8003d98:	4605      	mov	r5, r0
 8003d9a:	b911      	cbnz	r1, 8003da2 <sbrk_aligned+0x12>
 8003d9c:	f000 fadc 	bl	8004358 <_sbrk_r>
 8003da0:	6030      	str	r0, [r6, #0]
 8003da2:	4621      	mov	r1, r4
 8003da4:	4628      	mov	r0, r5
 8003da6:	f000 fad7 	bl	8004358 <_sbrk_r>
 8003daa:	1c43      	adds	r3, r0, #1
 8003dac:	d00a      	beq.n	8003dc4 <sbrk_aligned+0x34>
 8003dae:	1cc4      	adds	r4, r0, #3
 8003db0:	f024 0403 	bic.w	r4, r4, #3
 8003db4:	42a0      	cmp	r0, r4
 8003db6:	d007      	beq.n	8003dc8 <sbrk_aligned+0x38>
 8003db8:	1a21      	subs	r1, r4, r0
 8003dba:	4628      	mov	r0, r5
 8003dbc:	f000 facc 	bl	8004358 <_sbrk_r>
 8003dc0:	3001      	adds	r0, #1
 8003dc2:	d101      	bne.n	8003dc8 <sbrk_aligned+0x38>
 8003dc4:	f04f 34ff 	mov.w	r4, #4294967295
 8003dc8:	4620      	mov	r0, r4
 8003dca:	bd70      	pop	{r4, r5, r6, pc}
 8003dcc:	2000029c 	.word	0x2000029c

08003dd0 <_malloc_r>:
 8003dd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003dd4:	1ccd      	adds	r5, r1, #3
 8003dd6:	f025 0503 	bic.w	r5, r5, #3
 8003dda:	3508      	adds	r5, #8
 8003ddc:	2d0c      	cmp	r5, #12
 8003dde:	bf38      	it	cc
 8003de0:	250c      	movcc	r5, #12
 8003de2:	2d00      	cmp	r5, #0
 8003de4:	4607      	mov	r7, r0
 8003de6:	db01      	blt.n	8003dec <_malloc_r+0x1c>
 8003de8:	42a9      	cmp	r1, r5
 8003dea:	d905      	bls.n	8003df8 <_malloc_r+0x28>
 8003dec:	230c      	movs	r3, #12
 8003dee:	603b      	str	r3, [r7, #0]
 8003df0:	2600      	movs	r6, #0
 8003df2:	4630      	mov	r0, r6
 8003df4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003df8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003ecc <_malloc_r+0xfc>
 8003dfc:	f000 f868 	bl	8003ed0 <__malloc_lock>
 8003e00:	f8d8 3000 	ldr.w	r3, [r8]
 8003e04:	461c      	mov	r4, r3
 8003e06:	bb5c      	cbnz	r4, 8003e60 <_malloc_r+0x90>
 8003e08:	4629      	mov	r1, r5
 8003e0a:	4638      	mov	r0, r7
 8003e0c:	f7ff ffc0 	bl	8003d90 <sbrk_aligned>
 8003e10:	1c43      	adds	r3, r0, #1
 8003e12:	4604      	mov	r4, r0
 8003e14:	d155      	bne.n	8003ec2 <_malloc_r+0xf2>
 8003e16:	f8d8 4000 	ldr.w	r4, [r8]
 8003e1a:	4626      	mov	r6, r4
 8003e1c:	2e00      	cmp	r6, #0
 8003e1e:	d145      	bne.n	8003eac <_malloc_r+0xdc>
 8003e20:	2c00      	cmp	r4, #0
 8003e22:	d048      	beq.n	8003eb6 <_malloc_r+0xe6>
 8003e24:	6823      	ldr	r3, [r4, #0]
 8003e26:	4631      	mov	r1, r6
 8003e28:	4638      	mov	r0, r7
 8003e2a:	eb04 0903 	add.w	r9, r4, r3
 8003e2e:	f000 fa93 	bl	8004358 <_sbrk_r>
 8003e32:	4581      	cmp	r9, r0
 8003e34:	d13f      	bne.n	8003eb6 <_malloc_r+0xe6>
 8003e36:	6821      	ldr	r1, [r4, #0]
 8003e38:	1a6d      	subs	r5, r5, r1
 8003e3a:	4629      	mov	r1, r5
 8003e3c:	4638      	mov	r0, r7
 8003e3e:	f7ff ffa7 	bl	8003d90 <sbrk_aligned>
 8003e42:	3001      	adds	r0, #1
 8003e44:	d037      	beq.n	8003eb6 <_malloc_r+0xe6>
 8003e46:	6823      	ldr	r3, [r4, #0]
 8003e48:	442b      	add	r3, r5
 8003e4a:	6023      	str	r3, [r4, #0]
 8003e4c:	f8d8 3000 	ldr.w	r3, [r8]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d038      	beq.n	8003ec6 <_malloc_r+0xf6>
 8003e54:	685a      	ldr	r2, [r3, #4]
 8003e56:	42a2      	cmp	r2, r4
 8003e58:	d12b      	bne.n	8003eb2 <_malloc_r+0xe2>
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	605a      	str	r2, [r3, #4]
 8003e5e:	e00f      	b.n	8003e80 <_malloc_r+0xb0>
 8003e60:	6822      	ldr	r2, [r4, #0]
 8003e62:	1b52      	subs	r2, r2, r5
 8003e64:	d41f      	bmi.n	8003ea6 <_malloc_r+0xd6>
 8003e66:	2a0b      	cmp	r2, #11
 8003e68:	d917      	bls.n	8003e9a <_malloc_r+0xca>
 8003e6a:	1961      	adds	r1, r4, r5
 8003e6c:	42a3      	cmp	r3, r4
 8003e6e:	6025      	str	r5, [r4, #0]
 8003e70:	bf18      	it	ne
 8003e72:	6059      	strne	r1, [r3, #4]
 8003e74:	6863      	ldr	r3, [r4, #4]
 8003e76:	bf08      	it	eq
 8003e78:	f8c8 1000 	streq.w	r1, [r8]
 8003e7c:	5162      	str	r2, [r4, r5]
 8003e7e:	604b      	str	r3, [r1, #4]
 8003e80:	4638      	mov	r0, r7
 8003e82:	f104 060b 	add.w	r6, r4, #11
 8003e86:	f000 f829 	bl	8003edc <__malloc_unlock>
 8003e8a:	f026 0607 	bic.w	r6, r6, #7
 8003e8e:	1d23      	adds	r3, r4, #4
 8003e90:	1af2      	subs	r2, r6, r3
 8003e92:	d0ae      	beq.n	8003df2 <_malloc_r+0x22>
 8003e94:	1b9b      	subs	r3, r3, r6
 8003e96:	50a3      	str	r3, [r4, r2]
 8003e98:	e7ab      	b.n	8003df2 <_malloc_r+0x22>
 8003e9a:	42a3      	cmp	r3, r4
 8003e9c:	6862      	ldr	r2, [r4, #4]
 8003e9e:	d1dd      	bne.n	8003e5c <_malloc_r+0x8c>
 8003ea0:	f8c8 2000 	str.w	r2, [r8]
 8003ea4:	e7ec      	b.n	8003e80 <_malloc_r+0xb0>
 8003ea6:	4623      	mov	r3, r4
 8003ea8:	6864      	ldr	r4, [r4, #4]
 8003eaa:	e7ac      	b.n	8003e06 <_malloc_r+0x36>
 8003eac:	4634      	mov	r4, r6
 8003eae:	6876      	ldr	r6, [r6, #4]
 8003eb0:	e7b4      	b.n	8003e1c <_malloc_r+0x4c>
 8003eb2:	4613      	mov	r3, r2
 8003eb4:	e7cc      	b.n	8003e50 <_malloc_r+0x80>
 8003eb6:	230c      	movs	r3, #12
 8003eb8:	603b      	str	r3, [r7, #0]
 8003eba:	4638      	mov	r0, r7
 8003ebc:	f000 f80e 	bl	8003edc <__malloc_unlock>
 8003ec0:	e797      	b.n	8003df2 <_malloc_r+0x22>
 8003ec2:	6025      	str	r5, [r4, #0]
 8003ec4:	e7dc      	b.n	8003e80 <_malloc_r+0xb0>
 8003ec6:	605b      	str	r3, [r3, #4]
 8003ec8:	deff      	udf	#255	; 0xff
 8003eca:	bf00      	nop
 8003ecc:	20000298 	.word	0x20000298

08003ed0 <__malloc_lock>:
 8003ed0:	4801      	ldr	r0, [pc, #4]	; (8003ed8 <__malloc_lock+0x8>)
 8003ed2:	f000 ba8d 	b.w	80043f0 <__retarget_lock_acquire_recursive>
 8003ed6:	bf00      	nop
 8003ed8:	200003e0 	.word	0x200003e0

08003edc <__malloc_unlock>:
 8003edc:	4801      	ldr	r0, [pc, #4]	; (8003ee4 <__malloc_unlock+0x8>)
 8003ede:	f000 ba88 	b.w	80043f2 <__retarget_lock_release_recursive>
 8003ee2:	bf00      	nop
 8003ee4:	200003e0 	.word	0x200003e0

08003ee8 <_strtol_l.constprop.0>:
 8003ee8:	2b01      	cmp	r3, #1
 8003eea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003eee:	d001      	beq.n	8003ef4 <_strtol_l.constprop.0+0xc>
 8003ef0:	2b24      	cmp	r3, #36	; 0x24
 8003ef2:	d906      	bls.n	8003f02 <_strtol_l.constprop.0+0x1a>
 8003ef4:	f000 fa52 	bl	800439c <__errno>
 8003ef8:	2316      	movs	r3, #22
 8003efa:	6003      	str	r3, [r0, #0]
 8003efc:	2000      	movs	r0, #0
 8003efe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f02:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8003fe8 <_strtol_l.constprop.0+0x100>
 8003f06:	460d      	mov	r5, r1
 8003f08:	462e      	mov	r6, r5
 8003f0a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003f0e:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8003f12:	f017 0708 	ands.w	r7, r7, #8
 8003f16:	d1f7      	bne.n	8003f08 <_strtol_l.constprop.0+0x20>
 8003f18:	2c2d      	cmp	r4, #45	; 0x2d
 8003f1a:	d132      	bne.n	8003f82 <_strtol_l.constprop.0+0x9a>
 8003f1c:	782c      	ldrb	r4, [r5, #0]
 8003f1e:	2701      	movs	r7, #1
 8003f20:	1cb5      	adds	r5, r6, #2
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d05b      	beq.n	8003fde <_strtol_l.constprop.0+0xf6>
 8003f26:	2b10      	cmp	r3, #16
 8003f28:	d109      	bne.n	8003f3e <_strtol_l.constprop.0+0x56>
 8003f2a:	2c30      	cmp	r4, #48	; 0x30
 8003f2c:	d107      	bne.n	8003f3e <_strtol_l.constprop.0+0x56>
 8003f2e:	782c      	ldrb	r4, [r5, #0]
 8003f30:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8003f34:	2c58      	cmp	r4, #88	; 0x58
 8003f36:	d14d      	bne.n	8003fd4 <_strtol_l.constprop.0+0xec>
 8003f38:	786c      	ldrb	r4, [r5, #1]
 8003f3a:	2310      	movs	r3, #16
 8003f3c:	3502      	adds	r5, #2
 8003f3e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8003f42:	f108 38ff 	add.w	r8, r8, #4294967295
 8003f46:	f04f 0e00 	mov.w	lr, #0
 8003f4a:	fbb8 f9f3 	udiv	r9, r8, r3
 8003f4e:	4676      	mov	r6, lr
 8003f50:	fb03 8a19 	mls	sl, r3, r9, r8
 8003f54:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8003f58:	f1bc 0f09 	cmp.w	ip, #9
 8003f5c:	d816      	bhi.n	8003f8c <_strtol_l.constprop.0+0xa4>
 8003f5e:	4664      	mov	r4, ip
 8003f60:	42a3      	cmp	r3, r4
 8003f62:	dd24      	ble.n	8003fae <_strtol_l.constprop.0+0xc6>
 8003f64:	f1be 3fff 	cmp.w	lr, #4294967295
 8003f68:	d008      	beq.n	8003f7c <_strtol_l.constprop.0+0x94>
 8003f6a:	45b1      	cmp	r9, r6
 8003f6c:	d31c      	bcc.n	8003fa8 <_strtol_l.constprop.0+0xc0>
 8003f6e:	d101      	bne.n	8003f74 <_strtol_l.constprop.0+0x8c>
 8003f70:	45a2      	cmp	sl, r4
 8003f72:	db19      	blt.n	8003fa8 <_strtol_l.constprop.0+0xc0>
 8003f74:	fb06 4603 	mla	r6, r6, r3, r4
 8003f78:	f04f 0e01 	mov.w	lr, #1
 8003f7c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003f80:	e7e8      	b.n	8003f54 <_strtol_l.constprop.0+0x6c>
 8003f82:	2c2b      	cmp	r4, #43	; 0x2b
 8003f84:	bf04      	itt	eq
 8003f86:	782c      	ldrbeq	r4, [r5, #0]
 8003f88:	1cb5      	addeq	r5, r6, #2
 8003f8a:	e7ca      	b.n	8003f22 <_strtol_l.constprop.0+0x3a>
 8003f8c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8003f90:	f1bc 0f19 	cmp.w	ip, #25
 8003f94:	d801      	bhi.n	8003f9a <_strtol_l.constprop.0+0xb2>
 8003f96:	3c37      	subs	r4, #55	; 0x37
 8003f98:	e7e2      	b.n	8003f60 <_strtol_l.constprop.0+0x78>
 8003f9a:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8003f9e:	f1bc 0f19 	cmp.w	ip, #25
 8003fa2:	d804      	bhi.n	8003fae <_strtol_l.constprop.0+0xc6>
 8003fa4:	3c57      	subs	r4, #87	; 0x57
 8003fa6:	e7db      	b.n	8003f60 <_strtol_l.constprop.0+0x78>
 8003fa8:	f04f 3eff 	mov.w	lr, #4294967295
 8003fac:	e7e6      	b.n	8003f7c <_strtol_l.constprop.0+0x94>
 8003fae:	f1be 3fff 	cmp.w	lr, #4294967295
 8003fb2:	d105      	bne.n	8003fc0 <_strtol_l.constprop.0+0xd8>
 8003fb4:	2322      	movs	r3, #34	; 0x22
 8003fb6:	6003      	str	r3, [r0, #0]
 8003fb8:	4646      	mov	r6, r8
 8003fba:	b942      	cbnz	r2, 8003fce <_strtol_l.constprop.0+0xe6>
 8003fbc:	4630      	mov	r0, r6
 8003fbe:	e79e      	b.n	8003efe <_strtol_l.constprop.0+0x16>
 8003fc0:	b107      	cbz	r7, 8003fc4 <_strtol_l.constprop.0+0xdc>
 8003fc2:	4276      	negs	r6, r6
 8003fc4:	2a00      	cmp	r2, #0
 8003fc6:	d0f9      	beq.n	8003fbc <_strtol_l.constprop.0+0xd4>
 8003fc8:	f1be 0f00 	cmp.w	lr, #0
 8003fcc:	d000      	beq.n	8003fd0 <_strtol_l.constprop.0+0xe8>
 8003fce:	1e69      	subs	r1, r5, #1
 8003fd0:	6011      	str	r1, [r2, #0]
 8003fd2:	e7f3      	b.n	8003fbc <_strtol_l.constprop.0+0xd4>
 8003fd4:	2430      	movs	r4, #48	; 0x30
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d1b1      	bne.n	8003f3e <_strtol_l.constprop.0+0x56>
 8003fda:	2308      	movs	r3, #8
 8003fdc:	e7af      	b.n	8003f3e <_strtol_l.constprop.0+0x56>
 8003fde:	2c30      	cmp	r4, #48	; 0x30
 8003fe0:	d0a5      	beq.n	8003f2e <_strtol_l.constprop.0+0x46>
 8003fe2:	230a      	movs	r3, #10
 8003fe4:	e7ab      	b.n	8003f3e <_strtol_l.constprop.0+0x56>
 8003fe6:	bf00      	nop
 8003fe8:	08005295 	.word	0x08005295

08003fec <strtol>:
 8003fec:	4613      	mov	r3, r2
 8003fee:	460a      	mov	r2, r1
 8003ff0:	4601      	mov	r1, r0
 8003ff2:	4802      	ldr	r0, [pc, #8]	; (8003ffc <strtol+0x10>)
 8003ff4:	6800      	ldr	r0, [r0, #0]
 8003ff6:	f7ff bf77 	b.w	8003ee8 <_strtol_l.constprop.0>
 8003ffa:	bf00      	nop
 8003ffc:	200000a0 	.word	0x200000a0

08004000 <std>:
 8004000:	2300      	movs	r3, #0
 8004002:	b510      	push	{r4, lr}
 8004004:	4604      	mov	r4, r0
 8004006:	e9c0 3300 	strd	r3, r3, [r0]
 800400a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800400e:	6083      	str	r3, [r0, #8]
 8004010:	8181      	strh	r1, [r0, #12]
 8004012:	6643      	str	r3, [r0, #100]	; 0x64
 8004014:	81c2      	strh	r2, [r0, #14]
 8004016:	6183      	str	r3, [r0, #24]
 8004018:	4619      	mov	r1, r3
 800401a:	2208      	movs	r2, #8
 800401c:	305c      	adds	r0, #92	; 0x5c
 800401e:	f000 f902 	bl	8004226 <memset>
 8004022:	4b05      	ldr	r3, [pc, #20]	; (8004038 <std+0x38>)
 8004024:	6263      	str	r3, [r4, #36]	; 0x24
 8004026:	4b05      	ldr	r3, [pc, #20]	; (800403c <std+0x3c>)
 8004028:	62a3      	str	r3, [r4, #40]	; 0x28
 800402a:	4b05      	ldr	r3, [pc, #20]	; (8004040 <std+0x40>)
 800402c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800402e:	4b05      	ldr	r3, [pc, #20]	; (8004044 <std+0x44>)
 8004030:	6224      	str	r4, [r4, #32]
 8004032:	6323      	str	r3, [r4, #48]	; 0x30
 8004034:	bd10      	pop	{r4, pc}
 8004036:	bf00      	nop
 8004038:	080041a1 	.word	0x080041a1
 800403c:	080041c3 	.word	0x080041c3
 8004040:	080041fb 	.word	0x080041fb
 8004044:	0800421f 	.word	0x0800421f

08004048 <stdio_exit_handler>:
 8004048:	4a02      	ldr	r2, [pc, #8]	; (8004054 <stdio_exit_handler+0xc>)
 800404a:	4903      	ldr	r1, [pc, #12]	; (8004058 <stdio_exit_handler+0x10>)
 800404c:	4803      	ldr	r0, [pc, #12]	; (800405c <stdio_exit_handler+0x14>)
 800404e:	f000 b869 	b.w	8004124 <_fwalk_sglue>
 8004052:	bf00      	nop
 8004054:	20000048 	.word	0x20000048
 8004058:	08004bc1 	.word	0x08004bc1
 800405c:	20000054 	.word	0x20000054

08004060 <cleanup_stdio>:
 8004060:	6841      	ldr	r1, [r0, #4]
 8004062:	4b0c      	ldr	r3, [pc, #48]	; (8004094 <cleanup_stdio+0x34>)
 8004064:	4299      	cmp	r1, r3
 8004066:	b510      	push	{r4, lr}
 8004068:	4604      	mov	r4, r0
 800406a:	d001      	beq.n	8004070 <cleanup_stdio+0x10>
 800406c:	f000 fda8 	bl	8004bc0 <_fflush_r>
 8004070:	68a1      	ldr	r1, [r4, #8]
 8004072:	4b09      	ldr	r3, [pc, #36]	; (8004098 <cleanup_stdio+0x38>)
 8004074:	4299      	cmp	r1, r3
 8004076:	d002      	beq.n	800407e <cleanup_stdio+0x1e>
 8004078:	4620      	mov	r0, r4
 800407a:	f000 fda1 	bl	8004bc0 <_fflush_r>
 800407e:	68e1      	ldr	r1, [r4, #12]
 8004080:	4b06      	ldr	r3, [pc, #24]	; (800409c <cleanup_stdio+0x3c>)
 8004082:	4299      	cmp	r1, r3
 8004084:	d004      	beq.n	8004090 <cleanup_stdio+0x30>
 8004086:	4620      	mov	r0, r4
 8004088:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800408c:	f000 bd98 	b.w	8004bc0 <_fflush_r>
 8004090:	bd10      	pop	{r4, pc}
 8004092:	bf00      	nop
 8004094:	200002a0 	.word	0x200002a0
 8004098:	20000308 	.word	0x20000308
 800409c:	20000370 	.word	0x20000370

080040a0 <global_stdio_init.part.0>:
 80040a0:	b510      	push	{r4, lr}
 80040a2:	4b0b      	ldr	r3, [pc, #44]	; (80040d0 <global_stdio_init.part.0+0x30>)
 80040a4:	4c0b      	ldr	r4, [pc, #44]	; (80040d4 <global_stdio_init.part.0+0x34>)
 80040a6:	4a0c      	ldr	r2, [pc, #48]	; (80040d8 <global_stdio_init.part.0+0x38>)
 80040a8:	601a      	str	r2, [r3, #0]
 80040aa:	4620      	mov	r0, r4
 80040ac:	2200      	movs	r2, #0
 80040ae:	2104      	movs	r1, #4
 80040b0:	f7ff ffa6 	bl	8004000 <std>
 80040b4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80040b8:	2201      	movs	r2, #1
 80040ba:	2109      	movs	r1, #9
 80040bc:	f7ff ffa0 	bl	8004000 <std>
 80040c0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80040c4:	2202      	movs	r2, #2
 80040c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80040ca:	2112      	movs	r1, #18
 80040cc:	f7ff bf98 	b.w	8004000 <std>
 80040d0:	200003d8 	.word	0x200003d8
 80040d4:	200002a0 	.word	0x200002a0
 80040d8:	08004049 	.word	0x08004049

080040dc <__sfp_lock_acquire>:
 80040dc:	4801      	ldr	r0, [pc, #4]	; (80040e4 <__sfp_lock_acquire+0x8>)
 80040de:	f000 b987 	b.w	80043f0 <__retarget_lock_acquire_recursive>
 80040e2:	bf00      	nop
 80040e4:	200003e1 	.word	0x200003e1

080040e8 <__sfp_lock_release>:
 80040e8:	4801      	ldr	r0, [pc, #4]	; (80040f0 <__sfp_lock_release+0x8>)
 80040ea:	f000 b982 	b.w	80043f2 <__retarget_lock_release_recursive>
 80040ee:	bf00      	nop
 80040f0:	200003e1 	.word	0x200003e1

080040f4 <__sinit>:
 80040f4:	b510      	push	{r4, lr}
 80040f6:	4604      	mov	r4, r0
 80040f8:	f7ff fff0 	bl	80040dc <__sfp_lock_acquire>
 80040fc:	6a23      	ldr	r3, [r4, #32]
 80040fe:	b11b      	cbz	r3, 8004108 <__sinit+0x14>
 8004100:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004104:	f7ff bff0 	b.w	80040e8 <__sfp_lock_release>
 8004108:	4b04      	ldr	r3, [pc, #16]	; (800411c <__sinit+0x28>)
 800410a:	6223      	str	r3, [r4, #32]
 800410c:	4b04      	ldr	r3, [pc, #16]	; (8004120 <__sinit+0x2c>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d1f5      	bne.n	8004100 <__sinit+0xc>
 8004114:	f7ff ffc4 	bl	80040a0 <global_stdio_init.part.0>
 8004118:	e7f2      	b.n	8004100 <__sinit+0xc>
 800411a:	bf00      	nop
 800411c:	08004061 	.word	0x08004061
 8004120:	200003d8 	.word	0x200003d8

08004124 <_fwalk_sglue>:
 8004124:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004128:	4607      	mov	r7, r0
 800412a:	4688      	mov	r8, r1
 800412c:	4614      	mov	r4, r2
 800412e:	2600      	movs	r6, #0
 8004130:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004134:	f1b9 0901 	subs.w	r9, r9, #1
 8004138:	d505      	bpl.n	8004146 <_fwalk_sglue+0x22>
 800413a:	6824      	ldr	r4, [r4, #0]
 800413c:	2c00      	cmp	r4, #0
 800413e:	d1f7      	bne.n	8004130 <_fwalk_sglue+0xc>
 8004140:	4630      	mov	r0, r6
 8004142:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004146:	89ab      	ldrh	r3, [r5, #12]
 8004148:	2b01      	cmp	r3, #1
 800414a:	d907      	bls.n	800415c <_fwalk_sglue+0x38>
 800414c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004150:	3301      	adds	r3, #1
 8004152:	d003      	beq.n	800415c <_fwalk_sglue+0x38>
 8004154:	4629      	mov	r1, r5
 8004156:	4638      	mov	r0, r7
 8004158:	47c0      	blx	r8
 800415a:	4306      	orrs	r6, r0
 800415c:	3568      	adds	r5, #104	; 0x68
 800415e:	e7e9      	b.n	8004134 <_fwalk_sglue+0x10>

08004160 <siprintf>:
 8004160:	b40e      	push	{r1, r2, r3}
 8004162:	b500      	push	{lr}
 8004164:	b09c      	sub	sp, #112	; 0x70
 8004166:	ab1d      	add	r3, sp, #116	; 0x74
 8004168:	9002      	str	r0, [sp, #8]
 800416a:	9006      	str	r0, [sp, #24]
 800416c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004170:	4809      	ldr	r0, [pc, #36]	; (8004198 <siprintf+0x38>)
 8004172:	9107      	str	r1, [sp, #28]
 8004174:	9104      	str	r1, [sp, #16]
 8004176:	4909      	ldr	r1, [pc, #36]	; (800419c <siprintf+0x3c>)
 8004178:	f853 2b04 	ldr.w	r2, [r3], #4
 800417c:	9105      	str	r1, [sp, #20]
 800417e:	6800      	ldr	r0, [r0, #0]
 8004180:	9301      	str	r3, [sp, #4]
 8004182:	a902      	add	r1, sp, #8
 8004184:	f000 fa08 	bl	8004598 <_svfiprintf_r>
 8004188:	9b02      	ldr	r3, [sp, #8]
 800418a:	2200      	movs	r2, #0
 800418c:	701a      	strb	r2, [r3, #0]
 800418e:	b01c      	add	sp, #112	; 0x70
 8004190:	f85d eb04 	ldr.w	lr, [sp], #4
 8004194:	b003      	add	sp, #12
 8004196:	4770      	bx	lr
 8004198:	200000a0 	.word	0x200000a0
 800419c:	ffff0208 	.word	0xffff0208

080041a0 <__sread>:
 80041a0:	b510      	push	{r4, lr}
 80041a2:	460c      	mov	r4, r1
 80041a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80041a8:	f000 f8c4 	bl	8004334 <_read_r>
 80041ac:	2800      	cmp	r0, #0
 80041ae:	bfab      	itete	ge
 80041b0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80041b2:	89a3      	ldrhlt	r3, [r4, #12]
 80041b4:	181b      	addge	r3, r3, r0
 80041b6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80041ba:	bfac      	ite	ge
 80041bc:	6563      	strge	r3, [r4, #84]	; 0x54
 80041be:	81a3      	strhlt	r3, [r4, #12]
 80041c0:	bd10      	pop	{r4, pc}

080041c2 <__swrite>:
 80041c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80041c6:	461f      	mov	r7, r3
 80041c8:	898b      	ldrh	r3, [r1, #12]
 80041ca:	05db      	lsls	r3, r3, #23
 80041cc:	4605      	mov	r5, r0
 80041ce:	460c      	mov	r4, r1
 80041d0:	4616      	mov	r6, r2
 80041d2:	d505      	bpl.n	80041e0 <__swrite+0x1e>
 80041d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80041d8:	2302      	movs	r3, #2
 80041da:	2200      	movs	r2, #0
 80041dc:	f000 f898 	bl	8004310 <_lseek_r>
 80041e0:	89a3      	ldrh	r3, [r4, #12]
 80041e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80041e6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80041ea:	81a3      	strh	r3, [r4, #12]
 80041ec:	4632      	mov	r2, r6
 80041ee:	463b      	mov	r3, r7
 80041f0:	4628      	mov	r0, r5
 80041f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80041f6:	f000 b8bf 	b.w	8004378 <_write_r>

080041fa <__sseek>:
 80041fa:	b510      	push	{r4, lr}
 80041fc:	460c      	mov	r4, r1
 80041fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004202:	f000 f885 	bl	8004310 <_lseek_r>
 8004206:	1c43      	adds	r3, r0, #1
 8004208:	89a3      	ldrh	r3, [r4, #12]
 800420a:	bf15      	itete	ne
 800420c:	6560      	strne	r0, [r4, #84]	; 0x54
 800420e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004212:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004216:	81a3      	strheq	r3, [r4, #12]
 8004218:	bf18      	it	ne
 800421a:	81a3      	strhne	r3, [r4, #12]
 800421c:	bd10      	pop	{r4, pc}

0800421e <__sclose>:
 800421e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004222:	f000 b865 	b.w	80042f0 <_close_r>

08004226 <memset>:
 8004226:	4402      	add	r2, r0
 8004228:	4603      	mov	r3, r0
 800422a:	4293      	cmp	r3, r2
 800422c:	d100      	bne.n	8004230 <memset+0xa>
 800422e:	4770      	bx	lr
 8004230:	f803 1b01 	strb.w	r1, [r3], #1
 8004234:	e7f9      	b.n	800422a <memset+0x4>
	...

08004238 <strtok>:
 8004238:	4b16      	ldr	r3, [pc, #88]	; (8004294 <strtok+0x5c>)
 800423a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800423c:	681e      	ldr	r6, [r3, #0]
 800423e:	6c74      	ldr	r4, [r6, #68]	; 0x44
 8004240:	4605      	mov	r5, r0
 8004242:	b9fc      	cbnz	r4, 8004284 <strtok+0x4c>
 8004244:	2050      	movs	r0, #80	; 0x50
 8004246:	9101      	str	r1, [sp, #4]
 8004248:	f7ff fd9a 	bl	8003d80 <malloc>
 800424c:	9901      	ldr	r1, [sp, #4]
 800424e:	6470      	str	r0, [r6, #68]	; 0x44
 8004250:	4602      	mov	r2, r0
 8004252:	b920      	cbnz	r0, 800425e <strtok+0x26>
 8004254:	4b10      	ldr	r3, [pc, #64]	; (8004298 <strtok+0x60>)
 8004256:	4811      	ldr	r0, [pc, #68]	; (800429c <strtok+0x64>)
 8004258:	215b      	movs	r1, #91	; 0x5b
 800425a:	f000 f8d9 	bl	8004410 <__assert_func>
 800425e:	e9c0 4400 	strd	r4, r4, [r0]
 8004262:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8004266:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800426a:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800426e:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8004272:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8004276:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800427a:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800427e:	6184      	str	r4, [r0, #24]
 8004280:	7704      	strb	r4, [r0, #28]
 8004282:	6244      	str	r4, [r0, #36]	; 0x24
 8004284:	6c72      	ldr	r2, [r6, #68]	; 0x44
 8004286:	2301      	movs	r3, #1
 8004288:	4628      	mov	r0, r5
 800428a:	b002      	add	sp, #8
 800428c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004290:	f000 b806 	b.w	80042a0 <__strtok_r>
 8004294:	200000a0 	.word	0x200000a0
 8004298:	08005395 	.word	0x08005395
 800429c:	080053ac 	.word	0x080053ac

080042a0 <__strtok_r>:
 80042a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80042a2:	b908      	cbnz	r0, 80042a8 <__strtok_r+0x8>
 80042a4:	6810      	ldr	r0, [r2, #0]
 80042a6:	b188      	cbz	r0, 80042cc <__strtok_r+0x2c>
 80042a8:	4604      	mov	r4, r0
 80042aa:	4620      	mov	r0, r4
 80042ac:	f814 5b01 	ldrb.w	r5, [r4], #1
 80042b0:	460f      	mov	r7, r1
 80042b2:	f817 6b01 	ldrb.w	r6, [r7], #1
 80042b6:	b91e      	cbnz	r6, 80042c0 <__strtok_r+0x20>
 80042b8:	b965      	cbnz	r5, 80042d4 <__strtok_r+0x34>
 80042ba:	6015      	str	r5, [r2, #0]
 80042bc:	4628      	mov	r0, r5
 80042be:	e005      	b.n	80042cc <__strtok_r+0x2c>
 80042c0:	42b5      	cmp	r5, r6
 80042c2:	d1f6      	bne.n	80042b2 <__strtok_r+0x12>
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d1f0      	bne.n	80042aa <__strtok_r+0xa>
 80042c8:	6014      	str	r4, [r2, #0]
 80042ca:	7003      	strb	r3, [r0, #0]
 80042cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80042ce:	461c      	mov	r4, r3
 80042d0:	e00c      	b.n	80042ec <__strtok_r+0x4c>
 80042d2:	b915      	cbnz	r5, 80042da <__strtok_r+0x3a>
 80042d4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80042d8:	460e      	mov	r6, r1
 80042da:	f816 5b01 	ldrb.w	r5, [r6], #1
 80042de:	42ab      	cmp	r3, r5
 80042e0:	d1f7      	bne.n	80042d2 <__strtok_r+0x32>
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d0f3      	beq.n	80042ce <__strtok_r+0x2e>
 80042e6:	2300      	movs	r3, #0
 80042e8:	f804 3c01 	strb.w	r3, [r4, #-1]
 80042ec:	6014      	str	r4, [r2, #0]
 80042ee:	e7ed      	b.n	80042cc <__strtok_r+0x2c>

080042f0 <_close_r>:
 80042f0:	b538      	push	{r3, r4, r5, lr}
 80042f2:	4d06      	ldr	r5, [pc, #24]	; (800430c <_close_r+0x1c>)
 80042f4:	2300      	movs	r3, #0
 80042f6:	4604      	mov	r4, r0
 80042f8:	4608      	mov	r0, r1
 80042fa:	602b      	str	r3, [r5, #0]
 80042fc:	f7fc fdc5 	bl	8000e8a <_close>
 8004300:	1c43      	adds	r3, r0, #1
 8004302:	d102      	bne.n	800430a <_close_r+0x1a>
 8004304:	682b      	ldr	r3, [r5, #0]
 8004306:	b103      	cbz	r3, 800430a <_close_r+0x1a>
 8004308:	6023      	str	r3, [r4, #0]
 800430a:	bd38      	pop	{r3, r4, r5, pc}
 800430c:	200003dc 	.word	0x200003dc

08004310 <_lseek_r>:
 8004310:	b538      	push	{r3, r4, r5, lr}
 8004312:	4d07      	ldr	r5, [pc, #28]	; (8004330 <_lseek_r+0x20>)
 8004314:	4604      	mov	r4, r0
 8004316:	4608      	mov	r0, r1
 8004318:	4611      	mov	r1, r2
 800431a:	2200      	movs	r2, #0
 800431c:	602a      	str	r2, [r5, #0]
 800431e:	461a      	mov	r2, r3
 8004320:	f7fc fdda 	bl	8000ed8 <_lseek>
 8004324:	1c43      	adds	r3, r0, #1
 8004326:	d102      	bne.n	800432e <_lseek_r+0x1e>
 8004328:	682b      	ldr	r3, [r5, #0]
 800432a:	b103      	cbz	r3, 800432e <_lseek_r+0x1e>
 800432c:	6023      	str	r3, [r4, #0]
 800432e:	bd38      	pop	{r3, r4, r5, pc}
 8004330:	200003dc 	.word	0x200003dc

08004334 <_read_r>:
 8004334:	b538      	push	{r3, r4, r5, lr}
 8004336:	4d07      	ldr	r5, [pc, #28]	; (8004354 <_read_r+0x20>)
 8004338:	4604      	mov	r4, r0
 800433a:	4608      	mov	r0, r1
 800433c:	4611      	mov	r1, r2
 800433e:	2200      	movs	r2, #0
 8004340:	602a      	str	r2, [r5, #0]
 8004342:	461a      	mov	r2, r3
 8004344:	f7fc fd68 	bl	8000e18 <_read>
 8004348:	1c43      	adds	r3, r0, #1
 800434a:	d102      	bne.n	8004352 <_read_r+0x1e>
 800434c:	682b      	ldr	r3, [r5, #0]
 800434e:	b103      	cbz	r3, 8004352 <_read_r+0x1e>
 8004350:	6023      	str	r3, [r4, #0]
 8004352:	bd38      	pop	{r3, r4, r5, pc}
 8004354:	200003dc 	.word	0x200003dc

08004358 <_sbrk_r>:
 8004358:	b538      	push	{r3, r4, r5, lr}
 800435a:	4d06      	ldr	r5, [pc, #24]	; (8004374 <_sbrk_r+0x1c>)
 800435c:	2300      	movs	r3, #0
 800435e:	4604      	mov	r4, r0
 8004360:	4608      	mov	r0, r1
 8004362:	602b      	str	r3, [r5, #0]
 8004364:	f7fc fdc6 	bl	8000ef4 <_sbrk>
 8004368:	1c43      	adds	r3, r0, #1
 800436a:	d102      	bne.n	8004372 <_sbrk_r+0x1a>
 800436c:	682b      	ldr	r3, [r5, #0]
 800436e:	b103      	cbz	r3, 8004372 <_sbrk_r+0x1a>
 8004370:	6023      	str	r3, [r4, #0]
 8004372:	bd38      	pop	{r3, r4, r5, pc}
 8004374:	200003dc 	.word	0x200003dc

08004378 <_write_r>:
 8004378:	b538      	push	{r3, r4, r5, lr}
 800437a:	4d07      	ldr	r5, [pc, #28]	; (8004398 <_write_r+0x20>)
 800437c:	4604      	mov	r4, r0
 800437e:	4608      	mov	r0, r1
 8004380:	4611      	mov	r1, r2
 8004382:	2200      	movs	r2, #0
 8004384:	602a      	str	r2, [r5, #0]
 8004386:	461a      	mov	r2, r3
 8004388:	f7fc fd63 	bl	8000e52 <_write>
 800438c:	1c43      	adds	r3, r0, #1
 800438e:	d102      	bne.n	8004396 <_write_r+0x1e>
 8004390:	682b      	ldr	r3, [r5, #0]
 8004392:	b103      	cbz	r3, 8004396 <_write_r+0x1e>
 8004394:	6023      	str	r3, [r4, #0]
 8004396:	bd38      	pop	{r3, r4, r5, pc}
 8004398:	200003dc 	.word	0x200003dc

0800439c <__errno>:
 800439c:	4b01      	ldr	r3, [pc, #4]	; (80043a4 <__errno+0x8>)
 800439e:	6818      	ldr	r0, [r3, #0]
 80043a0:	4770      	bx	lr
 80043a2:	bf00      	nop
 80043a4:	200000a0 	.word	0x200000a0

080043a8 <__libc_init_array>:
 80043a8:	b570      	push	{r4, r5, r6, lr}
 80043aa:	4d0d      	ldr	r5, [pc, #52]	; (80043e0 <__libc_init_array+0x38>)
 80043ac:	4c0d      	ldr	r4, [pc, #52]	; (80043e4 <__libc_init_array+0x3c>)
 80043ae:	1b64      	subs	r4, r4, r5
 80043b0:	10a4      	asrs	r4, r4, #2
 80043b2:	2600      	movs	r6, #0
 80043b4:	42a6      	cmp	r6, r4
 80043b6:	d109      	bne.n	80043cc <__libc_init_array+0x24>
 80043b8:	4d0b      	ldr	r5, [pc, #44]	; (80043e8 <__libc_init_array+0x40>)
 80043ba:	4c0c      	ldr	r4, [pc, #48]	; (80043ec <__libc_init_array+0x44>)
 80043bc:	f000 ff34 	bl	8005228 <_init>
 80043c0:	1b64      	subs	r4, r4, r5
 80043c2:	10a4      	asrs	r4, r4, #2
 80043c4:	2600      	movs	r6, #0
 80043c6:	42a6      	cmp	r6, r4
 80043c8:	d105      	bne.n	80043d6 <__libc_init_array+0x2e>
 80043ca:	bd70      	pop	{r4, r5, r6, pc}
 80043cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80043d0:	4798      	blx	r3
 80043d2:	3601      	adds	r6, #1
 80043d4:	e7ee      	b.n	80043b4 <__libc_init_array+0xc>
 80043d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80043da:	4798      	blx	r3
 80043dc:	3601      	adds	r6, #1
 80043de:	e7f2      	b.n	80043c6 <__libc_init_array+0x1e>
 80043e0:	08005480 	.word	0x08005480
 80043e4:	08005480 	.word	0x08005480
 80043e8:	08005480 	.word	0x08005480
 80043ec:	08005484 	.word	0x08005484

080043f0 <__retarget_lock_acquire_recursive>:
 80043f0:	4770      	bx	lr

080043f2 <__retarget_lock_release_recursive>:
 80043f2:	4770      	bx	lr

080043f4 <memcpy>:
 80043f4:	440a      	add	r2, r1
 80043f6:	4291      	cmp	r1, r2
 80043f8:	f100 33ff 	add.w	r3, r0, #4294967295
 80043fc:	d100      	bne.n	8004400 <memcpy+0xc>
 80043fe:	4770      	bx	lr
 8004400:	b510      	push	{r4, lr}
 8004402:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004406:	f803 4f01 	strb.w	r4, [r3, #1]!
 800440a:	4291      	cmp	r1, r2
 800440c:	d1f9      	bne.n	8004402 <memcpy+0xe>
 800440e:	bd10      	pop	{r4, pc}

08004410 <__assert_func>:
 8004410:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004412:	4614      	mov	r4, r2
 8004414:	461a      	mov	r2, r3
 8004416:	4b09      	ldr	r3, [pc, #36]	; (800443c <__assert_func+0x2c>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4605      	mov	r5, r0
 800441c:	68d8      	ldr	r0, [r3, #12]
 800441e:	b14c      	cbz	r4, 8004434 <__assert_func+0x24>
 8004420:	4b07      	ldr	r3, [pc, #28]	; (8004440 <__assert_func+0x30>)
 8004422:	9100      	str	r1, [sp, #0]
 8004424:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004428:	4906      	ldr	r1, [pc, #24]	; (8004444 <__assert_func+0x34>)
 800442a:	462b      	mov	r3, r5
 800442c:	f000 fbf0 	bl	8004c10 <fiprintf>
 8004430:	f000 fc1a 	bl	8004c68 <abort>
 8004434:	4b04      	ldr	r3, [pc, #16]	; (8004448 <__assert_func+0x38>)
 8004436:	461c      	mov	r4, r3
 8004438:	e7f3      	b.n	8004422 <__assert_func+0x12>
 800443a:	bf00      	nop
 800443c:	200000a0 	.word	0x200000a0
 8004440:	08005406 	.word	0x08005406
 8004444:	08005413 	.word	0x08005413
 8004448:	08005441 	.word	0x08005441

0800444c <_free_r>:
 800444c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800444e:	2900      	cmp	r1, #0
 8004450:	d044      	beq.n	80044dc <_free_r+0x90>
 8004452:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004456:	9001      	str	r0, [sp, #4]
 8004458:	2b00      	cmp	r3, #0
 800445a:	f1a1 0404 	sub.w	r4, r1, #4
 800445e:	bfb8      	it	lt
 8004460:	18e4      	addlt	r4, r4, r3
 8004462:	f7ff fd35 	bl	8003ed0 <__malloc_lock>
 8004466:	4a1e      	ldr	r2, [pc, #120]	; (80044e0 <_free_r+0x94>)
 8004468:	9801      	ldr	r0, [sp, #4]
 800446a:	6813      	ldr	r3, [r2, #0]
 800446c:	b933      	cbnz	r3, 800447c <_free_r+0x30>
 800446e:	6063      	str	r3, [r4, #4]
 8004470:	6014      	str	r4, [r2, #0]
 8004472:	b003      	add	sp, #12
 8004474:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004478:	f7ff bd30 	b.w	8003edc <__malloc_unlock>
 800447c:	42a3      	cmp	r3, r4
 800447e:	d908      	bls.n	8004492 <_free_r+0x46>
 8004480:	6825      	ldr	r5, [r4, #0]
 8004482:	1961      	adds	r1, r4, r5
 8004484:	428b      	cmp	r3, r1
 8004486:	bf01      	itttt	eq
 8004488:	6819      	ldreq	r1, [r3, #0]
 800448a:	685b      	ldreq	r3, [r3, #4]
 800448c:	1949      	addeq	r1, r1, r5
 800448e:	6021      	streq	r1, [r4, #0]
 8004490:	e7ed      	b.n	800446e <_free_r+0x22>
 8004492:	461a      	mov	r2, r3
 8004494:	685b      	ldr	r3, [r3, #4]
 8004496:	b10b      	cbz	r3, 800449c <_free_r+0x50>
 8004498:	42a3      	cmp	r3, r4
 800449a:	d9fa      	bls.n	8004492 <_free_r+0x46>
 800449c:	6811      	ldr	r1, [r2, #0]
 800449e:	1855      	adds	r5, r2, r1
 80044a0:	42a5      	cmp	r5, r4
 80044a2:	d10b      	bne.n	80044bc <_free_r+0x70>
 80044a4:	6824      	ldr	r4, [r4, #0]
 80044a6:	4421      	add	r1, r4
 80044a8:	1854      	adds	r4, r2, r1
 80044aa:	42a3      	cmp	r3, r4
 80044ac:	6011      	str	r1, [r2, #0]
 80044ae:	d1e0      	bne.n	8004472 <_free_r+0x26>
 80044b0:	681c      	ldr	r4, [r3, #0]
 80044b2:	685b      	ldr	r3, [r3, #4]
 80044b4:	6053      	str	r3, [r2, #4]
 80044b6:	440c      	add	r4, r1
 80044b8:	6014      	str	r4, [r2, #0]
 80044ba:	e7da      	b.n	8004472 <_free_r+0x26>
 80044bc:	d902      	bls.n	80044c4 <_free_r+0x78>
 80044be:	230c      	movs	r3, #12
 80044c0:	6003      	str	r3, [r0, #0]
 80044c2:	e7d6      	b.n	8004472 <_free_r+0x26>
 80044c4:	6825      	ldr	r5, [r4, #0]
 80044c6:	1961      	adds	r1, r4, r5
 80044c8:	428b      	cmp	r3, r1
 80044ca:	bf04      	itt	eq
 80044cc:	6819      	ldreq	r1, [r3, #0]
 80044ce:	685b      	ldreq	r3, [r3, #4]
 80044d0:	6063      	str	r3, [r4, #4]
 80044d2:	bf04      	itt	eq
 80044d4:	1949      	addeq	r1, r1, r5
 80044d6:	6021      	streq	r1, [r4, #0]
 80044d8:	6054      	str	r4, [r2, #4]
 80044da:	e7ca      	b.n	8004472 <_free_r+0x26>
 80044dc:	b003      	add	sp, #12
 80044de:	bd30      	pop	{r4, r5, pc}
 80044e0:	20000298 	.word	0x20000298

080044e4 <__ssputs_r>:
 80044e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80044e8:	688e      	ldr	r6, [r1, #8]
 80044ea:	461f      	mov	r7, r3
 80044ec:	42be      	cmp	r6, r7
 80044ee:	680b      	ldr	r3, [r1, #0]
 80044f0:	4682      	mov	sl, r0
 80044f2:	460c      	mov	r4, r1
 80044f4:	4690      	mov	r8, r2
 80044f6:	d82c      	bhi.n	8004552 <__ssputs_r+0x6e>
 80044f8:	898a      	ldrh	r2, [r1, #12]
 80044fa:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80044fe:	d026      	beq.n	800454e <__ssputs_r+0x6a>
 8004500:	6965      	ldr	r5, [r4, #20]
 8004502:	6909      	ldr	r1, [r1, #16]
 8004504:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004508:	eba3 0901 	sub.w	r9, r3, r1
 800450c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004510:	1c7b      	adds	r3, r7, #1
 8004512:	444b      	add	r3, r9
 8004514:	106d      	asrs	r5, r5, #1
 8004516:	429d      	cmp	r5, r3
 8004518:	bf38      	it	cc
 800451a:	461d      	movcc	r5, r3
 800451c:	0553      	lsls	r3, r2, #21
 800451e:	d527      	bpl.n	8004570 <__ssputs_r+0x8c>
 8004520:	4629      	mov	r1, r5
 8004522:	f7ff fc55 	bl	8003dd0 <_malloc_r>
 8004526:	4606      	mov	r6, r0
 8004528:	b360      	cbz	r0, 8004584 <__ssputs_r+0xa0>
 800452a:	6921      	ldr	r1, [r4, #16]
 800452c:	464a      	mov	r2, r9
 800452e:	f7ff ff61 	bl	80043f4 <memcpy>
 8004532:	89a3      	ldrh	r3, [r4, #12]
 8004534:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004538:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800453c:	81a3      	strh	r3, [r4, #12]
 800453e:	6126      	str	r6, [r4, #16]
 8004540:	6165      	str	r5, [r4, #20]
 8004542:	444e      	add	r6, r9
 8004544:	eba5 0509 	sub.w	r5, r5, r9
 8004548:	6026      	str	r6, [r4, #0]
 800454a:	60a5      	str	r5, [r4, #8]
 800454c:	463e      	mov	r6, r7
 800454e:	42be      	cmp	r6, r7
 8004550:	d900      	bls.n	8004554 <__ssputs_r+0x70>
 8004552:	463e      	mov	r6, r7
 8004554:	6820      	ldr	r0, [r4, #0]
 8004556:	4632      	mov	r2, r6
 8004558:	4641      	mov	r1, r8
 800455a:	f000 fb6b 	bl	8004c34 <memmove>
 800455e:	68a3      	ldr	r3, [r4, #8]
 8004560:	1b9b      	subs	r3, r3, r6
 8004562:	60a3      	str	r3, [r4, #8]
 8004564:	6823      	ldr	r3, [r4, #0]
 8004566:	4433      	add	r3, r6
 8004568:	6023      	str	r3, [r4, #0]
 800456a:	2000      	movs	r0, #0
 800456c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004570:	462a      	mov	r2, r5
 8004572:	f000 fb80 	bl	8004c76 <_realloc_r>
 8004576:	4606      	mov	r6, r0
 8004578:	2800      	cmp	r0, #0
 800457a:	d1e0      	bne.n	800453e <__ssputs_r+0x5a>
 800457c:	6921      	ldr	r1, [r4, #16]
 800457e:	4650      	mov	r0, sl
 8004580:	f7ff ff64 	bl	800444c <_free_r>
 8004584:	230c      	movs	r3, #12
 8004586:	f8ca 3000 	str.w	r3, [sl]
 800458a:	89a3      	ldrh	r3, [r4, #12]
 800458c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004590:	81a3      	strh	r3, [r4, #12]
 8004592:	f04f 30ff 	mov.w	r0, #4294967295
 8004596:	e7e9      	b.n	800456c <__ssputs_r+0x88>

08004598 <_svfiprintf_r>:
 8004598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800459c:	4698      	mov	r8, r3
 800459e:	898b      	ldrh	r3, [r1, #12]
 80045a0:	061b      	lsls	r3, r3, #24
 80045a2:	b09d      	sub	sp, #116	; 0x74
 80045a4:	4607      	mov	r7, r0
 80045a6:	460d      	mov	r5, r1
 80045a8:	4614      	mov	r4, r2
 80045aa:	d50e      	bpl.n	80045ca <_svfiprintf_r+0x32>
 80045ac:	690b      	ldr	r3, [r1, #16]
 80045ae:	b963      	cbnz	r3, 80045ca <_svfiprintf_r+0x32>
 80045b0:	2140      	movs	r1, #64	; 0x40
 80045b2:	f7ff fc0d 	bl	8003dd0 <_malloc_r>
 80045b6:	6028      	str	r0, [r5, #0]
 80045b8:	6128      	str	r0, [r5, #16]
 80045ba:	b920      	cbnz	r0, 80045c6 <_svfiprintf_r+0x2e>
 80045bc:	230c      	movs	r3, #12
 80045be:	603b      	str	r3, [r7, #0]
 80045c0:	f04f 30ff 	mov.w	r0, #4294967295
 80045c4:	e0d0      	b.n	8004768 <_svfiprintf_r+0x1d0>
 80045c6:	2340      	movs	r3, #64	; 0x40
 80045c8:	616b      	str	r3, [r5, #20]
 80045ca:	2300      	movs	r3, #0
 80045cc:	9309      	str	r3, [sp, #36]	; 0x24
 80045ce:	2320      	movs	r3, #32
 80045d0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80045d4:	f8cd 800c 	str.w	r8, [sp, #12]
 80045d8:	2330      	movs	r3, #48	; 0x30
 80045da:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004780 <_svfiprintf_r+0x1e8>
 80045de:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80045e2:	f04f 0901 	mov.w	r9, #1
 80045e6:	4623      	mov	r3, r4
 80045e8:	469a      	mov	sl, r3
 80045ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80045ee:	b10a      	cbz	r2, 80045f4 <_svfiprintf_r+0x5c>
 80045f0:	2a25      	cmp	r2, #37	; 0x25
 80045f2:	d1f9      	bne.n	80045e8 <_svfiprintf_r+0x50>
 80045f4:	ebba 0b04 	subs.w	fp, sl, r4
 80045f8:	d00b      	beq.n	8004612 <_svfiprintf_r+0x7a>
 80045fa:	465b      	mov	r3, fp
 80045fc:	4622      	mov	r2, r4
 80045fe:	4629      	mov	r1, r5
 8004600:	4638      	mov	r0, r7
 8004602:	f7ff ff6f 	bl	80044e4 <__ssputs_r>
 8004606:	3001      	adds	r0, #1
 8004608:	f000 80a9 	beq.w	800475e <_svfiprintf_r+0x1c6>
 800460c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800460e:	445a      	add	r2, fp
 8004610:	9209      	str	r2, [sp, #36]	; 0x24
 8004612:	f89a 3000 	ldrb.w	r3, [sl]
 8004616:	2b00      	cmp	r3, #0
 8004618:	f000 80a1 	beq.w	800475e <_svfiprintf_r+0x1c6>
 800461c:	2300      	movs	r3, #0
 800461e:	f04f 32ff 	mov.w	r2, #4294967295
 8004622:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004626:	f10a 0a01 	add.w	sl, sl, #1
 800462a:	9304      	str	r3, [sp, #16]
 800462c:	9307      	str	r3, [sp, #28]
 800462e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004632:	931a      	str	r3, [sp, #104]	; 0x68
 8004634:	4654      	mov	r4, sl
 8004636:	2205      	movs	r2, #5
 8004638:	f814 1b01 	ldrb.w	r1, [r4], #1
 800463c:	4850      	ldr	r0, [pc, #320]	; (8004780 <_svfiprintf_r+0x1e8>)
 800463e:	f7fb fde7 	bl	8000210 <memchr>
 8004642:	9a04      	ldr	r2, [sp, #16]
 8004644:	b9d8      	cbnz	r0, 800467e <_svfiprintf_r+0xe6>
 8004646:	06d0      	lsls	r0, r2, #27
 8004648:	bf44      	itt	mi
 800464a:	2320      	movmi	r3, #32
 800464c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004650:	0711      	lsls	r1, r2, #28
 8004652:	bf44      	itt	mi
 8004654:	232b      	movmi	r3, #43	; 0x2b
 8004656:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800465a:	f89a 3000 	ldrb.w	r3, [sl]
 800465e:	2b2a      	cmp	r3, #42	; 0x2a
 8004660:	d015      	beq.n	800468e <_svfiprintf_r+0xf6>
 8004662:	9a07      	ldr	r2, [sp, #28]
 8004664:	4654      	mov	r4, sl
 8004666:	2000      	movs	r0, #0
 8004668:	f04f 0c0a 	mov.w	ip, #10
 800466c:	4621      	mov	r1, r4
 800466e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004672:	3b30      	subs	r3, #48	; 0x30
 8004674:	2b09      	cmp	r3, #9
 8004676:	d94d      	bls.n	8004714 <_svfiprintf_r+0x17c>
 8004678:	b1b0      	cbz	r0, 80046a8 <_svfiprintf_r+0x110>
 800467a:	9207      	str	r2, [sp, #28]
 800467c:	e014      	b.n	80046a8 <_svfiprintf_r+0x110>
 800467e:	eba0 0308 	sub.w	r3, r0, r8
 8004682:	fa09 f303 	lsl.w	r3, r9, r3
 8004686:	4313      	orrs	r3, r2
 8004688:	9304      	str	r3, [sp, #16]
 800468a:	46a2      	mov	sl, r4
 800468c:	e7d2      	b.n	8004634 <_svfiprintf_r+0x9c>
 800468e:	9b03      	ldr	r3, [sp, #12]
 8004690:	1d19      	adds	r1, r3, #4
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	9103      	str	r1, [sp, #12]
 8004696:	2b00      	cmp	r3, #0
 8004698:	bfbb      	ittet	lt
 800469a:	425b      	neglt	r3, r3
 800469c:	f042 0202 	orrlt.w	r2, r2, #2
 80046a0:	9307      	strge	r3, [sp, #28]
 80046a2:	9307      	strlt	r3, [sp, #28]
 80046a4:	bfb8      	it	lt
 80046a6:	9204      	strlt	r2, [sp, #16]
 80046a8:	7823      	ldrb	r3, [r4, #0]
 80046aa:	2b2e      	cmp	r3, #46	; 0x2e
 80046ac:	d10c      	bne.n	80046c8 <_svfiprintf_r+0x130>
 80046ae:	7863      	ldrb	r3, [r4, #1]
 80046b0:	2b2a      	cmp	r3, #42	; 0x2a
 80046b2:	d134      	bne.n	800471e <_svfiprintf_r+0x186>
 80046b4:	9b03      	ldr	r3, [sp, #12]
 80046b6:	1d1a      	adds	r2, r3, #4
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	9203      	str	r2, [sp, #12]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	bfb8      	it	lt
 80046c0:	f04f 33ff 	movlt.w	r3, #4294967295
 80046c4:	3402      	adds	r4, #2
 80046c6:	9305      	str	r3, [sp, #20]
 80046c8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8004790 <_svfiprintf_r+0x1f8>
 80046cc:	7821      	ldrb	r1, [r4, #0]
 80046ce:	2203      	movs	r2, #3
 80046d0:	4650      	mov	r0, sl
 80046d2:	f7fb fd9d 	bl	8000210 <memchr>
 80046d6:	b138      	cbz	r0, 80046e8 <_svfiprintf_r+0x150>
 80046d8:	9b04      	ldr	r3, [sp, #16]
 80046da:	eba0 000a 	sub.w	r0, r0, sl
 80046de:	2240      	movs	r2, #64	; 0x40
 80046e0:	4082      	lsls	r2, r0
 80046e2:	4313      	orrs	r3, r2
 80046e4:	3401      	adds	r4, #1
 80046e6:	9304      	str	r3, [sp, #16]
 80046e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80046ec:	4825      	ldr	r0, [pc, #148]	; (8004784 <_svfiprintf_r+0x1ec>)
 80046ee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80046f2:	2206      	movs	r2, #6
 80046f4:	f7fb fd8c 	bl	8000210 <memchr>
 80046f8:	2800      	cmp	r0, #0
 80046fa:	d038      	beq.n	800476e <_svfiprintf_r+0x1d6>
 80046fc:	4b22      	ldr	r3, [pc, #136]	; (8004788 <_svfiprintf_r+0x1f0>)
 80046fe:	bb1b      	cbnz	r3, 8004748 <_svfiprintf_r+0x1b0>
 8004700:	9b03      	ldr	r3, [sp, #12]
 8004702:	3307      	adds	r3, #7
 8004704:	f023 0307 	bic.w	r3, r3, #7
 8004708:	3308      	adds	r3, #8
 800470a:	9303      	str	r3, [sp, #12]
 800470c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800470e:	4433      	add	r3, r6
 8004710:	9309      	str	r3, [sp, #36]	; 0x24
 8004712:	e768      	b.n	80045e6 <_svfiprintf_r+0x4e>
 8004714:	fb0c 3202 	mla	r2, ip, r2, r3
 8004718:	460c      	mov	r4, r1
 800471a:	2001      	movs	r0, #1
 800471c:	e7a6      	b.n	800466c <_svfiprintf_r+0xd4>
 800471e:	2300      	movs	r3, #0
 8004720:	3401      	adds	r4, #1
 8004722:	9305      	str	r3, [sp, #20]
 8004724:	4619      	mov	r1, r3
 8004726:	f04f 0c0a 	mov.w	ip, #10
 800472a:	4620      	mov	r0, r4
 800472c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004730:	3a30      	subs	r2, #48	; 0x30
 8004732:	2a09      	cmp	r2, #9
 8004734:	d903      	bls.n	800473e <_svfiprintf_r+0x1a6>
 8004736:	2b00      	cmp	r3, #0
 8004738:	d0c6      	beq.n	80046c8 <_svfiprintf_r+0x130>
 800473a:	9105      	str	r1, [sp, #20]
 800473c:	e7c4      	b.n	80046c8 <_svfiprintf_r+0x130>
 800473e:	fb0c 2101 	mla	r1, ip, r1, r2
 8004742:	4604      	mov	r4, r0
 8004744:	2301      	movs	r3, #1
 8004746:	e7f0      	b.n	800472a <_svfiprintf_r+0x192>
 8004748:	ab03      	add	r3, sp, #12
 800474a:	9300      	str	r3, [sp, #0]
 800474c:	462a      	mov	r2, r5
 800474e:	4b0f      	ldr	r3, [pc, #60]	; (800478c <_svfiprintf_r+0x1f4>)
 8004750:	a904      	add	r1, sp, #16
 8004752:	4638      	mov	r0, r7
 8004754:	f3af 8000 	nop.w
 8004758:	1c42      	adds	r2, r0, #1
 800475a:	4606      	mov	r6, r0
 800475c:	d1d6      	bne.n	800470c <_svfiprintf_r+0x174>
 800475e:	89ab      	ldrh	r3, [r5, #12]
 8004760:	065b      	lsls	r3, r3, #25
 8004762:	f53f af2d 	bmi.w	80045c0 <_svfiprintf_r+0x28>
 8004766:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004768:	b01d      	add	sp, #116	; 0x74
 800476a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800476e:	ab03      	add	r3, sp, #12
 8004770:	9300      	str	r3, [sp, #0]
 8004772:	462a      	mov	r2, r5
 8004774:	4b05      	ldr	r3, [pc, #20]	; (800478c <_svfiprintf_r+0x1f4>)
 8004776:	a904      	add	r1, sp, #16
 8004778:	4638      	mov	r0, r7
 800477a:	f000 f879 	bl	8004870 <_printf_i>
 800477e:	e7eb      	b.n	8004758 <_svfiprintf_r+0x1c0>
 8004780:	08005442 	.word	0x08005442
 8004784:	0800544c 	.word	0x0800544c
 8004788:	00000000 	.word	0x00000000
 800478c:	080044e5 	.word	0x080044e5
 8004790:	08005448 	.word	0x08005448

08004794 <_printf_common>:
 8004794:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004798:	4616      	mov	r6, r2
 800479a:	4699      	mov	r9, r3
 800479c:	688a      	ldr	r2, [r1, #8]
 800479e:	690b      	ldr	r3, [r1, #16]
 80047a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80047a4:	4293      	cmp	r3, r2
 80047a6:	bfb8      	it	lt
 80047a8:	4613      	movlt	r3, r2
 80047aa:	6033      	str	r3, [r6, #0]
 80047ac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80047b0:	4607      	mov	r7, r0
 80047b2:	460c      	mov	r4, r1
 80047b4:	b10a      	cbz	r2, 80047ba <_printf_common+0x26>
 80047b6:	3301      	adds	r3, #1
 80047b8:	6033      	str	r3, [r6, #0]
 80047ba:	6823      	ldr	r3, [r4, #0]
 80047bc:	0699      	lsls	r1, r3, #26
 80047be:	bf42      	ittt	mi
 80047c0:	6833      	ldrmi	r3, [r6, #0]
 80047c2:	3302      	addmi	r3, #2
 80047c4:	6033      	strmi	r3, [r6, #0]
 80047c6:	6825      	ldr	r5, [r4, #0]
 80047c8:	f015 0506 	ands.w	r5, r5, #6
 80047cc:	d106      	bne.n	80047dc <_printf_common+0x48>
 80047ce:	f104 0a19 	add.w	sl, r4, #25
 80047d2:	68e3      	ldr	r3, [r4, #12]
 80047d4:	6832      	ldr	r2, [r6, #0]
 80047d6:	1a9b      	subs	r3, r3, r2
 80047d8:	42ab      	cmp	r3, r5
 80047da:	dc26      	bgt.n	800482a <_printf_common+0x96>
 80047dc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80047e0:	1e13      	subs	r3, r2, #0
 80047e2:	6822      	ldr	r2, [r4, #0]
 80047e4:	bf18      	it	ne
 80047e6:	2301      	movne	r3, #1
 80047e8:	0692      	lsls	r2, r2, #26
 80047ea:	d42b      	bmi.n	8004844 <_printf_common+0xb0>
 80047ec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80047f0:	4649      	mov	r1, r9
 80047f2:	4638      	mov	r0, r7
 80047f4:	47c0      	blx	r8
 80047f6:	3001      	adds	r0, #1
 80047f8:	d01e      	beq.n	8004838 <_printf_common+0xa4>
 80047fa:	6823      	ldr	r3, [r4, #0]
 80047fc:	6922      	ldr	r2, [r4, #16]
 80047fe:	f003 0306 	and.w	r3, r3, #6
 8004802:	2b04      	cmp	r3, #4
 8004804:	bf02      	ittt	eq
 8004806:	68e5      	ldreq	r5, [r4, #12]
 8004808:	6833      	ldreq	r3, [r6, #0]
 800480a:	1aed      	subeq	r5, r5, r3
 800480c:	68a3      	ldr	r3, [r4, #8]
 800480e:	bf0c      	ite	eq
 8004810:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004814:	2500      	movne	r5, #0
 8004816:	4293      	cmp	r3, r2
 8004818:	bfc4      	itt	gt
 800481a:	1a9b      	subgt	r3, r3, r2
 800481c:	18ed      	addgt	r5, r5, r3
 800481e:	2600      	movs	r6, #0
 8004820:	341a      	adds	r4, #26
 8004822:	42b5      	cmp	r5, r6
 8004824:	d11a      	bne.n	800485c <_printf_common+0xc8>
 8004826:	2000      	movs	r0, #0
 8004828:	e008      	b.n	800483c <_printf_common+0xa8>
 800482a:	2301      	movs	r3, #1
 800482c:	4652      	mov	r2, sl
 800482e:	4649      	mov	r1, r9
 8004830:	4638      	mov	r0, r7
 8004832:	47c0      	blx	r8
 8004834:	3001      	adds	r0, #1
 8004836:	d103      	bne.n	8004840 <_printf_common+0xac>
 8004838:	f04f 30ff 	mov.w	r0, #4294967295
 800483c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004840:	3501      	adds	r5, #1
 8004842:	e7c6      	b.n	80047d2 <_printf_common+0x3e>
 8004844:	18e1      	adds	r1, r4, r3
 8004846:	1c5a      	adds	r2, r3, #1
 8004848:	2030      	movs	r0, #48	; 0x30
 800484a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800484e:	4422      	add	r2, r4
 8004850:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004854:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004858:	3302      	adds	r3, #2
 800485a:	e7c7      	b.n	80047ec <_printf_common+0x58>
 800485c:	2301      	movs	r3, #1
 800485e:	4622      	mov	r2, r4
 8004860:	4649      	mov	r1, r9
 8004862:	4638      	mov	r0, r7
 8004864:	47c0      	blx	r8
 8004866:	3001      	adds	r0, #1
 8004868:	d0e6      	beq.n	8004838 <_printf_common+0xa4>
 800486a:	3601      	adds	r6, #1
 800486c:	e7d9      	b.n	8004822 <_printf_common+0x8e>
	...

08004870 <_printf_i>:
 8004870:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004874:	7e0f      	ldrb	r7, [r1, #24]
 8004876:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004878:	2f78      	cmp	r7, #120	; 0x78
 800487a:	4691      	mov	r9, r2
 800487c:	4680      	mov	r8, r0
 800487e:	460c      	mov	r4, r1
 8004880:	469a      	mov	sl, r3
 8004882:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004886:	d807      	bhi.n	8004898 <_printf_i+0x28>
 8004888:	2f62      	cmp	r7, #98	; 0x62
 800488a:	d80a      	bhi.n	80048a2 <_printf_i+0x32>
 800488c:	2f00      	cmp	r7, #0
 800488e:	f000 80d4 	beq.w	8004a3a <_printf_i+0x1ca>
 8004892:	2f58      	cmp	r7, #88	; 0x58
 8004894:	f000 80c0 	beq.w	8004a18 <_printf_i+0x1a8>
 8004898:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800489c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80048a0:	e03a      	b.n	8004918 <_printf_i+0xa8>
 80048a2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80048a6:	2b15      	cmp	r3, #21
 80048a8:	d8f6      	bhi.n	8004898 <_printf_i+0x28>
 80048aa:	a101      	add	r1, pc, #4	; (adr r1, 80048b0 <_printf_i+0x40>)
 80048ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80048b0:	08004909 	.word	0x08004909
 80048b4:	0800491d 	.word	0x0800491d
 80048b8:	08004899 	.word	0x08004899
 80048bc:	08004899 	.word	0x08004899
 80048c0:	08004899 	.word	0x08004899
 80048c4:	08004899 	.word	0x08004899
 80048c8:	0800491d 	.word	0x0800491d
 80048cc:	08004899 	.word	0x08004899
 80048d0:	08004899 	.word	0x08004899
 80048d4:	08004899 	.word	0x08004899
 80048d8:	08004899 	.word	0x08004899
 80048dc:	08004a21 	.word	0x08004a21
 80048e0:	08004949 	.word	0x08004949
 80048e4:	080049db 	.word	0x080049db
 80048e8:	08004899 	.word	0x08004899
 80048ec:	08004899 	.word	0x08004899
 80048f0:	08004a43 	.word	0x08004a43
 80048f4:	08004899 	.word	0x08004899
 80048f8:	08004949 	.word	0x08004949
 80048fc:	08004899 	.word	0x08004899
 8004900:	08004899 	.word	0x08004899
 8004904:	080049e3 	.word	0x080049e3
 8004908:	682b      	ldr	r3, [r5, #0]
 800490a:	1d1a      	adds	r2, r3, #4
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	602a      	str	r2, [r5, #0]
 8004910:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004914:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004918:	2301      	movs	r3, #1
 800491a:	e09f      	b.n	8004a5c <_printf_i+0x1ec>
 800491c:	6820      	ldr	r0, [r4, #0]
 800491e:	682b      	ldr	r3, [r5, #0]
 8004920:	0607      	lsls	r7, r0, #24
 8004922:	f103 0104 	add.w	r1, r3, #4
 8004926:	6029      	str	r1, [r5, #0]
 8004928:	d501      	bpl.n	800492e <_printf_i+0xbe>
 800492a:	681e      	ldr	r6, [r3, #0]
 800492c:	e003      	b.n	8004936 <_printf_i+0xc6>
 800492e:	0646      	lsls	r6, r0, #25
 8004930:	d5fb      	bpl.n	800492a <_printf_i+0xba>
 8004932:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004936:	2e00      	cmp	r6, #0
 8004938:	da03      	bge.n	8004942 <_printf_i+0xd2>
 800493a:	232d      	movs	r3, #45	; 0x2d
 800493c:	4276      	negs	r6, r6
 800493e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004942:	485a      	ldr	r0, [pc, #360]	; (8004aac <_printf_i+0x23c>)
 8004944:	230a      	movs	r3, #10
 8004946:	e012      	b.n	800496e <_printf_i+0xfe>
 8004948:	682b      	ldr	r3, [r5, #0]
 800494a:	6820      	ldr	r0, [r4, #0]
 800494c:	1d19      	adds	r1, r3, #4
 800494e:	6029      	str	r1, [r5, #0]
 8004950:	0605      	lsls	r5, r0, #24
 8004952:	d501      	bpl.n	8004958 <_printf_i+0xe8>
 8004954:	681e      	ldr	r6, [r3, #0]
 8004956:	e002      	b.n	800495e <_printf_i+0xee>
 8004958:	0641      	lsls	r1, r0, #25
 800495a:	d5fb      	bpl.n	8004954 <_printf_i+0xe4>
 800495c:	881e      	ldrh	r6, [r3, #0]
 800495e:	4853      	ldr	r0, [pc, #332]	; (8004aac <_printf_i+0x23c>)
 8004960:	2f6f      	cmp	r7, #111	; 0x6f
 8004962:	bf0c      	ite	eq
 8004964:	2308      	moveq	r3, #8
 8004966:	230a      	movne	r3, #10
 8004968:	2100      	movs	r1, #0
 800496a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800496e:	6865      	ldr	r5, [r4, #4]
 8004970:	60a5      	str	r5, [r4, #8]
 8004972:	2d00      	cmp	r5, #0
 8004974:	bfa2      	ittt	ge
 8004976:	6821      	ldrge	r1, [r4, #0]
 8004978:	f021 0104 	bicge.w	r1, r1, #4
 800497c:	6021      	strge	r1, [r4, #0]
 800497e:	b90e      	cbnz	r6, 8004984 <_printf_i+0x114>
 8004980:	2d00      	cmp	r5, #0
 8004982:	d04b      	beq.n	8004a1c <_printf_i+0x1ac>
 8004984:	4615      	mov	r5, r2
 8004986:	fbb6 f1f3 	udiv	r1, r6, r3
 800498a:	fb03 6711 	mls	r7, r3, r1, r6
 800498e:	5dc7      	ldrb	r7, [r0, r7]
 8004990:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004994:	4637      	mov	r7, r6
 8004996:	42bb      	cmp	r3, r7
 8004998:	460e      	mov	r6, r1
 800499a:	d9f4      	bls.n	8004986 <_printf_i+0x116>
 800499c:	2b08      	cmp	r3, #8
 800499e:	d10b      	bne.n	80049b8 <_printf_i+0x148>
 80049a0:	6823      	ldr	r3, [r4, #0]
 80049a2:	07de      	lsls	r6, r3, #31
 80049a4:	d508      	bpl.n	80049b8 <_printf_i+0x148>
 80049a6:	6923      	ldr	r3, [r4, #16]
 80049a8:	6861      	ldr	r1, [r4, #4]
 80049aa:	4299      	cmp	r1, r3
 80049ac:	bfde      	ittt	le
 80049ae:	2330      	movle	r3, #48	; 0x30
 80049b0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80049b4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80049b8:	1b52      	subs	r2, r2, r5
 80049ba:	6122      	str	r2, [r4, #16]
 80049bc:	f8cd a000 	str.w	sl, [sp]
 80049c0:	464b      	mov	r3, r9
 80049c2:	aa03      	add	r2, sp, #12
 80049c4:	4621      	mov	r1, r4
 80049c6:	4640      	mov	r0, r8
 80049c8:	f7ff fee4 	bl	8004794 <_printf_common>
 80049cc:	3001      	adds	r0, #1
 80049ce:	d14a      	bne.n	8004a66 <_printf_i+0x1f6>
 80049d0:	f04f 30ff 	mov.w	r0, #4294967295
 80049d4:	b004      	add	sp, #16
 80049d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049da:	6823      	ldr	r3, [r4, #0]
 80049dc:	f043 0320 	orr.w	r3, r3, #32
 80049e0:	6023      	str	r3, [r4, #0]
 80049e2:	4833      	ldr	r0, [pc, #204]	; (8004ab0 <_printf_i+0x240>)
 80049e4:	2778      	movs	r7, #120	; 0x78
 80049e6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80049ea:	6823      	ldr	r3, [r4, #0]
 80049ec:	6829      	ldr	r1, [r5, #0]
 80049ee:	061f      	lsls	r7, r3, #24
 80049f0:	f851 6b04 	ldr.w	r6, [r1], #4
 80049f4:	d402      	bmi.n	80049fc <_printf_i+0x18c>
 80049f6:	065f      	lsls	r7, r3, #25
 80049f8:	bf48      	it	mi
 80049fa:	b2b6      	uxthmi	r6, r6
 80049fc:	07df      	lsls	r7, r3, #31
 80049fe:	bf48      	it	mi
 8004a00:	f043 0320 	orrmi.w	r3, r3, #32
 8004a04:	6029      	str	r1, [r5, #0]
 8004a06:	bf48      	it	mi
 8004a08:	6023      	strmi	r3, [r4, #0]
 8004a0a:	b91e      	cbnz	r6, 8004a14 <_printf_i+0x1a4>
 8004a0c:	6823      	ldr	r3, [r4, #0]
 8004a0e:	f023 0320 	bic.w	r3, r3, #32
 8004a12:	6023      	str	r3, [r4, #0]
 8004a14:	2310      	movs	r3, #16
 8004a16:	e7a7      	b.n	8004968 <_printf_i+0xf8>
 8004a18:	4824      	ldr	r0, [pc, #144]	; (8004aac <_printf_i+0x23c>)
 8004a1a:	e7e4      	b.n	80049e6 <_printf_i+0x176>
 8004a1c:	4615      	mov	r5, r2
 8004a1e:	e7bd      	b.n	800499c <_printf_i+0x12c>
 8004a20:	682b      	ldr	r3, [r5, #0]
 8004a22:	6826      	ldr	r6, [r4, #0]
 8004a24:	6961      	ldr	r1, [r4, #20]
 8004a26:	1d18      	adds	r0, r3, #4
 8004a28:	6028      	str	r0, [r5, #0]
 8004a2a:	0635      	lsls	r5, r6, #24
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	d501      	bpl.n	8004a34 <_printf_i+0x1c4>
 8004a30:	6019      	str	r1, [r3, #0]
 8004a32:	e002      	b.n	8004a3a <_printf_i+0x1ca>
 8004a34:	0670      	lsls	r0, r6, #25
 8004a36:	d5fb      	bpl.n	8004a30 <_printf_i+0x1c0>
 8004a38:	8019      	strh	r1, [r3, #0]
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	6123      	str	r3, [r4, #16]
 8004a3e:	4615      	mov	r5, r2
 8004a40:	e7bc      	b.n	80049bc <_printf_i+0x14c>
 8004a42:	682b      	ldr	r3, [r5, #0]
 8004a44:	1d1a      	adds	r2, r3, #4
 8004a46:	602a      	str	r2, [r5, #0]
 8004a48:	681d      	ldr	r5, [r3, #0]
 8004a4a:	6862      	ldr	r2, [r4, #4]
 8004a4c:	2100      	movs	r1, #0
 8004a4e:	4628      	mov	r0, r5
 8004a50:	f7fb fbde 	bl	8000210 <memchr>
 8004a54:	b108      	cbz	r0, 8004a5a <_printf_i+0x1ea>
 8004a56:	1b40      	subs	r0, r0, r5
 8004a58:	6060      	str	r0, [r4, #4]
 8004a5a:	6863      	ldr	r3, [r4, #4]
 8004a5c:	6123      	str	r3, [r4, #16]
 8004a5e:	2300      	movs	r3, #0
 8004a60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a64:	e7aa      	b.n	80049bc <_printf_i+0x14c>
 8004a66:	6923      	ldr	r3, [r4, #16]
 8004a68:	462a      	mov	r2, r5
 8004a6a:	4649      	mov	r1, r9
 8004a6c:	4640      	mov	r0, r8
 8004a6e:	47d0      	blx	sl
 8004a70:	3001      	adds	r0, #1
 8004a72:	d0ad      	beq.n	80049d0 <_printf_i+0x160>
 8004a74:	6823      	ldr	r3, [r4, #0]
 8004a76:	079b      	lsls	r3, r3, #30
 8004a78:	d413      	bmi.n	8004aa2 <_printf_i+0x232>
 8004a7a:	68e0      	ldr	r0, [r4, #12]
 8004a7c:	9b03      	ldr	r3, [sp, #12]
 8004a7e:	4298      	cmp	r0, r3
 8004a80:	bfb8      	it	lt
 8004a82:	4618      	movlt	r0, r3
 8004a84:	e7a6      	b.n	80049d4 <_printf_i+0x164>
 8004a86:	2301      	movs	r3, #1
 8004a88:	4632      	mov	r2, r6
 8004a8a:	4649      	mov	r1, r9
 8004a8c:	4640      	mov	r0, r8
 8004a8e:	47d0      	blx	sl
 8004a90:	3001      	adds	r0, #1
 8004a92:	d09d      	beq.n	80049d0 <_printf_i+0x160>
 8004a94:	3501      	adds	r5, #1
 8004a96:	68e3      	ldr	r3, [r4, #12]
 8004a98:	9903      	ldr	r1, [sp, #12]
 8004a9a:	1a5b      	subs	r3, r3, r1
 8004a9c:	42ab      	cmp	r3, r5
 8004a9e:	dcf2      	bgt.n	8004a86 <_printf_i+0x216>
 8004aa0:	e7eb      	b.n	8004a7a <_printf_i+0x20a>
 8004aa2:	2500      	movs	r5, #0
 8004aa4:	f104 0619 	add.w	r6, r4, #25
 8004aa8:	e7f5      	b.n	8004a96 <_printf_i+0x226>
 8004aaa:	bf00      	nop
 8004aac:	08005453 	.word	0x08005453
 8004ab0:	08005464 	.word	0x08005464

08004ab4 <__sflush_r>:
 8004ab4:	898a      	ldrh	r2, [r1, #12]
 8004ab6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004aba:	4605      	mov	r5, r0
 8004abc:	0710      	lsls	r0, r2, #28
 8004abe:	460c      	mov	r4, r1
 8004ac0:	d458      	bmi.n	8004b74 <__sflush_r+0xc0>
 8004ac2:	684b      	ldr	r3, [r1, #4]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	dc05      	bgt.n	8004ad4 <__sflush_r+0x20>
 8004ac8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	dc02      	bgt.n	8004ad4 <__sflush_r+0x20>
 8004ace:	2000      	movs	r0, #0
 8004ad0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ad4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004ad6:	2e00      	cmp	r6, #0
 8004ad8:	d0f9      	beq.n	8004ace <__sflush_r+0x1a>
 8004ada:	2300      	movs	r3, #0
 8004adc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004ae0:	682f      	ldr	r7, [r5, #0]
 8004ae2:	6a21      	ldr	r1, [r4, #32]
 8004ae4:	602b      	str	r3, [r5, #0]
 8004ae6:	d032      	beq.n	8004b4e <__sflush_r+0x9a>
 8004ae8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004aea:	89a3      	ldrh	r3, [r4, #12]
 8004aec:	075a      	lsls	r2, r3, #29
 8004aee:	d505      	bpl.n	8004afc <__sflush_r+0x48>
 8004af0:	6863      	ldr	r3, [r4, #4]
 8004af2:	1ac0      	subs	r0, r0, r3
 8004af4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004af6:	b10b      	cbz	r3, 8004afc <__sflush_r+0x48>
 8004af8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004afa:	1ac0      	subs	r0, r0, r3
 8004afc:	2300      	movs	r3, #0
 8004afe:	4602      	mov	r2, r0
 8004b00:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004b02:	6a21      	ldr	r1, [r4, #32]
 8004b04:	4628      	mov	r0, r5
 8004b06:	47b0      	blx	r6
 8004b08:	1c43      	adds	r3, r0, #1
 8004b0a:	89a3      	ldrh	r3, [r4, #12]
 8004b0c:	d106      	bne.n	8004b1c <__sflush_r+0x68>
 8004b0e:	6829      	ldr	r1, [r5, #0]
 8004b10:	291d      	cmp	r1, #29
 8004b12:	d82b      	bhi.n	8004b6c <__sflush_r+0xb8>
 8004b14:	4a29      	ldr	r2, [pc, #164]	; (8004bbc <__sflush_r+0x108>)
 8004b16:	410a      	asrs	r2, r1
 8004b18:	07d6      	lsls	r6, r2, #31
 8004b1a:	d427      	bmi.n	8004b6c <__sflush_r+0xb8>
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	6062      	str	r2, [r4, #4]
 8004b20:	04d9      	lsls	r1, r3, #19
 8004b22:	6922      	ldr	r2, [r4, #16]
 8004b24:	6022      	str	r2, [r4, #0]
 8004b26:	d504      	bpl.n	8004b32 <__sflush_r+0x7e>
 8004b28:	1c42      	adds	r2, r0, #1
 8004b2a:	d101      	bne.n	8004b30 <__sflush_r+0x7c>
 8004b2c:	682b      	ldr	r3, [r5, #0]
 8004b2e:	b903      	cbnz	r3, 8004b32 <__sflush_r+0x7e>
 8004b30:	6560      	str	r0, [r4, #84]	; 0x54
 8004b32:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004b34:	602f      	str	r7, [r5, #0]
 8004b36:	2900      	cmp	r1, #0
 8004b38:	d0c9      	beq.n	8004ace <__sflush_r+0x1a>
 8004b3a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004b3e:	4299      	cmp	r1, r3
 8004b40:	d002      	beq.n	8004b48 <__sflush_r+0x94>
 8004b42:	4628      	mov	r0, r5
 8004b44:	f7ff fc82 	bl	800444c <_free_r>
 8004b48:	2000      	movs	r0, #0
 8004b4a:	6360      	str	r0, [r4, #52]	; 0x34
 8004b4c:	e7c0      	b.n	8004ad0 <__sflush_r+0x1c>
 8004b4e:	2301      	movs	r3, #1
 8004b50:	4628      	mov	r0, r5
 8004b52:	47b0      	blx	r6
 8004b54:	1c41      	adds	r1, r0, #1
 8004b56:	d1c8      	bne.n	8004aea <__sflush_r+0x36>
 8004b58:	682b      	ldr	r3, [r5, #0]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d0c5      	beq.n	8004aea <__sflush_r+0x36>
 8004b5e:	2b1d      	cmp	r3, #29
 8004b60:	d001      	beq.n	8004b66 <__sflush_r+0xb2>
 8004b62:	2b16      	cmp	r3, #22
 8004b64:	d101      	bne.n	8004b6a <__sflush_r+0xb6>
 8004b66:	602f      	str	r7, [r5, #0]
 8004b68:	e7b1      	b.n	8004ace <__sflush_r+0x1a>
 8004b6a:	89a3      	ldrh	r3, [r4, #12]
 8004b6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004b70:	81a3      	strh	r3, [r4, #12]
 8004b72:	e7ad      	b.n	8004ad0 <__sflush_r+0x1c>
 8004b74:	690f      	ldr	r7, [r1, #16]
 8004b76:	2f00      	cmp	r7, #0
 8004b78:	d0a9      	beq.n	8004ace <__sflush_r+0x1a>
 8004b7a:	0793      	lsls	r3, r2, #30
 8004b7c:	680e      	ldr	r6, [r1, #0]
 8004b7e:	bf08      	it	eq
 8004b80:	694b      	ldreq	r3, [r1, #20]
 8004b82:	600f      	str	r7, [r1, #0]
 8004b84:	bf18      	it	ne
 8004b86:	2300      	movne	r3, #0
 8004b88:	eba6 0807 	sub.w	r8, r6, r7
 8004b8c:	608b      	str	r3, [r1, #8]
 8004b8e:	f1b8 0f00 	cmp.w	r8, #0
 8004b92:	dd9c      	ble.n	8004ace <__sflush_r+0x1a>
 8004b94:	6a21      	ldr	r1, [r4, #32]
 8004b96:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004b98:	4643      	mov	r3, r8
 8004b9a:	463a      	mov	r2, r7
 8004b9c:	4628      	mov	r0, r5
 8004b9e:	47b0      	blx	r6
 8004ba0:	2800      	cmp	r0, #0
 8004ba2:	dc06      	bgt.n	8004bb2 <__sflush_r+0xfe>
 8004ba4:	89a3      	ldrh	r3, [r4, #12]
 8004ba6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004baa:	81a3      	strh	r3, [r4, #12]
 8004bac:	f04f 30ff 	mov.w	r0, #4294967295
 8004bb0:	e78e      	b.n	8004ad0 <__sflush_r+0x1c>
 8004bb2:	4407      	add	r7, r0
 8004bb4:	eba8 0800 	sub.w	r8, r8, r0
 8004bb8:	e7e9      	b.n	8004b8e <__sflush_r+0xda>
 8004bba:	bf00      	nop
 8004bbc:	dfbffffe 	.word	0xdfbffffe

08004bc0 <_fflush_r>:
 8004bc0:	b538      	push	{r3, r4, r5, lr}
 8004bc2:	690b      	ldr	r3, [r1, #16]
 8004bc4:	4605      	mov	r5, r0
 8004bc6:	460c      	mov	r4, r1
 8004bc8:	b913      	cbnz	r3, 8004bd0 <_fflush_r+0x10>
 8004bca:	2500      	movs	r5, #0
 8004bcc:	4628      	mov	r0, r5
 8004bce:	bd38      	pop	{r3, r4, r5, pc}
 8004bd0:	b118      	cbz	r0, 8004bda <_fflush_r+0x1a>
 8004bd2:	6a03      	ldr	r3, [r0, #32]
 8004bd4:	b90b      	cbnz	r3, 8004bda <_fflush_r+0x1a>
 8004bd6:	f7ff fa8d 	bl	80040f4 <__sinit>
 8004bda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d0f3      	beq.n	8004bca <_fflush_r+0xa>
 8004be2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004be4:	07d0      	lsls	r0, r2, #31
 8004be6:	d404      	bmi.n	8004bf2 <_fflush_r+0x32>
 8004be8:	0599      	lsls	r1, r3, #22
 8004bea:	d402      	bmi.n	8004bf2 <_fflush_r+0x32>
 8004bec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004bee:	f7ff fbff 	bl	80043f0 <__retarget_lock_acquire_recursive>
 8004bf2:	4628      	mov	r0, r5
 8004bf4:	4621      	mov	r1, r4
 8004bf6:	f7ff ff5d 	bl	8004ab4 <__sflush_r>
 8004bfa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004bfc:	07da      	lsls	r2, r3, #31
 8004bfe:	4605      	mov	r5, r0
 8004c00:	d4e4      	bmi.n	8004bcc <_fflush_r+0xc>
 8004c02:	89a3      	ldrh	r3, [r4, #12]
 8004c04:	059b      	lsls	r3, r3, #22
 8004c06:	d4e1      	bmi.n	8004bcc <_fflush_r+0xc>
 8004c08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004c0a:	f7ff fbf2 	bl	80043f2 <__retarget_lock_release_recursive>
 8004c0e:	e7dd      	b.n	8004bcc <_fflush_r+0xc>

08004c10 <fiprintf>:
 8004c10:	b40e      	push	{r1, r2, r3}
 8004c12:	b503      	push	{r0, r1, lr}
 8004c14:	4601      	mov	r1, r0
 8004c16:	ab03      	add	r3, sp, #12
 8004c18:	4805      	ldr	r0, [pc, #20]	; (8004c30 <fiprintf+0x20>)
 8004c1a:	f853 2b04 	ldr.w	r2, [r3], #4
 8004c1e:	6800      	ldr	r0, [r0, #0]
 8004c20:	9301      	str	r3, [sp, #4]
 8004c22:	f000 f881 	bl	8004d28 <_vfiprintf_r>
 8004c26:	b002      	add	sp, #8
 8004c28:	f85d eb04 	ldr.w	lr, [sp], #4
 8004c2c:	b003      	add	sp, #12
 8004c2e:	4770      	bx	lr
 8004c30:	200000a0 	.word	0x200000a0

08004c34 <memmove>:
 8004c34:	4288      	cmp	r0, r1
 8004c36:	b510      	push	{r4, lr}
 8004c38:	eb01 0402 	add.w	r4, r1, r2
 8004c3c:	d902      	bls.n	8004c44 <memmove+0x10>
 8004c3e:	4284      	cmp	r4, r0
 8004c40:	4623      	mov	r3, r4
 8004c42:	d807      	bhi.n	8004c54 <memmove+0x20>
 8004c44:	1e43      	subs	r3, r0, #1
 8004c46:	42a1      	cmp	r1, r4
 8004c48:	d008      	beq.n	8004c5c <memmove+0x28>
 8004c4a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004c4e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004c52:	e7f8      	b.n	8004c46 <memmove+0x12>
 8004c54:	4402      	add	r2, r0
 8004c56:	4601      	mov	r1, r0
 8004c58:	428a      	cmp	r2, r1
 8004c5a:	d100      	bne.n	8004c5e <memmove+0x2a>
 8004c5c:	bd10      	pop	{r4, pc}
 8004c5e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004c62:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004c66:	e7f7      	b.n	8004c58 <memmove+0x24>

08004c68 <abort>:
 8004c68:	b508      	push	{r3, lr}
 8004c6a:	2006      	movs	r0, #6
 8004c6c:	f000 fa34 	bl	80050d8 <raise>
 8004c70:	2001      	movs	r0, #1
 8004c72:	f7fc f8c7 	bl	8000e04 <_exit>

08004c76 <_realloc_r>:
 8004c76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c7a:	4680      	mov	r8, r0
 8004c7c:	4614      	mov	r4, r2
 8004c7e:	460e      	mov	r6, r1
 8004c80:	b921      	cbnz	r1, 8004c8c <_realloc_r+0x16>
 8004c82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004c86:	4611      	mov	r1, r2
 8004c88:	f7ff b8a2 	b.w	8003dd0 <_malloc_r>
 8004c8c:	b92a      	cbnz	r2, 8004c9a <_realloc_r+0x24>
 8004c8e:	f7ff fbdd 	bl	800444c <_free_r>
 8004c92:	4625      	mov	r5, r4
 8004c94:	4628      	mov	r0, r5
 8004c96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004c9a:	f000 fa39 	bl	8005110 <_malloc_usable_size_r>
 8004c9e:	4284      	cmp	r4, r0
 8004ca0:	4607      	mov	r7, r0
 8004ca2:	d802      	bhi.n	8004caa <_realloc_r+0x34>
 8004ca4:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004ca8:	d812      	bhi.n	8004cd0 <_realloc_r+0x5a>
 8004caa:	4621      	mov	r1, r4
 8004cac:	4640      	mov	r0, r8
 8004cae:	f7ff f88f 	bl	8003dd0 <_malloc_r>
 8004cb2:	4605      	mov	r5, r0
 8004cb4:	2800      	cmp	r0, #0
 8004cb6:	d0ed      	beq.n	8004c94 <_realloc_r+0x1e>
 8004cb8:	42bc      	cmp	r4, r7
 8004cba:	4622      	mov	r2, r4
 8004cbc:	4631      	mov	r1, r6
 8004cbe:	bf28      	it	cs
 8004cc0:	463a      	movcs	r2, r7
 8004cc2:	f7ff fb97 	bl	80043f4 <memcpy>
 8004cc6:	4631      	mov	r1, r6
 8004cc8:	4640      	mov	r0, r8
 8004cca:	f7ff fbbf 	bl	800444c <_free_r>
 8004cce:	e7e1      	b.n	8004c94 <_realloc_r+0x1e>
 8004cd0:	4635      	mov	r5, r6
 8004cd2:	e7df      	b.n	8004c94 <_realloc_r+0x1e>

08004cd4 <__sfputc_r>:
 8004cd4:	6893      	ldr	r3, [r2, #8]
 8004cd6:	3b01      	subs	r3, #1
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	b410      	push	{r4}
 8004cdc:	6093      	str	r3, [r2, #8]
 8004cde:	da08      	bge.n	8004cf2 <__sfputc_r+0x1e>
 8004ce0:	6994      	ldr	r4, [r2, #24]
 8004ce2:	42a3      	cmp	r3, r4
 8004ce4:	db01      	blt.n	8004cea <__sfputc_r+0x16>
 8004ce6:	290a      	cmp	r1, #10
 8004ce8:	d103      	bne.n	8004cf2 <__sfputc_r+0x1e>
 8004cea:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004cee:	f000 b935 	b.w	8004f5c <__swbuf_r>
 8004cf2:	6813      	ldr	r3, [r2, #0]
 8004cf4:	1c58      	adds	r0, r3, #1
 8004cf6:	6010      	str	r0, [r2, #0]
 8004cf8:	7019      	strb	r1, [r3, #0]
 8004cfa:	4608      	mov	r0, r1
 8004cfc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004d00:	4770      	bx	lr

08004d02 <__sfputs_r>:
 8004d02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d04:	4606      	mov	r6, r0
 8004d06:	460f      	mov	r7, r1
 8004d08:	4614      	mov	r4, r2
 8004d0a:	18d5      	adds	r5, r2, r3
 8004d0c:	42ac      	cmp	r4, r5
 8004d0e:	d101      	bne.n	8004d14 <__sfputs_r+0x12>
 8004d10:	2000      	movs	r0, #0
 8004d12:	e007      	b.n	8004d24 <__sfputs_r+0x22>
 8004d14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d18:	463a      	mov	r2, r7
 8004d1a:	4630      	mov	r0, r6
 8004d1c:	f7ff ffda 	bl	8004cd4 <__sfputc_r>
 8004d20:	1c43      	adds	r3, r0, #1
 8004d22:	d1f3      	bne.n	8004d0c <__sfputs_r+0xa>
 8004d24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004d28 <_vfiprintf_r>:
 8004d28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d2c:	460d      	mov	r5, r1
 8004d2e:	b09d      	sub	sp, #116	; 0x74
 8004d30:	4614      	mov	r4, r2
 8004d32:	4698      	mov	r8, r3
 8004d34:	4606      	mov	r6, r0
 8004d36:	b118      	cbz	r0, 8004d40 <_vfiprintf_r+0x18>
 8004d38:	6a03      	ldr	r3, [r0, #32]
 8004d3a:	b90b      	cbnz	r3, 8004d40 <_vfiprintf_r+0x18>
 8004d3c:	f7ff f9da 	bl	80040f4 <__sinit>
 8004d40:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004d42:	07d9      	lsls	r1, r3, #31
 8004d44:	d405      	bmi.n	8004d52 <_vfiprintf_r+0x2a>
 8004d46:	89ab      	ldrh	r3, [r5, #12]
 8004d48:	059a      	lsls	r2, r3, #22
 8004d4a:	d402      	bmi.n	8004d52 <_vfiprintf_r+0x2a>
 8004d4c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004d4e:	f7ff fb4f 	bl	80043f0 <__retarget_lock_acquire_recursive>
 8004d52:	89ab      	ldrh	r3, [r5, #12]
 8004d54:	071b      	lsls	r3, r3, #28
 8004d56:	d501      	bpl.n	8004d5c <_vfiprintf_r+0x34>
 8004d58:	692b      	ldr	r3, [r5, #16]
 8004d5a:	b99b      	cbnz	r3, 8004d84 <_vfiprintf_r+0x5c>
 8004d5c:	4629      	mov	r1, r5
 8004d5e:	4630      	mov	r0, r6
 8004d60:	f000 f93a 	bl	8004fd8 <__swsetup_r>
 8004d64:	b170      	cbz	r0, 8004d84 <_vfiprintf_r+0x5c>
 8004d66:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004d68:	07dc      	lsls	r4, r3, #31
 8004d6a:	d504      	bpl.n	8004d76 <_vfiprintf_r+0x4e>
 8004d6c:	f04f 30ff 	mov.w	r0, #4294967295
 8004d70:	b01d      	add	sp, #116	; 0x74
 8004d72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d76:	89ab      	ldrh	r3, [r5, #12]
 8004d78:	0598      	lsls	r0, r3, #22
 8004d7a:	d4f7      	bmi.n	8004d6c <_vfiprintf_r+0x44>
 8004d7c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004d7e:	f7ff fb38 	bl	80043f2 <__retarget_lock_release_recursive>
 8004d82:	e7f3      	b.n	8004d6c <_vfiprintf_r+0x44>
 8004d84:	2300      	movs	r3, #0
 8004d86:	9309      	str	r3, [sp, #36]	; 0x24
 8004d88:	2320      	movs	r3, #32
 8004d8a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004d8e:	f8cd 800c 	str.w	r8, [sp, #12]
 8004d92:	2330      	movs	r3, #48	; 0x30
 8004d94:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8004f48 <_vfiprintf_r+0x220>
 8004d98:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004d9c:	f04f 0901 	mov.w	r9, #1
 8004da0:	4623      	mov	r3, r4
 8004da2:	469a      	mov	sl, r3
 8004da4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004da8:	b10a      	cbz	r2, 8004dae <_vfiprintf_r+0x86>
 8004daa:	2a25      	cmp	r2, #37	; 0x25
 8004dac:	d1f9      	bne.n	8004da2 <_vfiprintf_r+0x7a>
 8004dae:	ebba 0b04 	subs.w	fp, sl, r4
 8004db2:	d00b      	beq.n	8004dcc <_vfiprintf_r+0xa4>
 8004db4:	465b      	mov	r3, fp
 8004db6:	4622      	mov	r2, r4
 8004db8:	4629      	mov	r1, r5
 8004dba:	4630      	mov	r0, r6
 8004dbc:	f7ff ffa1 	bl	8004d02 <__sfputs_r>
 8004dc0:	3001      	adds	r0, #1
 8004dc2:	f000 80a9 	beq.w	8004f18 <_vfiprintf_r+0x1f0>
 8004dc6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004dc8:	445a      	add	r2, fp
 8004dca:	9209      	str	r2, [sp, #36]	; 0x24
 8004dcc:	f89a 3000 	ldrb.w	r3, [sl]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	f000 80a1 	beq.w	8004f18 <_vfiprintf_r+0x1f0>
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	f04f 32ff 	mov.w	r2, #4294967295
 8004ddc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004de0:	f10a 0a01 	add.w	sl, sl, #1
 8004de4:	9304      	str	r3, [sp, #16]
 8004de6:	9307      	str	r3, [sp, #28]
 8004de8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004dec:	931a      	str	r3, [sp, #104]	; 0x68
 8004dee:	4654      	mov	r4, sl
 8004df0:	2205      	movs	r2, #5
 8004df2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004df6:	4854      	ldr	r0, [pc, #336]	; (8004f48 <_vfiprintf_r+0x220>)
 8004df8:	f7fb fa0a 	bl	8000210 <memchr>
 8004dfc:	9a04      	ldr	r2, [sp, #16]
 8004dfe:	b9d8      	cbnz	r0, 8004e38 <_vfiprintf_r+0x110>
 8004e00:	06d1      	lsls	r1, r2, #27
 8004e02:	bf44      	itt	mi
 8004e04:	2320      	movmi	r3, #32
 8004e06:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004e0a:	0713      	lsls	r3, r2, #28
 8004e0c:	bf44      	itt	mi
 8004e0e:	232b      	movmi	r3, #43	; 0x2b
 8004e10:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004e14:	f89a 3000 	ldrb.w	r3, [sl]
 8004e18:	2b2a      	cmp	r3, #42	; 0x2a
 8004e1a:	d015      	beq.n	8004e48 <_vfiprintf_r+0x120>
 8004e1c:	9a07      	ldr	r2, [sp, #28]
 8004e1e:	4654      	mov	r4, sl
 8004e20:	2000      	movs	r0, #0
 8004e22:	f04f 0c0a 	mov.w	ip, #10
 8004e26:	4621      	mov	r1, r4
 8004e28:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004e2c:	3b30      	subs	r3, #48	; 0x30
 8004e2e:	2b09      	cmp	r3, #9
 8004e30:	d94d      	bls.n	8004ece <_vfiprintf_r+0x1a6>
 8004e32:	b1b0      	cbz	r0, 8004e62 <_vfiprintf_r+0x13a>
 8004e34:	9207      	str	r2, [sp, #28]
 8004e36:	e014      	b.n	8004e62 <_vfiprintf_r+0x13a>
 8004e38:	eba0 0308 	sub.w	r3, r0, r8
 8004e3c:	fa09 f303 	lsl.w	r3, r9, r3
 8004e40:	4313      	orrs	r3, r2
 8004e42:	9304      	str	r3, [sp, #16]
 8004e44:	46a2      	mov	sl, r4
 8004e46:	e7d2      	b.n	8004dee <_vfiprintf_r+0xc6>
 8004e48:	9b03      	ldr	r3, [sp, #12]
 8004e4a:	1d19      	adds	r1, r3, #4
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	9103      	str	r1, [sp, #12]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	bfbb      	ittet	lt
 8004e54:	425b      	neglt	r3, r3
 8004e56:	f042 0202 	orrlt.w	r2, r2, #2
 8004e5a:	9307      	strge	r3, [sp, #28]
 8004e5c:	9307      	strlt	r3, [sp, #28]
 8004e5e:	bfb8      	it	lt
 8004e60:	9204      	strlt	r2, [sp, #16]
 8004e62:	7823      	ldrb	r3, [r4, #0]
 8004e64:	2b2e      	cmp	r3, #46	; 0x2e
 8004e66:	d10c      	bne.n	8004e82 <_vfiprintf_r+0x15a>
 8004e68:	7863      	ldrb	r3, [r4, #1]
 8004e6a:	2b2a      	cmp	r3, #42	; 0x2a
 8004e6c:	d134      	bne.n	8004ed8 <_vfiprintf_r+0x1b0>
 8004e6e:	9b03      	ldr	r3, [sp, #12]
 8004e70:	1d1a      	adds	r2, r3, #4
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	9203      	str	r2, [sp, #12]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	bfb8      	it	lt
 8004e7a:	f04f 33ff 	movlt.w	r3, #4294967295
 8004e7e:	3402      	adds	r4, #2
 8004e80:	9305      	str	r3, [sp, #20]
 8004e82:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8004f58 <_vfiprintf_r+0x230>
 8004e86:	7821      	ldrb	r1, [r4, #0]
 8004e88:	2203      	movs	r2, #3
 8004e8a:	4650      	mov	r0, sl
 8004e8c:	f7fb f9c0 	bl	8000210 <memchr>
 8004e90:	b138      	cbz	r0, 8004ea2 <_vfiprintf_r+0x17a>
 8004e92:	9b04      	ldr	r3, [sp, #16]
 8004e94:	eba0 000a 	sub.w	r0, r0, sl
 8004e98:	2240      	movs	r2, #64	; 0x40
 8004e9a:	4082      	lsls	r2, r0
 8004e9c:	4313      	orrs	r3, r2
 8004e9e:	3401      	adds	r4, #1
 8004ea0:	9304      	str	r3, [sp, #16]
 8004ea2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ea6:	4829      	ldr	r0, [pc, #164]	; (8004f4c <_vfiprintf_r+0x224>)
 8004ea8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004eac:	2206      	movs	r2, #6
 8004eae:	f7fb f9af 	bl	8000210 <memchr>
 8004eb2:	2800      	cmp	r0, #0
 8004eb4:	d03f      	beq.n	8004f36 <_vfiprintf_r+0x20e>
 8004eb6:	4b26      	ldr	r3, [pc, #152]	; (8004f50 <_vfiprintf_r+0x228>)
 8004eb8:	bb1b      	cbnz	r3, 8004f02 <_vfiprintf_r+0x1da>
 8004eba:	9b03      	ldr	r3, [sp, #12]
 8004ebc:	3307      	adds	r3, #7
 8004ebe:	f023 0307 	bic.w	r3, r3, #7
 8004ec2:	3308      	adds	r3, #8
 8004ec4:	9303      	str	r3, [sp, #12]
 8004ec6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ec8:	443b      	add	r3, r7
 8004eca:	9309      	str	r3, [sp, #36]	; 0x24
 8004ecc:	e768      	b.n	8004da0 <_vfiprintf_r+0x78>
 8004ece:	fb0c 3202 	mla	r2, ip, r2, r3
 8004ed2:	460c      	mov	r4, r1
 8004ed4:	2001      	movs	r0, #1
 8004ed6:	e7a6      	b.n	8004e26 <_vfiprintf_r+0xfe>
 8004ed8:	2300      	movs	r3, #0
 8004eda:	3401      	adds	r4, #1
 8004edc:	9305      	str	r3, [sp, #20]
 8004ede:	4619      	mov	r1, r3
 8004ee0:	f04f 0c0a 	mov.w	ip, #10
 8004ee4:	4620      	mov	r0, r4
 8004ee6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004eea:	3a30      	subs	r2, #48	; 0x30
 8004eec:	2a09      	cmp	r2, #9
 8004eee:	d903      	bls.n	8004ef8 <_vfiprintf_r+0x1d0>
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d0c6      	beq.n	8004e82 <_vfiprintf_r+0x15a>
 8004ef4:	9105      	str	r1, [sp, #20]
 8004ef6:	e7c4      	b.n	8004e82 <_vfiprintf_r+0x15a>
 8004ef8:	fb0c 2101 	mla	r1, ip, r1, r2
 8004efc:	4604      	mov	r4, r0
 8004efe:	2301      	movs	r3, #1
 8004f00:	e7f0      	b.n	8004ee4 <_vfiprintf_r+0x1bc>
 8004f02:	ab03      	add	r3, sp, #12
 8004f04:	9300      	str	r3, [sp, #0]
 8004f06:	462a      	mov	r2, r5
 8004f08:	4b12      	ldr	r3, [pc, #72]	; (8004f54 <_vfiprintf_r+0x22c>)
 8004f0a:	a904      	add	r1, sp, #16
 8004f0c:	4630      	mov	r0, r6
 8004f0e:	f3af 8000 	nop.w
 8004f12:	4607      	mov	r7, r0
 8004f14:	1c78      	adds	r0, r7, #1
 8004f16:	d1d6      	bne.n	8004ec6 <_vfiprintf_r+0x19e>
 8004f18:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004f1a:	07d9      	lsls	r1, r3, #31
 8004f1c:	d405      	bmi.n	8004f2a <_vfiprintf_r+0x202>
 8004f1e:	89ab      	ldrh	r3, [r5, #12]
 8004f20:	059a      	lsls	r2, r3, #22
 8004f22:	d402      	bmi.n	8004f2a <_vfiprintf_r+0x202>
 8004f24:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004f26:	f7ff fa64 	bl	80043f2 <__retarget_lock_release_recursive>
 8004f2a:	89ab      	ldrh	r3, [r5, #12]
 8004f2c:	065b      	lsls	r3, r3, #25
 8004f2e:	f53f af1d 	bmi.w	8004d6c <_vfiprintf_r+0x44>
 8004f32:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004f34:	e71c      	b.n	8004d70 <_vfiprintf_r+0x48>
 8004f36:	ab03      	add	r3, sp, #12
 8004f38:	9300      	str	r3, [sp, #0]
 8004f3a:	462a      	mov	r2, r5
 8004f3c:	4b05      	ldr	r3, [pc, #20]	; (8004f54 <_vfiprintf_r+0x22c>)
 8004f3e:	a904      	add	r1, sp, #16
 8004f40:	4630      	mov	r0, r6
 8004f42:	f7ff fc95 	bl	8004870 <_printf_i>
 8004f46:	e7e4      	b.n	8004f12 <_vfiprintf_r+0x1ea>
 8004f48:	08005442 	.word	0x08005442
 8004f4c:	0800544c 	.word	0x0800544c
 8004f50:	00000000 	.word	0x00000000
 8004f54:	08004d03 	.word	0x08004d03
 8004f58:	08005448 	.word	0x08005448

08004f5c <__swbuf_r>:
 8004f5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f5e:	460e      	mov	r6, r1
 8004f60:	4614      	mov	r4, r2
 8004f62:	4605      	mov	r5, r0
 8004f64:	b118      	cbz	r0, 8004f6e <__swbuf_r+0x12>
 8004f66:	6a03      	ldr	r3, [r0, #32]
 8004f68:	b90b      	cbnz	r3, 8004f6e <__swbuf_r+0x12>
 8004f6a:	f7ff f8c3 	bl	80040f4 <__sinit>
 8004f6e:	69a3      	ldr	r3, [r4, #24]
 8004f70:	60a3      	str	r3, [r4, #8]
 8004f72:	89a3      	ldrh	r3, [r4, #12]
 8004f74:	071a      	lsls	r2, r3, #28
 8004f76:	d525      	bpl.n	8004fc4 <__swbuf_r+0x68>
 8004f78:	6923      	ldr	r3, [r4, #16]
 8004f7a:	b31b      	cbz	r3, 8004fc4 <__swbuf_r+0x68>
 8004f7c:	6823      	ldr	r3, [r4, #0]
 8004f7e:	6922      	ldr	r2, [r4, #16]
 8004f80:	1a98      	subs	r0, r3, r2
 8004f82:	6963      	ldr	r3, [r4, #20]
 8004f84:	b2f6      	uxtb	r6, r6
 8004f86:	4283      	cmp	r3, r0
 8004f88:	4637      	mov	r7, r6
 8004f8a:	dc04      	bgt.n	8004f96 <__swbuf_r+0x3a>
 8004f8c:	4621      	mov	r1, r4
 8004f8e:	4628      	mov	r0, r5
 8004f90:	f7ff fe16 	bl	8004bc0 <_fflush_r>
 8004f94:	b9e0      	cbnz	r0, 8004fd0 <__swbuf_r+0x74>
 8004f96:	68a3      	ldr	r3, [r4, #8]
 8004f98:	3b01      	subs	r3, #1
 8004f9a:	60a3      	str	r3, [r4, #8]
 8004f9c:	6823      	ldr	r3, [r4, #0]
 8004f9e:	1c5a      	adds	r2, r3, #1
 8004fa0:	6022      	str	r2, [r4, #0]
 8004fa2:	701e      	strb	r6, [r3, #0]
 8004fa4:	6962      	ldr	r2, [r4, #20]
 8004fa6:	1c43      	adds	r3, r0, #1
 8004fa8:	429a      	cmp	r2, r3
 8004faa:	d004      	beq.n	8004fb6 <__swbuf_r+0x5a>
 8004fac:	89a3      	ldrh	r3, [r4, #12]
 8004fae:	07db      	lsls	r3, r3, #31
 8004fb0:	d506      	bpl.n	8004fc0 <__swbuf_r+0x64>
 8004fb2:	2e0a      	cmp	r6, #10
 8004fb4:	d104      	bne.n	8004fc0 <__swbuf_r+0x64>
 8004fb6:	4621      	mov	r1, r4
 8004fb8:	4628      	mov	r0, r5
 8004fba:	f7ff fe01 	bl	8004bc0 <_fflush_r>
 8004fbe:	b938      	cbnz	r0, 8004fd0 <__swbuf_r+0x74>
 8004fc0:	4638      	mov	r0, r7
 8004fc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004fc4:	4621      	mov	r1, r4
 8004fc6:	4628      	mov	r0, r5
 8004fc8:	f000 f806 	bl	8004fd8 <__swsetup_r>
 8004fcc:	2800      	cmp	r0, #0
 8004fce:	d0d5      	beq.n	8004f7c <__swbuf_r+0x20>
 8004fd0:	f04f 37ff 	mov.w	r7, #4294967295
 8004fd4:	e7f4      	b.n	8004fc0 <__swbuf_r+0x64>
	...

08004fd8 <__swsetup_r>:
 8004fd8:	b538      	push	{r3, r4, r5, lr}
 8004fda:	4b2a      	ldr	r3, [pc, #168]	; (8005084 <__swsetup_r+0xac>)
 8004fdc:	4605      	mov	r5, r0
 8004fde:	6818      	ldr	r0, [r3, #0]
 8004fe0:	460c      	mov	r4, r1
 8004fe2:	b118      	cbz	r0, 8004fec <__swsetup_r+0x14>
 8004fe4:	6a03      	ldr	r3, [r0, #32]
 8004fe6:	b90b      	cbnz	r3, 8004fec <__swsetup_r+0x14>
 8004fe8:	f7ff f884 	bl	80040f4 <__sinit>
 8004fec:	89a3      	ldrh	r3, [r4, #12]
 8004fee:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004ff2:	0718      	lsls	r0, r3, #28
 8004ff4:	d422      	bmi.n	800503c <__swsetup_r+0x64>
 8004ff6:	06d9      	lsls	r1, r3, #27
 8004ff8:	d407      	bmi.n	800500a <__swsetup_r+0x32>
 8004ffa:	2309      	movs	r3, #9
 8004ffc:	602b      	str	r3, [r5, #0]
 8004ffe:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005002:	81a3      	strh	r3, [r4, #12]
 8005004:	f04f 30ff 	mov.w	r0, #4294967295
 8005008:	e034      	b.n	8005074 <__swsetup_r+0x9c>
 800500a:	0758      	lsls	r0, r3, #29
 800500c:	d512      	bpl.n	8005034 <__swsetup_r+0x5c>
 800500e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005010:	b141      	cbz	r1, 8005024 <__swsetup_r+0x4c>
 8005012:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005016:	4299      	cmp	r1, r3
 8005018:	d002      	beq.n	8005020 <__swsetup_r+0x48>
 800501a:	4628      	mov	r0, r5
 800501c:	f7ff fa16 	bl	800444c <_free_r>
 8005020:	2300      	movs	r3, #0
 8005022:	6363      	str	r3, [r4, #52]	; 0x34
 8005024:	89a3      	ldrh	r3, [r4, #12]
 8005026:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800502a:	81a3      	strh	r3, [r4, #12]
 800502c:	2300      	movs	r3, #0
 800502e:	6063      	str	r3, [r4, #4]
 8005030:	6923      	ldr	r3, [r4, #16]
 8005032:	6023      	str	r3, [r4, #0]
 8005034:	89a3      	ldrh	r3, [r4, #12]
 8005036:	f043 0308 	orr.w	r3, r3, #8
 800503a:	81a3      	strh	r3, [r4, #12]
 800503c:	6923      	ldr	r3, [r4, #16]
 800503e:	b94b      	cbnz	r3, 8005054 <__swsetup_r+0x7c>
 8005040:	89a3      	ldrh	r3, [r4, #12]
 8005042:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005046:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800504a:	d003      	beq.n	8005054 <__swsetup_r+0x7c>
 800504c:	4621      	mov	r1, r4
 800504e:	4628      	mov	r0, r5
 8005050:	f000 f88c 	bl	800516c <__smakebuf_r>
 8005054:	89a0      	ldrh	r0, [r4, #12]
 8005056:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800505a:	f010 0301 	ands.w	r3, r0, #1
 800505e:	d00a      	beq.n	8005076 <__swsetup_r+0x9e>
 8005060:	2300      	movs	r3, #0
 8005062:	60a3      	str	r3, [r4, #8]
 8005064:	6963      	ldr	r3, [r4, #20]
 8005066:	425b      	negs	r3, r3
 8005068:	61a3      	str	r3, [r4, #24]
 800506a:	6923      	ldr	r3, [r4, #16]
 800506c:	b943      	cbnz	r3, 8005080 <__swsetup_r+0xa8>
 800506e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005072:	d1c4      	bne.n	8004ffe <__swsetup_r+0x26>
 8005074:	bd38      	pop	{r3, r4, r5, pc}
 8005076:	0781      	lsls	r1, r0, #30
 8005078:	bf58      	it	pl
 800507a:	6963      	ldrpl	r3, [r4, #20]
 800507c:	60a3      	str	r3, [r4, #8]
 800507e:	e7f4      	b.n	800506a <__swsetup_r+0x92>
 8005080:	2000      	movs	r0, #0
 8005082:	e7f7      	b.n	8005074 <__swsetup_r+0x9c>
 8005084:	200000a0 	.word	0x200000a0

08005088 <_raise_r>:
 8005088:	291f      	cmp	r1, #31
 800508a:	b538      	push	{r3, r4, r5, lr}
 800508c:	4604      	mov	r4, r0
 800508e:	460d      	mov	r5, r1
 8005090:	d904      	bls.n	800509c <_raise_r+0x14>
 8005092:	2316      	movs	r3, #22
 8005094:	6003      	str	r3, [r0, #0]
 8005096:	f04f 30ff 	mov.w	r0, #4294967295
 800509a:	bd38      	pop	{r3, r4, r5, pc}
 800509c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800509e:	b112      	cbz	r2, 80050a6 <_raise_r+0x1e>
 80050a0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80050a4:	b94b      	cbnz	r3, 80050ba <_raise_r+0x32>
 80050a6:	4620      	mov	r0, r4
 80050a8:	f000 f830 	bl	800510c <_getpid_r>
 80050ac:	462a      	mov	r2, r5
 80050ae:	4601      	mov	r1, r0
 80050b0:	4620      	mov	r0, r4
 80050b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80050b6:	f000 b817 	b.w	80050e8 <_kill_r>
 80050ba:	2b01      	cmp	r3, #1
 80050bc:	d00a      	beq.n	80050d4 <_raise_r+0x4c>
 80050be:	1c59      	adds	r1, r3, #1
 80050c0:	d103      	bne.n	80050ca <_raise_r+0x42>
 80050c2:	2316      	movs	r3, #22
 80050c4:	6003      	str	r3, [r0, #0]
 80050c6:	2001      	movs	r0, #1
 80050c8:	e7e7      	b.n	800509a <_raise_r+0x12>
 80050ca:	2400      	movs	r4, #0
 80050cc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80050d0:	4628      	mov	r0, r5
 80050d2:	4798      	blx	r3
 80050d4:	2000      	movs	r0, #0
 80050d6:	e7e0      	b.n	800509a <_raise_r+0x12>

080050d8 <raise>:
 80050d8:	4b02      	ldr	r3, [pc, #8]	; (80050e4 <raise+0xc>)
 80050da:	4601      	mov	r1, r0
 80050dc:	6818      	ldr	r0, [r3, #0]
 80050de:	f7ff bfd3 	b.w	8005088 <_raise_r>
 80050e2:	bf00      	nop
 80050e4:	200000a0 	.word	0x200000a0

080050e8 <_kill_r>:
 80050e8:	b538      	push	{r3, r4, r5, lr}
 80050ea:	4d07      	ldr	r5, [pc, #28]	; (8005108 <_kill_r+0x20>)
 80050ec:	2300      	movs	r3, #0
 80050ee:	4604      	mov	r4, r0
 80050f0:	4608      	mov	r0, r1
 80050f2:	4611      	mov	r1, r2
 80050f4:	602b      	str	r3, [r5, #0]
 80050f6:	f7fb fe75 	bl	8000de4 <_kill>
 80050fa:	1c43      	adds	r3, r0, #1
 80050fc:	d102      	bne.n	8005104 <_kill_r+0x1c>
 80050fe:	682b      	ldr	r3, [r5, #0]
 8005100:	b103      	cbz	r3, 8005104 <_kill_r+0x1c>
 8005102:	6023      	str	r3, [r4, #0]
 8005104:	bd38      	pop	{r3, r4, r5, pc}
 8005106:	bf00      	nop
 8005108:	200003dc 	.word	0x200003dc

0800510c <_getpid_r>:
 800510c:	f7fb be62 	b.w	8000dd4 <_getpid>

08005110 <_malloc_usable_size_r>:
 8005110:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005114:	1f18      	subs	r0, r3, #4
 8005116:	2b00      	cmp	r3, #0
 8005118:	bfbc      	itt	lt
 800511a:	580b      	ldrlt	r3, [r1, r0]
 800511c:	18c0      	addlt	r0, r0, r3
 800511e:	4770      	bx	lr

08005120 <__swhatbuf_r>:
 8005120:	b570      	push	{r4, r5, r6, lr}
 8005122:	460c      	mov	r4, r1
 8005124:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005128:	2900      	cmp	r1, #0
 800512a:	b096      	sub	sp, #88	; 0x58
 800512c:	4615      	mov	r5, r2
 800512e:	461e      	mov	r6, r3
 8005130:	da0d      	bge.n	800514e <__swhatbuf_r+0x2e>
 8005132:	89a3      	ldrh	r3, [r4, #12]
 8005134:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005138:	f04f 0100 	mov.w	r1, #0
 800513c:	bf0c      	ite	eq
 800513e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8005142:	2340      	movne	r3, #64	; 0x40
 8005144:	2000      	movs	r0, #0
 8005146:	6031      	str	r1, [r6, #0]
 8005148:	602b      	str	r3, [r5, #0]
 800514a:	b016      	add	sp, #88	; 0x58
 800514c:	bd70      	pop	{r4, r5, r6, pc}
 800514e:	466a      	mov	r2, sp
 8005150:	f000 f848 	bl	80051e4 <_fstat_r>
 8005154:	2800      	cmp	r0, #0
 8005156:	dbec      	blt.n	8005132 <__swhatbuf_r+0x12>
 8005158:	9901      	ldr	r1, [sp, #4]
 800515a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800515e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8005162:	4259      	negs	r1, r3
 8005164:	4159      	adcs	r1, r3
 8005166:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800516a:	e7eb      	b.n	8005144 <__swhatbuf_r+0x24>

0800516c <__smakebuf_r>:
 800516c:	898b      	ldrh	r3, [r1, #12]
 800516e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005170:	079d      	lsls	r5, r3, #30
 8005172:	4606      	mov	r6, r0
 8005174:	460c      	mov	r4, r1
 8005176:	d507      	bpl.n	8005188 <__smakebuf_r+0x1c>
 8005178:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800517c:	6023      	str	r3, [r4, #0]
 800517e:	6123      	str	r3, [r4, #16]
 8005180:	2301      	movs	r3, #1
 8005182:	6163      	str	r3, [r4, #20]
 8005184:	b002      	add	sp, #8
 8005186:	bd70      	pop	{r4, r5, r6, pc}
 8005188:	ab01      	add	r3, sp, #4
 800518a:	466a      	mov	r2, sp
 800518c:	f7ff ffc8 	bl	8005120 <__swhatbuf_r>
 8005190:	9900      	ldr	r1, [sp, #0]
 8005192:	4605      	mov	r5, r0
 8005194:	4630      	mov	r0, r6
 8005196:	f7fe fe1b 	bl	8003dd0 <_malloc_r>
 800519a:	b948      	cbnz	r0, 80051b0 <__smakebuf_r+0x44>
 800519c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80051a0:	059a      	lsls	r2, r3, #22
 80051a2:	d4ef      	bmi.n	8005184 <__smakebuf_r+0x18>
 80051a4:	f023 0303 	bic.w	r3, r3, #3
 80051a8:	f043 0302 	orr.w	r3, r3, #2
 80051ac:	81a3      	strh	r3, [r4, #12]
 80051ae:	e7e3      	b.n	8005178 <__smakebuf_r+0xc>
 80051b0:	89a3      	ldrh	r3, [r4, #12]
 80051b2:	6020      	str	r0, [r4, #0]
 80051b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051b8:	81a3      	strh	r3, [r4, #12]
 80051ba:	9b00      	ldr	r3, [sp, #0]
 80051bc:	6163      	str	r3, [r4, #20]
 80051be:	9b01      	ldr	r3, [sp, #4]
 80051c0:	6120      	str	r0, [r4, #16]
 80051c2:	b15b      	cbz	r3, 80051dc <__smakebuf_r+0x70>
 80051c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80051c8:	4630      	mov	r0, r6
 80051ca:	f000 f81d 	bl	8005208 <_isatty_r>
 80051ce:	b128      	cbz	r0, 80051dc <__smakebuf_r+0x70>
 80051d0:	89a3      	ldrh	r3, [r4, #12]
 80051d2:	f023 0303 	bic.w	r3, r3, #3
 80051d6:	f043 0301 	orr.w	r3, r3, #1
 80051da:	81a3      	strh	r3, [r4, #12]
 80051dc:	89a3      	ldrh	r3, [r4, #12]
 80051de:	431d      	orrs	r5, r3
 80051e0:	81a5      	strh	r5, [r4, #12]
 80051e2:	e7cf      	b.n	8005184 <__smakebuf_r+0x18>

080051e4 <_fstat_r>:
 80051e4:	b538      	push	{r3, r4, r5, lr}
 80051e6:	4d07      	ldr	r5, [pc, #28]	; (8005204 <_fstat_r+0x20>)
 80051e8:	2300      	movs	r3, #0
 80051ea:	4604      	mov	r4, r0
 80051ec:	4608      	mov	r0, r1
 80051ee:	4611      	mov	r1, r2
 80051f0:	602b      	str	r3, [r5, #0]
 80051f2:	f7fb fe56 	bl	8000ea2 <_fstat>
 80051f6:	1c43      	adds	r3, r0, #1
 80051f8:	d102      	bne.n	8005200 <_fstat_r+0x1c>
 80051fa:	682b      	ldr	r3, [r5, #0]
 80051fc:	b103      	cbz	r3, 8005200 <_fstat_r+0x1c>
 80051fe:	6023      	str	r3, [r4, #0]
 8005200:	bd38      	pop	{r3, r4, r5, pc}
 8005202:	bf00      	nop
 8005204:	200003dc 	.word	0x200003dc

08005208 <_isatty_r>:
 8005208:	b538      	push	{r3, r4, r5, lr}
 800520a:	4d06      	ldr	r5, [pc, #24]	; (8005224 <_isatty_r+0x1c>)
 800520c:	2300      	movs	r3, #0
 800520e:	4604      	mov	r4, r0
 8005210:	4608      	mov	r0, r1
 8005212:	602b      	str	r3, [r5, #0]
 8005214:	f7fb fe55 	bl	8000ec2 <_isatty>
 8005218:	1c43      	adds	r3, r0, #1
 800521a:	d102      	bne.n	8005222 <_isatty_r+0x1a>
 800521c:	682b      	ldr	r3, [r5, #0]
 800521e:	b103      	cbz	r3, 8005222 <_isatty_r+0x1a>
 8005220:	6023      	str	r3, [r4, #0]
 8005222:	bd38      	pop	{r3, r4, r5, pc}
 8005224:	200003dc 	.word	0x200003dc

08005228 <_init>:
 8005228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800522a:	bf00      	nop
 800522c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800522e:	bc08      	pop	{r3}
 8005230:	469e      	mov	lr, r3
 8005232:	4770      	bx	lr

08005234 <_fini>:
 8005234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005236:	bf00      	nop
 8005238:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800523a:	bc08      	pop	{r3}
 800523c:	469e      	mov	lr, r3
 800523e:	4770      	bx	lr
